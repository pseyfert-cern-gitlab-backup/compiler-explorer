
;; Function static constexpr bool std::numeric_limits<bool>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr bool std::numeric_limits<bool>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 1;
   >>>;
__builtin_unreachable ();


;; Function static constexpr bool std::numeric_limits<bool>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = 0>>;
   >>>;
__builtin_unreachable ();


;; Function static constexpr bool std::numeric_limits<bool>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr bool std::numeric_limits<bool>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr bool std::numeric_limits<bool>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr bool std::numeric_limits<bool>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr bool std::numeric_limits<bool>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr bool std::numeric_limits<bool>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr char std::numeric_limits<char>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = -128;
   >>>;
__builtin_unreachable ();


;; Function static constexpr char std::numeric_limits<char>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 127;
   >>>;
__builtin_unreachable ();


;; Function static constexpr char std::numeric_limits<char>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = -128>>;
   >>>;
__builtin_unreachable ();


;; Function static constexpr char std::numeric_limits<char>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr char std::numeric_limits<char>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr char std::numeric_limits<char>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr char std::numeric_limits<char>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr char std::numeric_limits<char>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr char std::numeric_limits<char>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr signed char std::numeric_limits<signed char>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = -128;
   >>>;
__builtin_unreachable ();


;; Function static constexpr signed char std::numeric_limits<signed char>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 127;
   >>>;
__builtin_unreachable ();


;; Function static constexpr signed char std::numeric_limits<signed char>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = -128>>;
   >>>;
__builtin_unreachable ();


;; Function static constexpr signed char std::numeric_limits<signed char>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr signed char std::numeric_limits<signed char>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr signed char std::numeric_limits<signed char>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr signed char std::numeric_limits<signed char>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr signed char std::numeric_limits<signed char>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr signed char std::numeric_limits<signed char>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr unsigned char std::numeric_limits<unsigned char>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr unsigned char std::numeric_limits<unsigned char>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 255;
   >>>;
__builtin_unreachable ();


;; Function static constexpr unsigned char std::numeric_limits<unsigned char>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = 0>>;
   >>>;
__builtin_unreachable ();


;; Function static constexpr unsigned char std::numeric_limits<unsigned char>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr unsigned char std::numeric_limits<unsigned char>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr unsigned char std::numeric_limits<unsigned char>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr unsigned char std::numeric_limits<unsigned char>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr unsigned char std::numeric_limits<unsigned char>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr unsigned char std::numeric_limits<unsigned char>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr wchar_t std::numeric_limits<wchar_t>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = -2147483648;
   >>>;
__builtin_unreachable ();


;; Function static constexpr wchar_t std::numeric_limits<wchar_t>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 2147483647;
   >>>;
__builtin_unreachable ();


;; Function static constexpr wchar_t std::numeric_limits<wchar_t>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = -2147483648>>;
   >>>;
__builtin_unreachable ();


;; Function static constexpr wchar_t std::numeric_limits<wchar_t>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr wchar_t std::numeric_limits<wchar_t>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr wchar_t std::numeric_limits<wchar_t>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr wchar_t std::numeric_limits<wchar_t>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr wchar_t std::numeric_limits<wchar_t>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr wchar_t std::numeric_limits<wchar_t>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr char16_t std::numeric_limits<char16_t>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr char16_t std::numeric_limits<char16_t>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 65535;
   >>>;
__builtin_unreachable ();


;; Function static constexpr char16_t std::numeric_limits<char16_t>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = 0>>;
   >>>;
__builtin_unreachable ();


;; Function static constexpr char16_t std::numeric_limits<char16_t>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr char16_t std::numeric_limits<char16_t>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr char16_t std::numeric_limits<char16_t>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr char16_t std::numeric_limits<char16_t>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr char16_t std::numeric_limits<char16_t>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr char16_t std::numeric_limits<char16_t>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr char32_t std::numeric_limits<char32_t>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr char32_t std::numeric_limits<char32_t>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 4294967295;
   >>>;
__builtin_unreachable ();


;; Function static constexpr char32_t std::numeric_limits<char32_t>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = 0>>;
   >>>;
__builtin_unreachable ();


;; Function static constexpr char32_t std::numeric_limits<char32_t>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr char32_t std::numeric_limits<char32_t>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr char32_t std::numeric_limits<char32_t>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr char32_t std::numeric_limits<char32_t>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr char32_t std::numeric_limits<char32_t>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr char32_t std::numeric_limits<char32_t>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr short int std::numeric_limits<short int>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = -32768;
   >>>;
__builtin_unreachable ();


;; Function static constexpr short int std::numeric_limits<short int>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 32767;
   >>>;
__builtin_unreachable ();


;; Function static constexpr short int std::numeric_limits<short int>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = -32768>>;
   >>>;
__builtin_unreachable ();


;; Function static constexpr short int std::numeric_limits<short int>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr short int std::numeric_limits<short int>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr short int std::numeric_limits<short int>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr short int std::numeric_limits<short int>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr short int std::numeric_limits<short int>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr short int std::numeric_limits<short int>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr short unsigned int std::numeric_limits<short unsigned int>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr short unsigned int std::numeric_limits<short unsigned int>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 65535;
   >>>;
__builtin_unreachable ();


;; Function static constexpr short unsigned int std::numeric_limits<short unsigned int>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = 0>>;
   >>>;
__builtin_unreachable ();


;; Function static constexpr short unsigned int std::numeric_limits<short unsigned int>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr short unsigned int std::numeric_limits<short unsigned int>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr short unsigned int std::numeric_limits<short unsigned int>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr short unsigned int std::numeric_limits<short unsigned int>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr short unsigned int std::numeric_limits<short unsigned int>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr short unsigned int std::numeric_limits<short unsigned int>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr int std::numeric_limits<int>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = -2147483648;
   >>>;
__builtin_unreachable ();


;; Function static constexpr int std::numeric_limits<int>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 2147483647;
   >>>;
__builtin_unreachable ();


;; Function static constexpr int std::numeric_limits<int>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = -2147483648>>;
   >>>;
__builtin_unreachable ();


;; Function static constexpr int std::numeric_limits<int>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr int std::numeric_limits<int>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr int std::numeric_limits<int>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr int std::numeric_limits<int>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr int std::numeric_limits<int>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr int std::numeric_limits<int>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr unsigned int std::numeric_limits<unsigned int>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr unsigned int std::numeric_limits<unsigned int>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 4294967295;
   >>>;
__builtin_unreachable ();


;; Function static constexpr unsigned int std::numeric_limits<unsigned int>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = 0>>;
   >>>;
__builtin_unreachable ();


;; Function static constexpr unsigned int std::numeric_limits<unsigned int>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr unsigned int std::numeric_limits<unsigned int>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr unsigned int std::numeric_limits<unsigned int>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr unsigned int std::numeric_limits<unsigned int>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr unsigned int std::numeric_limits<unsigned int>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr unsigned int std::numeric_limits<unsigned int>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr long int std::numeric_limits<long int>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = -9223372036854775808;
   >>>;
__builtin_unreachable ();


;; Function static constexpr long int std::numeric_limits<long int>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 9223372036854775807;
   >>>;
__builtin_unreachable ();


;; Function static constexpr long int std::numeric_limits<long int>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = -9223372036854775808>>;
   >>>;
__builtin_unreachable ();


;; Function static constexpr long int std::numeric_limits<long int>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr long int std::numeric_limits<long int>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr long int std::numeric_limits<long int>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr long int std::numeric_limits<long int>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr long int std::numeric_limits<long int>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr long int std::numeric_limits<long int>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr long unsigned int std::numeric_limits<long unsigned int>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr long unsigned int std::numeric_limits<long unsigned int>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 18446744073709551615;
   >>>;
__builtin_unreachable ();


;; Function static constexpr long unsigned int std::numeric_limits<long unsigned int>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = 0>>;
   >>>;
__builtin_unreachable ();


;; Function static constexpr long unsigned int std::numeric_limits<long unsigned int>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr long unsigned int std::numeric_limits<long unsigned int>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr long unsigned int std::numeric_limits<long unsigned int>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr long unsigned int std::numeric_limits<long unsigned int>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr long unsigned int std::numeric_limits<long unsigned int>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr long unsigned int std::numeric_limits<long unsigned int>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr long long int std::numeric_limits<long long int>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = -9223372036854775808;
   >>>;
__builtin_unreachable ();


;; Function static constexpr long long int std::numeric_limits<long long int>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 9223372036854775807;
   >>>;
__builtin_unreachable ();


;; Function static constexpr long long int std::numeric_limits<long long int>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = -9223372036854775808>>;
   >>>;
__builtin_unreachable ();


;; Function static constexpr long long int std::numeric_limits<long long int>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr long long int std::numeric_limits<long long int>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr long long int std::numeric_limits<long long int>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr long long int std::numeric_limits<long long int>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr long long int std::numeric_limits<long long int>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr long long int std::numeric_limits<long long int>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr long long unsigned int std::numeric_limits<long long unsigned int>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr long long unsigned int std::numeric_limits<long long unsigned int>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 18446744073709551615;
   >>>;
__builtin_unreachable ();


;; Function static constexpr long long unsigned int std::numeric_limits<long long unsigned int>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = 0>>;
   >>>;
__builtin_unreachable ();


;; Function static constexpr long long unsigned int std::numeric_limits<long long unsigned int>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr long long unsigned int std::numeric_limits<long long unsigned int>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr long long unsigned int std::numeric_limits<long long unsigned int>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr long long unsigned int std::numeric_limits<long long unsigned int>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr long long unsigned int std::numeric_limits<long long unsigned int>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr long long unsigned int std::numeric_limits<long long unsigned int>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function static constexpr float std::numeric_limits<float>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 1.17549435082228750796873653722224567781866555677208752151e-38;
   >>>;
__builtin_unreachable ();


;; Function static constexpr float std::numeric_limits<float>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 3.4028234663852885981170418348451692544e+38;
   >>>;
__builtin_unreachable ();


;; Function static constexpr float std::numeric_limits<float>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = -3.4028234663852885981170418348451692544e+38;
   >>>;
__builtin_unreachable ();


;; Function static constexpr float std::numeric_limits<float>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 1.1920928955078125e-7;
   >>>;
__builtin_unreachable ();


;; Function static constexpr float std::numeric_limits<float>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 5.0e-1;
   >>>;
__builtin_unreachable ();


;; Function static constexpr float std::numeric_limits<float>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> =  Inf;
   >>>;
__builtin_unreachable ();


;; Function static constexpr float std::numeric_limits<float>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> =  Nan;
   >>>;
__builtin_unreachable ();


;; Function static constexpr float std::numeric_limits<float>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> =  Nan;
   >>>;
__builtin_unreachable ();


;; Function static constexpr float std::numeric_limits<float>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 1.40129846432481707092372958328991613128026194187651577176e-45;
   >>>;
__builtin_unreachable ();


;; Function static constexpr double std::numeric_limits<double>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 2.22507385850720138309023271733240406421921598046233183055e-308;
   >>>;
__builtin_unreachable ();


;; Function static constexpr double std::numeric_limits<double>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 1.79769313486231570814527423731704356798070567525844996599e+308;
   >>>;
__builtin_unreachable ();


;; Function static constexpr double std::numeric_limits<double>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = -1.79769313486231570814527423731704356798070567525844996599e+308;
   >>>;
__builtin_unreachable ();


;; Function static constexpr double std::numeric_limits<double>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 2.220446049250313080847263336181640625e-16;
   >>>;
__builtin_unreachable ();


;; Function static constexpr double std::numeric_limits<double>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 5.0e-1;
   >>>;
__builtin_unreachable ();


;; Function static constexpr double std::numeric_limits<double>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> =  Inf;
   >>>;
__builtin_unreachable ();


;; Function static constexpr double std::numeric_limits<double>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> =  Nan;
   >>>;
__builtin_unreachable ();


;; Function static constexpr double std::numeric_limits<double>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> =  Nan;
   >>>;
__builtin_unreachable ();


;; Function static constexpr double std::numeric_limits<double>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 4.94065645841246544176568792868221372365059802614324764425e-324;
   >>>;
__builtin_unreachable ();


;; Function static constexpr long double std::numeric_limits<long double>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 3.36210314311209350626267781732175260259807934484647124011e-4932;
   >>>;
__builtin_unreachable ();


;; Function static constexpr long double std::numeric_limits<long double>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 1.18973149535723176502126385303097020516906332229462420044e+4932;
   >>>;
__builtin_unreachable ();


;; Function static constexpr long double std::numeric_limits<long double>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = -1.18973149535723176502126385303097020516906332229462420044e+4932;
   >>>;
__builtin_unreachable ();


;; Function static constexpr long double std::numeric_limits<long double>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 1.08420217248550443400745280086994171142578125e-19;
   >>>;
__builtin_unreachable ();


;; Function static constexpr long double std::numeric_limits<long double>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 5.0e-1;
   >>>;
__builtin_unreachable ();


;; Function static constexpr long double std::numeric_limits<long double>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> =  Inf;
   >>>;
__builtin_unreachable ();


;; Function static constexpr long double std::numeric_limits<long double>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> =  Nan;
   >>>;
__builtin_unreachable ();


;; Function static constexpr long double std::numeric_limits<long double>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> =  Nan;
   >>>;
__builtin_unreachable ();


;; Function static constexpr long double std::numeric_limits<long double>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 3.64519953188247460252840593361941981639905081569356334372e-4951;
   >>>;
__builtin_unreachable ();


;; Function wint_t btowc(int) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = __builtin_constant_p (__c) == 0 || (unsigned int) __c > 127 ? __btowc_alias (__c) : (wint_t) __c>>;
   >>>;
__builtin_unreachable ();


;; Function int wctob(wint_t) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = __builtin_constant_p (__wc) == 0 || __wc > 127 ? __wctob_alias (__wc) : (int) __wc>>;
   >>>;
__builtin_unreachable ();


;; Function size_t mbrlen(const char*, size_t, mbstate_t*) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = __ps != 0B ? mbrtowc (0B, __s, __n, __ps) : __mbrlen (__s, __n, 0B)>>;
   >>>;
__builtin_unreachable ();


;; Function std::exception::exception() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int (*) () * _vptr.exception;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct exception *) this)->_vptr.exception = &_ZTVSt9exception + 16) >>>>>;
  }
   >>>;


;; Function std::bad_exception::bad_exception() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      int (*) () * _vptr.exception;
    } D.4211;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::exception::exception (&((struct bad_exception *) this)->D.4210) >>>>>;
    try
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct bad_exception *) this)->D.4210._vptr.exception = &_ZTVSt13bad_exception + 16) >>>>>;
      }
    catch
      {
        std::exception::~exception (&((struct bad_exception *) this)->D.4210);
      }
  }
   >>>;


;; Function const char* std::type_info::name() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = *(const char *) ((const struct type_info *) this)->__name == 42 ? (const char *) ((const struct type_info *) this)->__name + 1 : (const char *) ((const struct type_info *) this)->__name;
   >>>;
__builtin_unreachable ();


;; Function bool std::type_info::before(const std::type_info&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = *(const char *) ((const struct type_info *) this)->__name == 42 && *(const char *) __arg->__name == 42 ? (const char *) ((const struct type_info *) this)->__name < (const char *) __arg->__name : __builtin_strcmp ((const char *) ((const struct type_info *) this)->__name, (const char *) __arg->__name) < 0;
   >>>;
__builtin_unreachable ();


;; Function bool std::type_info::operator==(const std::type_info&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = (const char *) ((const struct type_info *) this)->__name == (const char *) __arg->__name || *(const char *) ((const struct type_info *) this)->__name != 42 && __builtin_strcmp ((const char *) ((const struct type_info *) this)->__name, (const char *) __arg->__name) == 0;
   >>>;
__builtin_unreachable ();


;; Function bool std::type_info::operator!=(const std::type_info&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = !std::type_info::operator== ((const struct type_info *) this, __arg)>>;
   >>>;
__builtin_unreachable ();


;; Function std::size_t std::type_info::hash_code() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = std::_Hash_bytes ((const void *) std::type_info::name ((const struct type_info *) this), __builtin_strlen (std::type_info::name ((const struct type_info *) this)), 3339675911)>>;
   >>>;
__builtin_unreachable ();


;; Function std::type_info::type_info(const char*) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int (*) () * _vptr.type_info;
    const char * __name;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct type_info *) this)->_vptr.type_info = &_ZTVSt9type_info + 16) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct type_info *) this)->__name = __n) >>>>>;
}


;; Function std::bad_cast::bad_cast() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      int (*) () * _vptr.exception;
    } D.4365;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::exception::exception (&((struct bad_cast *) this)->D.4364) >>>>>;
    try
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct bad_cast *) this)->D.4364._vptr.exception = &_ZTVSt8bad_cast + 16) >>>>>;
      }
    catch
      {
        std::exception::~exception (&((struct bad_cast *) this)->D.4364);
      }
  }
   >>>;


;; Function std::bad_typeid::bad_typeid() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      int (*) () * _vptr.exception;
    } D.4394;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::exception::exception (&((struct bad_typeid *) this)->D.4393) >>>>>;
    try
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct bad_typeid *) this)->D.4393._vptr.exception = &_ZTVSt10bad_typeid + 16) >>>>>;
      }
    catch
      {
        std::exception::~exception (&((struct bad_typeid *) this)->D.4393);
      }
  }
   >>>;


;; Function std::bad_alloc::bad_alloc() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      int (*) () * _vptr.exception;
    } D.4423;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::exception::exception (&((struct bad_alloc *) this)->D.4422) >>>>>;
    try
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct bad_alloc *) this)->D.4422._vptr.exception = &_ZTVSt9bad_alloc + 16) >>>>>;
      }
    catch
      {
        std::exception::~exception (&((struct bad_alloc *) this)->D.4422);
      }
  }
   >>>;


;; Function std::bad_array_new_length::bad_array_new_length() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      struct 
      {
        int (*) () * _vptr.exception;
      } D.4423;
    } D.4452;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::bad_alloc::bad_alloc (&((struct bad_array_new_length *) this)->D.4451) >>>>>;
    try
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct bad_array_new_length *) this)->D.4451.D.4422._vptr.exception = &_ZTVSt20bad_array_new_length + 16) >>>>>;
      }
    catch
      {
        std::bad_alloc::~bad_alloc (&((struct bad_array_new_length *) this)->D.4451);
      }
  }
   >>>;


;; Function void* operator new(std::size_t, void*) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = __p;
   >>>;
__builtin_unreachable ();


;; Function void* operator new [](std::size_t, void*) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = __p;
   >>>;
__builtin_unreachable ();


;; Function void operator delete(void*, void*) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  
   >>>;


;; Function void operator delete [](void*, void*) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  
   >>>;


;; Function std::__exception_ptr::exception_ptr::exception_ptr(std::nullptr_t) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    void * _M_exception_object;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct exception_ptr *) this)->_M_exception_object = 0B) >>>>>;
  }
   >>>;


;; Function std::__exception_ptr::exception_ptr::exception_ptr(std::__exception_ptr::exception_ptr&&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    void * _M_exception_object;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct exception_ptr *) this)->_M_exception_object = __o->_M_exception_object) >>>>>;
    # DEBUG BEGIN STMT;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__o->_M_exception_object = 0B) >>>>>;
  }
   >>>;


;; Function std::__exception_ptr::exception_ptr& std::__exception_ptr::exception_ptr::operator=(std::__exception_ptr::exception_ptr&&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__exception_ptr::exception_ptr::swap (&TARGET_EXPR <D.4691, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.4691
  (struct exception_ptr *) <<< Unknown tree: void_cst >>>
  NON_LVALUE_EXPR <__o> >>>>, (struct exception_ptr &) this) >>>>>;
  # DEBUG BEGIN STMT;
  return <retval> = (struct exception_ptr &) this;
   >>>;
__builtin_unreachable ();


;; Function std::__exception_ptr::exception_ptr::operator bool() const (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
return <retval> = (void *) ((const struct exception_ptr *) this)->_M_exception_object != 0B;


;; Function void std::__exception_ptr::swap(std::__exception_ptr::exception_ptr&, std::__exception_ptr::exception_ptr&) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point <<< Unknown tree: expr_stmt
  std::__exception_ptr::exception_ptr::swap ((struct exception_ptr *) __lhs, __rhs) >>>>>;


;; Function std::nested_exception::nested_exception() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int (*) () * _vptr.nested_exception;
    struct exception_ptr _M_ptr;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct nested_exception *) this)->_vptr.nested_exception = &_ZTVSt16nested_exception + 16) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct nested_exception *) this)->_M_ptr = TARGET_EXPR <D.8555, <<< Unknown tree: aggr_init_expr
  3
  current_exception
  D.8555 >>>>) >>>>>;
    try
      {
        
      }
    catch
      {
        std::__exception_ptr::exception_ptr::~exception_ptr (&((struct nested_exception *) this)->_M_ptr);
      }
  }
   >>>;


;; Function void std::nested_exception::rethrow_nested() const (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
if (<<cleanup_point std::__exception_ptr::exception_ptr::operator bool (&((const struct nested_exception *) this)->_M_ptr)>>)
  {
    # DEBUG BEGIN STMT;
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::rethrow_exception (&TARGET_EXPR <D.8560, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.8560
  (struct exception_ptr *) <<< Unknown tree: void_cst >>>
  (const struct exception_ptr &) &((const struct nested_exception *) this)->_M_ptr >>>>) >>>>>;
  }
# DEBUG BEGIN STMT;
<<cleanup_point <<< Unknown tree: expr_stmt
  std::terminate () >>>>>;


;; Function std::__exception_ptr::exception_ptr std::nested_exception::nested_ptr() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return *<retval> = TARGET_EXPR <D.8562, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.8562
  (struct exception_ptr *) <<< Unknown tree: void_cst >>>
  (const struct exception_ptr &) &((const struct nested_exception *) this)->_M_ptr >>>>>>;
   >>>;
__builtin_unreachable ();


;; Function void std::__rethrow_if_nested_impl(const void*) (null)
;; enabled by -tree-original





;; Function bool __gnu_cxx::__is_null_pointer(std::nullptr_t) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
return <retval> = 1;


;; Function constexpr __gnu_cxx::__ops::_Iter_less_iter __gnu_cxx::__ops::__iter_less_iter() (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = TARGET_EXPR <D.11039, {}>>>;


;; Function __gnu_cxx::__ops::_Iter_less_val::_Iter_less_val(__gnu_cxx::__ops::_Iter_less_iter) (null)
;; enabled by -tree-original


{
  
}


;; Function __gnu_cxx::__ops::_Iter_less_val __gnu_cxx::__ops::__iter_less_val() (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = TARGET_EXPR <D.11110, {}>>>;


;; Function __gnu_cxx::__ops::_Iter_less_val __gnu_cxx::__ops::__iter_comp_val(__gnu_cxx::__ops::_Iter_less_iter) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = TARGET_EXPR <D.11115, {}>>>;


;; Function __gnu_cxx::__ops::_Val_less_iter::_Val_less_iter(__gnu_cxx::__ops::_Iter_less_iter) (null)
;; enabled by -tree-original


{
  
}


;; Function __gnu_cxx::__ops::_Val_less_iter __gnu_cxx::__ops::__val_less_iter() (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = TARGET_EXPR <D.11177, {}>>>;


;; Function __gnu_cxx::__ops::_Val_less_iter __gnu_cxx::__ops::__val_comp_iter(__gnu_cxx::__ops::_Iter_less_iter) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = TARGET_EXPR <D.11182, {}>>>;


;; Function __gnu_cxx::__ops::_Iter_equal_to_iter __gnu_cxx::__ops::__iter_equal_to_iter() (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = TARGET_EXPR <D.11220, {}>>>;


;; Function __gnu_cxx::__ops::_Iter_equal_to_val __gnu_cxx::__ops::__iter_equal_to_val() (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = TARGET_EXPR <D.11267, {}>>>;


;; Function __gnu_cxx::__ops::_Iter_equal_to_val __gnu_cxx::__ops::__iter_comp_val(__gnu_cxx::__ops::_Iter_equal_to_iter) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = TARGET_EXPR <D.11280, {}>>>;


;; Function constexpr int std::__lg(int) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
return <retval> = (int) (31 - (unsigned int) __builtin_clz ((unsigned int) __n));


;; Function constexpr unsigned int std::__lg(unsigned int) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
return <retval> = 31 - (unsigned int) __builtin_clz (__n);


;; Function constexpr long int std::__lg(long int) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
return <retval> = (long int) (63 - (long unsigned int) __builtin_clzl ((long unsigned int) __n));


;; Function constexpr long unsigned int std::__lg(long unsigned int) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
return <retval> = 63 - (long unsigned int) __builtin_clzl (__n);


;; Function constexpr long long int std::__lg(long long int) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
return <retval> = (long long int) (63 - (long unsigned int) __builtin_clzll ((long long unsigned int) __n));


;; Function constexpr long long unsigned int std::__lg(long long unsigned int) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
return <retval> = (long long unsigned int) (63 - (long unsigned int) __builtin_clzll (__n));


;; Function static constexpr void std::char_traits<char>::assign(std::char_traits<char>::char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__c1 = (char_type) *__c2) >>>>>;
   >>>;


;; Function static constexpr bool std::char_traits<char>::eq(const char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = *__c1 == *__c2;
   >>>;
__builtin_unreachable ();


;; Function static constexpr bool std::char_traits<char>::lt(const char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = (unsigned char) *__c1 < (unsigned char) *__c2;
   >>>;
__builtin_unreachable ();


;; Function constexpr bool std::__constant_char_array_p(const _CharT*, std::size_t) [with _CharT = char; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


{
  size_t __i = 0;

  <<cleanup_point   size_t __i = 0;>>;
  while (1)
    {
      if (__builtin_constant_p ((char) *(__a + (sizetype) NON_LVALUE_EXPR <__i>)) == 0 || __i >= __n) goto <D.12569>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __i++  >>>>>;
    }
  <D.12569>:;
  return <retval> = __i == __n;
}


;; Function static constexpr bool __gnu_cxx::char_traits<_CharT>::lt(const char_type&, const char_type&) [with _CharT = char; __gnu_cxx::char_traits<_CharT>::char_type = char] (null)
;; enabled by -tree-original


return <retval> = *__c1 < *__c2;


;; Function static constexpr int __gnu_cxx::char_traits<_CharT>::compare(const char_type*, const char_type*, std::size_t) [with _CharT = char; __gnu_cxx::char_traits<_CharT>::char_type = char; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


{
  {
    size_t __i = 0;

    <<cleanup_point     size_t __i = 0;>>;
    while (1)
      {
        if (__i >= __n) goto <D.12630>;
        if (<<cleanup_point __gnu_cxx::char_traits<char>::lt ((const char_type &) (__s1 + (sizetype) NON_LVALUE_EXPR <__i>), (const char_type &) (__s2 + (sizetype) NON_LVALUE_EXPR <__i>))>>)
          {
            return <retval> = -1;
          }
        else
          {
            if (<<cleanup_point __gnu_cxx::char_traits<char>::lt ((const char_type &) (__s2 + (sizetype) NON_LVALUE_EXPR <__i>), (const char_type &) (__s1 + (sizetype) NON_LVALUE_EXPR <__i>))>>)
              {
                return <retval> = 1;
              }
          }
        <<cleanup_point (void)  ++__i>>;
      }
    <D.12630>:;
  }
  return <retval> = 0;
}


;; Function static constexpr int std::char_traits<char>::compare(const char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
if (<<cleanup_point (__builtin_constant_p (__n) != 0 && std::__constant_char_array_p<char> (__s1, __n)) && std::__constant_char_array_p<char> (__s2, __n)>>)
  {
    # DEBUG BEGIN STMT;
    <<cleanup_point return <retval> = __gnu_cxx::char_traits<char>::compare (__s1, __s2, __n)>>;
  }
# DEBUG BEGIN STMT;
if (__n == 0)
  {
    # DEBUG BEGIN STMT;
    return <retval> = 0;
  }
# DEBUG BEGIN STMT;
return <retval> = __builtin_memcmp ((const void *) __s1, (const void *) __s2, __n);


;; Function static constexpr bool __gnu_cxx::char_traits<_CharT>::eq(const char_type&, const char_type&) [with _CharT = char; __gnu_cxx::char_traits<_CharT>::char_type = char] (null)
;; enabled by -tree-original


return <retval> = *__c1 == *__c2;


;; Function static constexpr std::size_t __gnu_cxx::char_traits<_CharT>::length(const char_type*) [with _CharT = char; std::size_t = long unsigned int; __gnu_cxx::char_traits<_CharT>::char_type = char] (null)
;; enabled by -tree-original


{
  size_t __i = 0;

  <<cleanup_point   size_t __i = 0;>>;
  while (1)
    {
      if (<<cleanup_point !__gnu_cxx::char_traits<char>::eq ((const char_type &) (__p + (sizetype) NON_LVALUE_EXPR <__i>), (const char_type &) &TARGET_EXPR <D.12637, 0>)>>) (void) 0; else goto <D.12639>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++__i >>>>>;
    }
  <D.12639>:;
  return <retval> = __i;
}


;; Function constexpr bool std::__constant_string_p(const _CharT*) [with _CharT = char] (null)
;; enabled by -tree-original


while (1)
  {
    if (__builtin_constant_p ((char) *__s) == 0 || *__s == 0) goto <D.12642>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __s++  >>>>>;
  }
<D.12642>:;
return <retval> = __builtin_constant_p ((char) *__s) != 0;


;; Function static constexpr std::size_t std::char_traits<char>::length(const char_type*) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
if (<<cleanup_point std::__constant_string_p<char> (__s)>>)
  {
    # DEBUG BEGIN STMT;
    <<cleanup_point return <retval> = __gnu_cxx::char_traits<char>::length (__s)>>;
  }
# DEBUG BEGIN STMT;
return <retval> = __builtin_strlen (__s);


;; Function static constexpr const char_type* __gnu_cxx::char_traits<_CharT>::find(const char_type*, std::size_t, const char_type&) [with _CharT = char; __gnu_cxx::char_traits<_CharT>::char_type = char; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


{
  {
    size_t __i = 0;

    <<cleanup_point     size_t __i = 0;>>;
    while (1)
      {
        if (__i >= __n) goto <D.12647>;
        if (<<cleanup_point __gnu_cxx::char_traits<char>::eq ((const char_type &) (__s + (sizetype) NON_LVALUE_EXPR <__i>), __a)>>)
          {
            return <retval> = __s + (sizetype) NON_LVALUE_EXPR <__i>;
          }
        <<cleanup_point (void)  ++__i>>;
      }
    <D.12647>:;
  }
  return <retval> = 0B;
}


;; Function static constexpr const char_type* std::char_traits<char>::find(const char_type*, std::size_t, const char_type&) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
if (<<cleanup_point (__builtin_constant_p (__n) != 0 && __builtin_constant_p ((char_type) *__a) != 0) && std::__constant_char_array_p<char> (__s, __n)>>)
  {
    # DEBUG BEGIN STMT;
    <<cleanup_point return <retval> = (const char_type *) __gnu_cxx::char_traits<char>::find (__s, __n, (const char_type &) __a)>>;
  }
# DEBUG BEGIN STMT;
if (__n == 0)
  {
    # DEBUG BEGIN STMT;
    return <retval> = 0B;
  }
# DEBUG BEGIN STMT;
return <retval> = (const char_type *) __builtin_memchr ((const void *) __s, (int) *__a, __n);


;; Function static std::char_traits<char>::char_type* std::char_traits<char>::move(std::char_traits<char>::char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
if (__n == 0)
  {
    # DEBUG BEGIN STMT;
    return <retval> = __s1;
  }
# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = (char_type *) __builtin_memmove ((void *) __s1, (const void *) __s2, __n)>>;


;; Function static std::char_traits<char>::char_type* std::char_traits<char>::copy(std::char_traits<char>::char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
if (__n == 0)
  {
    # DEBUG BEGIN STMT;
    return <retval> = __s1;
  }
# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = (char_type *) __builtin_memcpy ((void *) __s1, (const void *) __s2, __n)>>;


;; Function static std::char_traits<char>::char_type* std::char_traits<char>::assign(std::char_traits<char>::char_type*, std::size_t, std::char_traits<char>::char_type) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
if (__n == 0)
  {
    # DEBUG BEGIN STMT;
    return <retval> = __s;
  }
# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = (char_type *) __builtin_memset ((void *) __s, (int) __a, __n)>>;


;; Function static constexpr std::char_traits<char>::char_type std::char_traits<char>::to_char_type(const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = (char_type) *__c;
   >>>;
__builtin_unreachable ();


;; Function static constexpr std::char_traits<char>::int_type std::char_traits<char>::to_int_type(const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = (int_type) (unsigned char) *__c;
   >>>;
__builtin_unreachable ();


;; Function static constexpr bool std::char_traits<char>::eq_int_type(const int_type&, const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = *__c1 == *__c2;
   >>>;
__builtin_unreachable ();


;; Function static constexpr std::char_traits<char>::int_type std::char_traits<char>::eof() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = -1;
   >>>;
__builtin_unreachable ();


;; Function static constexpr std::char_traits<char>::int_type std::char_traits<char>::not_eof(const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = *__c != -1 ? (int_type) *__c : 0>>;
   >>>;
__builtin_unreachable ();


;; Function static constexpr void std::char_traits<wchar_t>::assign(std::char_traits<wchar_t>::char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__c1 = (char_type) *__c2) >>>>>;
   >>>;


;; Function static constexpr bool std::char_traits<wchar_t>::eq(const char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = *__c1 == *__c2;
   >>>;
__builtin_unreachable ();


;; Function static constexpr bool std::char_traits<wchar_t>::lt(const char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = *__c1 < *__c2;
   >>>;
__builtin_unreachable ();


;; Function constexpr bool std::__constant_char_array_p(const _CharT*, std::size_t) [with _CharT = wchar_t; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


{
  size_t __i = 0;

  <<cleanup_point   size_t __i = 0;>>;
  while (1)
    {
      if (__builtin_constant_p ((wchar_t) *(__a + (sizetype) (__i * 4))) == 0 || __i >= __n) goto <D.12714>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __i++  >>>>>;
    }
  <D.12714>:;
  return <retval> = __i == __n;
}


;; Function static constexpr bool __gnu_cxx::char_traits<_CharT>::lt(const char_type&, const char_type&) [with _CharT = wchar_t; __gnu_cxx::char_traits<_CharT>::char_type = wchar_t] (null)
;; enabled by -tree-original


return <retval> = *__c1 < *__c2;


;; Function static constexpr int __gnu_cxx::char_traits<_CharT>::compare(const char_type*, const char_type*, std::size_t) [with _CharT = wchar_t; __gnu_cxx::char_traits<_CharT>::char_type = wchar_t; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


{
  {
    size_t __i = 0;

    <<cleanup_point     size_t __i = 0;>>;
    while (1)
      {
        if (__i >= __n) goto <D.12775>;
        if (<<cleanup_point __gnu_cxx::char_traits<wchar_t>::lt ((const char_type &) (__s1 + (sizetype) (__i * 4)), (const char_type &) (__s2 + (sizetype) (__i * 4)))>>)
          {
            return <retval> = -1;
          }
        else
          {
            if (<<cleanup_point __gnu_cxx::char_traits<wchar_t>::lt ((const char_type &) (__s2 + (sizetype) (__i * 4)), (const char_type &) (__s1 + (sizetype) (__i * 4)))>>)
              {
                return <retval> = 1;
              }
          }
        <<cleanup_point (void)  ++__i>>;
      }
    <D.12775>:;
  }
  return <retval> = 0;
}


;; Function static constexpr int std::char_traits<wchar_t>::compare(const char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
if (<<cleanup_point (__builtin_constant_p (__n) != 0 && std::__constant_char_array_p<wchar_t> (__s1, __n)) && std::__constant_char_array_p<wchar_t> (__s2, __n)>>)
  {
    # DEBUG BEGIN STMT;
    <<cleanup_point return <retval> = __gnu_cxx::char_traits<wchar_t>::compare (__s1, __s2, __n)>>;
  }
# DEBUG BEGIN STMT;
if (__n == 0)
  {
    # DEBUG BEGIN STMT;
    return <retval> = 0;
  }
else
  {
    # DEBUG BEGIN STMT;
    return <retval> = wmemcmp (__s1, __s2, __n);
  }
__builtin_unreachable ();


;; Function static constexpr bool __gnu_cxx::char_traits<_CharT>::eq(const char_type&, const char_type&) [with _CharT = wchar_t; __gnu_cxx::char_traits<_CharT>::char_type = wchar_t] (null)
;; enabled by -tree-original


return <retval> = *__c1 == *__c2;


;; Function static constexpr std::size_t __gnu_cxx::char_traits<_CharT>::length(const char_type*) [with _CharT = wchar_t; std::size_t = long unsigned int; __gnu_cxx::char_traits<_CharT>::char_type = wchar_t] (null)
;; enabled by -tree-original


{
  size_t __i = 0;

  <<cleanup_point   size_t __i = 0;>>;
  while (1)
    {
      if (<<cleanup_point !__gnu_cxx::char_traits<wchar_t>::eq ((const char_type &) (__p + (sizetype) (__i * 4)), (const char_type &) &TARGET_EXPR <D.12782, 0>)>>) (void) 0; else goto <D.12784>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++__i >>>>>;
    }
  <D.12784>:;
  return <retval> = __i;
}


;; Function constexpr bool std::__constant_string_p(const _CharT*) [with _CharT = wchar_t] (null)
;; enabled by -tree-original


while (1)
  {
    if (__builtin_constant_p ((wchar_t) *__s) == 0 || *__s == 0) goto <D.12787>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __s++  >>>>>;
  }
<D.12787>:;
return <retval> = __builtin_constant_p ((wchar_t) *__s) != 0;


;; Function static constexpr std::size_t std::char_traits<wchar_t>::length(const char_type*) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
if (<<cleanup_point std::__constant_string_p<wchar_t> (__s)>>)
  {
    # DEBUG BEGIN STMT;
    <<cleanup_point return <retval> = __gnu_cxx::char_traits<wchar_t>::length (__s)>>;
  }
else
  {
    # DEBUG BEGIN STMT;
    return <retval> = wcslen (__s);
  }
__builtin_unreachable ();


;; Function static constexpr const char_type* __gnu_cxx::char_traits<_CharT>::find(const char_type*, std::size_t, const char_type&) [with _CharT = wchar_t; __gnu_cxx::char_traits<_CharT>::char_type = wchar_t; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


{
  {
    size_t __i = 0;

    <<cleanup_point     size_t __i = 0;>>;
    while (1)
      {
        if (__i >= __n) goto <D.12792>;
        if (<<cleanup_point __gnu_cxx::char_traits<wchar_t>::eq ((const char_type &) (__s + (sizetype) (__i * 4)), __a)>>)
          {
            return <retval> = __s + (sizetype) (__i * 4);
          }
        <<cleanup_point (void)  ++__i>>;
      }
    <D.12792>:;
  }
  return <retval> = 0B;
}


;; Function static constexpr const char_type* std::char_traits<wchar_t>::find(const char_type*, std::size_t, const char_type&) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
if (<<cleanup_point (__builtin_constant_p (__n) != 0 && __builtin_constant_p ((char_type) *__a) != 0) && std::__constant_char_array_p<wchar_t> (__s, __n)>>)
  {
    # DEBUG BEGIN STMT;
    <<cleanup_point return <retval> = (const char_type *) __gnu_cxx::char_traits<wchar_t>::find (__s, __n, (const char_type &) __a)>>;
  }
# DEBUG BEGIN STMT;
if (__n == 0)
  {
    # DEBUG BEGIN STMT;
    return <retval> = 0B;
  }
else
  {
    # DEBUG BEGIN STMT;
    return <retval> = (const char_type *) wmemchr (__s, (char_type) *__a, __n);
  }
__builtin_unreachable ();


;; Function static std::char_traits<wchar_t>::char_type* std::char_traits<wchar_t>::move(std::char_traits<wchar_t>::char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
if (__n == 0)
  {
    # DEBUG BEGIN STMT;
    return <retval> = __s1;
  }
# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = (char_type *) wmemmove (__s1, __s2, __n)>>;


;; Function static std::char_traits<wchar_t>::char_type* std::char_traits<wchar_t>::copy(std::char_traits<wchar_t>::char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
if (__n == 0)
  {
    # DEBUG BEGIN STMT;
    return <retval> = __s1;
  }
# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = (char_type *) wmemcpy (__s1, __s2, __n)>>;


;; Function static std::char_traits<wchar_t>::char_type* std::char_traits<wchar_t>::assign(std::char_traits<wchar_t>::char_type*, std::size_t, std::char_traits<wchar_t>::char_type) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
if (__n == 0)
  {
    # DEBUG BEGIN STMT;
    return <retval> = __s;
  }
# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = (char_type *) wmemset (__s, __a, __n)>>;


;; Function static constexpr std::char_traits<wchar_t>::char_type std::char_traits<wchar_t>::to_char_type(const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = (char_type) *__c;
   >>>;
__builtin_unreachable ();


;; Function static constexpr std::char_traits<wchar_t>::int_type std::char_traits<wchar_t>::to_int_type(const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = (int_type) *__c;
   >>>;
__builtin_unreachable ();


;; Function static constexpr bool std::char_traits<wchar_t>::eq_int_type(const int_type&, const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = *__c1 == *__c2;
   >>>;
__builtin_unreachable ();


;; Function static constexpr std::char_traits<wchar_t>::int_type std::char_traits<wchar_t>::eof() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 4294967295;
   >>>;
__builtin_unreachable ();


;; Function static constexpr std::char_traits<wchar_t>::int_type std::char_traits<wchar_t>::not_eof(const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = std::char_traits<wchar_t>::eq_int_type (__c, (const int_type &) &TARGET_EXPR <D.12802, 4294967295>) ? 0 : (int_type) *__c>>;
   >>>;
__builtin_unreachable ();


;; Function static constexpr void std::char_traits<char16_t>::assign(std::char_traits<char16_t>::char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__c1 = (char_type) *__c2) >>>>>;
   >>>;


;; Function static constexpr bool std::char_traits<char16_t>::eq(const char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = *__c1 == *__c2;
   >>>;
__builtin_unreachable ();


;; Function static constexpr bool std::char_traits<char16_t>::lt(const char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = *__c1 < *__c2;
   >>>;
__builtin_unreachable ();


;; Function static constexpr int std::char_traits<char16_t>::compare(const char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


{
  # DEBUG BEGIN STMT;
  {
    size_t __i = 0;

    <<cleanup_point     size_t __i = 0;>>;
    while (1)
      {
        if (__i >= __n) goto <D.12912>;
        # DEBUG BEGIN STMT;
        if (<<cleanup_point std::char_traits<char16_t>::lt ((const char_type &) (__s1 + (sizetype) (__i * 2)), (const char_type &) (__s2 + (sizetype) (__i * 2)))>>)
          {
            # DEBUG BEGIN STMT;
            return <retval> = -1;
          }
        else
          {
            # DEBUG BEGIN STMT;
            if (<<cleanup_point std::char_traits<char16_t>::lt ((const char_type &) (__s2 + (sizetype) (__i * 2)), (const char_type &) (__s1 + (sizetype) (__i * 2)))>>)
              {
                # DEBUG BEGIN STMT;
                return <retval> = 1;
              }
          }
        <<cleanup_point (void)  ++__i>>;
      }
    <D.12912>:;
  }
  # DEBUG BEGIN STMT;
  return <retval> = 0;
}


;; Function static constexpr std::size_t std::char_traits<char16_t>::length(const char_type*) (null)
;; enabled by -tree-original


{
  size_t __i = 0;

  # DEBUG BEGIN STMT;
  <<cleanup_point   size_t __i = 0;>>;
  # DEBUG BEGIN STMT;
  while (1)
    {
      if (<<cleanup_point !std::char_traits<char16_t>::eq ((const char_type &) (__s + (sizetype) (__i * 2)), (const char_type &) &TARGET_EXPR <D.12916, 0>)>>) (void) 0; else goto <D.12917>;
      # DEBUG BEGIN STMT;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++__i >>>>>;
    }
  <D.12917>:;
  # DEBUG BEGIN STMT;
  return <retval> = __i;
}


;; Function static constexpr const char_type* std::char_traits<char16_t>::find(const char_type*, std::size_t, const char_type&) (null)
;; enabled by -tree-original


{
  # DEBUG BEGIN STMT;
  {
    size_t __i = 0;

    <<cleanup_point     size_t __i = 0;>>;
    while (1)
      {
        if (__i >= __n) goto <D.12921>;
        # DEBUG BEGIN STMT;
        if (<<cleanup_point std::char_traits<char16_t>::eq ((const char_type &) (__s + (sizetype) (__i * 2)), __a)>>)
          {
            # DEBUG BEGIN STMT;
            return <retval> = __s + (sizetype) (__i * 2);
          }
        <<cleanup_point (void)  ++__i>>;
      }
    <D.12921>:;
  }
  # DEBUG BEGIN STMT;
  return <retval> = 0B;
}


;; Function static std::char_traits<char16_t>::char_type* std::char_traits<char16_t>::move(std::char_traits<char16_t>::char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
if (__n == 0)
  {
    # DEBUG BEGIN STMT;
    return <retval> = __s1;
  }
# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = (char_type *) __builtin_memmove ((void *) __s1, (const void *) __s2, __n * 2)>>;


;; Function static std::char_traits<char16_t>::char_type* std::char_traits<char16_t>::copy(std::char_traits<char16_t>::char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
if (__n == 0)
  {
    # DEBUG BEGIN STMT;
    return <retval> = __s1;
  }
# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = (char_type *) __builtin_memcpy ((void *) __s1, (const void *) __s2, __n * 2)>>;


;; Function static std::char_traits<char16_t>::char_type* std::char_traits<char16_t>::assign(std::char_traits<char16_t>::char_type*, std::size_t, std::char_traits<char16_t>::char_type) (null)
;; enabled by -tree-original


{
  # DEBUG BEGIN STMT;
  {
    size_t __i = 0;

    <<cleanup_point     size_t __i = 0;>>;
    while (1)
      {
        if (__i >= __n) goto <D.12927>;
        # DEBUG BEGIN STMT;
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<char16_t>::assign ((char_type &) (__s + (sizetype) (__i * 2)), (const char_type &) &__a) >>>>>;
        <<cleanup_point (void)  ++__i>>;
      }
    <D.12927>:;
  }
  # DEBUG BEGIN STMT;
  return <retval> = __s;
}


;; Function static constexpr std::char_traits<char16_t>::char_type std::char_traits<char16_t>::to_char_type(const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = (char_type) *__c;
   >>>;
__builtin_unreachable ();


;; Function static constexpr std::char_traits<char16_t>::int_type std::char_traits<char16_t>::to_int_type(const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = *__c != (const char_type) std::char_traits<char16_t>::eof () ? (int_type) *__c : 65533>>;
   >>>;
__builtin_unreachable ();


;; Function static constexpr bool std::char_traits<char16_t>::eq_int_type(const int_type&, const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = *__c1 == *__c2;
   >>>;
__builtin_unreachable ();


;; Function static constexpr std::char_traits<char16_t>::int_type std::char_traits<char16_t>::eof() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 65535;
   >>>;
__builtin_unreachable ();


;; Function static constexpr std::char_traits<char16_t>::int_type std::char_traits<char16_t>::not_eof(const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = std::char_traits<char16_t>::eq_int_type (__c, (const int_type &) &TARGET_EXPR <D.12934, 65535>) ? 0 : (int_type) *__c>>;
   >>>;
__builtin_unreachable ();


;; Function static constexpr void std::char_traits<char32_t>::assign(std::char_traits<char32_t>::char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__c1 = (char_type) *__c2) >>>>>;
   >>>;


;; Function static constexpr bool std::char_traits<char32_t>::eq(const char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = *__c1 == *__c2;
   >>>;
__builtin_unreachable ();


;; Function static constexpr bool std::char_traits<char32_t>::lt(const char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = *__c1 < *__c2;
   >>>;
__builtin_unreachable ();


;; Function static constexpr int std::char_traits<char32_t>::compare(const char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


{
  # DEBUG BEGIN STMT;
  {
    size_t __i = 0;

    <<cleanup_point     size_t __i = 0;>>;
    while (1)
      {
        if (__i >= __n) goto <D.12988>;
        # DEBUG BEGIN STMT;
        if (<<cleanup_point std::char_traits<char32_t>::lt ((const char_type &) (__s1 + (sizetype) (__i * 4)), (const char_type &) (__s2 + (sizetype) (__i * 4)))>>)
          {
            # DEBUG BEGIN STMT;
            return <retval> = -1;
          }
        else
          {
            # DEBUG BEGIN STMT;
            if (<<cleanup_point std::char_traits<char32_t>::lt ((const char_type &) (__s2 + (sizetype) (__i * 4)), (const char_type &) (__s1 + (sizetype) (__i * 4)))>>)
              {
                # DEBUG BEGIN STMT;
                return <retval> = 1;
              }
          }
        <<cleanup_point (void)  ++__i>>;
      }
    <D.12988>:;
  }
  # DEBUG BEGIN STMT;
  return <retval> = 0;
}


;; Function static constexpr std::size_t std::char_traits<char32_t>::length(const char_type*) (null)
;; enabled by -tree-original


{
  size_t __i = 0;

  # DEBUG BEGIN STMT;
  <<cleanup_point   size_t __i = 0;>>;
  # DEBUG BEGIN STMT;
  while (1)
    {
      if (<<cleanup_point !std::char_traits<char32_t>::eq ((const char_type &) (__s + (sizetype) (__i * 4)), (const char_type &) &TARGET_EXPR <D.12992, 0>)>>) (void) 0; else goto <D.12993>;
      # DEBUG BEGIN STMT;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++__i >>>>>;
    }
  <D.12993>:;
  # DEBUG BEGIN STMT;
  return <retval> = __i;
}


;; Function static constexpr const char_type* std::char_traits<char32_t>::find(const char_type*, std::size_t, const char_type&) (null)
;; enabled by -tree-original


{
  # DEBUG BEGIN STMT;
  {
    size_t __i = 0;

    <<cleanup_point     size_t __i = 0;>>;
    while (1)
      {
        if (__i >= __n) goto <D.12997>;
        # DEBUG BEGIN STMT;
        if (<<cleanup_point std::char_traits<char32_t>::eq ((const char_type &) (__s + (sizetype) (__i * 4)), __a)>>)
          {
            # DEBUG BEGIN STMT;
            return <retval> = __s + (sizetype) (__i * 4);
          }
        <<cleanup_point (void)  ++__i>>;
      }
    <D.12997>:;
  }
  # DEBUG BEGIN STMT;
  return <retval> = 0B;
}


;; Function static std::char_traits<char32_t>::char_type* std::char_traits<char32_t>::move(std::char_traits<char32_t>::char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
if (__n == 0)
  {
    # DEBUG BEGIN STMT;
    return <retval> = __s1;
  }
# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = (char_type *) __builtin_memmove ((void *) __s1, (const void *) __s2, __n * 4)>>;


;; Function static std::char_traits<char32_t>::char_type* std::char_traits<char32_t>::copy(std::char_traits<char32_t>::char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
if (__n == 0)
  {
    # DEBUG BEGIN STMT;
    return <retval> = __s1;
  }
# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = (char_type *) __builtin_memcpy ((void *) __s1, (const void *) __s2, __n * 4)>>;


;; Function static std::char_traits<char32_t>::char_type* std::char_traits<char32_t>::assign(std::char_traits<char32_t>::char_type*, std::size_t, std::char_traits<char32_t>::char_type) (null)
;; enabled by -tree-original


{
  # DEBUG BEGIN STMT;
  {
    size_t __i = 0;

    <<cleanup_point     size_t __i = 0;>>;
    while (1)
      {
        if (__i >= __n) goto <D.13003>;
        # DEBUG BEGIN STMT;
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<char32_t>::assign ((char_type &) (__s + (sizetype) (__i * 4)), (const char_type &) &__a) >>>>>;
        <<cleanup_point (void)  ++__i>>;
      }
    <D.13003>:;
  }
  # DEBUG BEGIN STMT;
  return <retval> = __s;
}


;; Function static constexpr std::char_traits<char32_t>::char_type std::char_traits<char32_t>::to_char_type(const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = (char_type) *__c;
   >>>;
__builtin_unreachable ();


;; Function static constexpr std::char_traits<char32_t>::int_type std::char_traits<char32_t>::to_int_type(const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = (int_type) *__c;
   >>>;
__builtin_unreachable ();


;; Function static constexpr bool std::char_traits<char32_t>::eq_int_type(const int_type&, const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = *__c1 == *__c2;
   >>>;
__builtin_unreachable ();


;; Function static constexpr std::char_traits<char32_t>::int_type std::char_traits<char32_t>::eof() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 4294967295;
   >>>;
__builtin_unreachable ();


;; Function static constexpr std::char_traits<char32_t>::int_type std::char_traits<char32_t>::not_eof(const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = std::char_traits<char32_t>::eq_int_type (__c, (const int_type &) &TARGET_EXPR <D.13010, 4294967295>) ? 0 : (int_type) *__c>>;
   >>>;
__builtin_unreachable ();


;; Function int std::__convert_from_v(__locale_struct* const&, char*, int, const char*, ...) (null)
;; enabled by -tree-original


{
  struct __locale_struct * __old;
  struct  __args[1];
  const int __ret;

  # DEBUG BEGIN STMT;
    struct __locale_struct * __old;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__old = __gnu_cxx::__uselocale ((struct __locale_struct *) *__cloc)) >>>>>;
  # DEBUG BEGIN STMT;
    struct  __args[1];
  # DEBUG BEGIN STMT;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_start ((struct  *) &__args, __fmt) >>>>>;
  # DEBUG BEGIN STMT;
    const int __ret;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = __builtin_vsnprintf (__out, (long unsigned int) __size, __fmt, (struct  *) &__args)) >>>>>;
  # DEBUG BEGIN STMT;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_end ((struct  *) &__args) >>>>>;
  # DEBUG BEGIN STMT;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __gnu_cxx::__uselocale (__old) >>>>>;
  # DEBUG BEGIN STMT;
  return <retval> = (int) __ret;
}


;; Function unsigned int __bswap_32(unsigned int) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
return <retval> = __builtin_bswap32 (__bsx);


;; Function __uint64_t __bswap_64(__uint64_t) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
return <retval> = __builtin_bswap64 (__bsx);


;; Function __pthread_cleanup_class::__pthread_cleanup_class(void (*)(void*), void*) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    void (*<Tf0>) (void *) __cancel_routine;
    void * __cancel_arg;
    int __do_it;
    int __cancel_type;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __pthread_cleanup_class *) this)->__cancel_routine = __fct) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __pthread_cleanup_class *) this)->__cancel_arg = __arg) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __pthread_cleanup_class *) this)->__do_it = 1) >>>>>;
}


;; Function __pthread_cleanup_class::~__pthread_cleanup_class() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        # DEBUG BEGIN STMT;
        if (((struct __pthread_cleanup_class *) this)->__do_it != 0)
          {
            # DEBUG BEGIN STMT;
            <<cleanup_point <<< Unknown tree: expr_stmt
  ((struct __pthread_cleanup_class *) this)->__cancel_routine (((struct __pthread_cleanup_class *) this)->__cancel_arg) >>>>>;
          }
      }
    finally
      {
        *(struct 
        {
          void (*<Tf0>) (void *) __cancel_routine;
          void * __cancel_arg;
          int __do_it;
          int __cancel_type;
        } &) this = {CLOBBER};
      }
  }
  <D.13980>:;
   >>>;


;; Function void __pthread_cleanup_class::__setdoit(int) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __pthread_cleanup_class *) this)->__do_it = __newval) >>>>>;


;; Function void __pthread_cleanup_class::__defer() (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) pthread_setcanceltype (0, &((struct __pthread_cleanup_class *) this)->__cancel_type) >>>>>;


;; Function void __pthread_cleanup_class::__restore() const (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) pthread_setcanceltype ((int) ((const struct __pthread_cleanup_class *) this)->__cancel_type, 0B) >>>>>;


;; Function int pthread_equal(pthread_t, pthread_t) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = __thread1 == __thread2;
   >>>;
__builtin_unreachable ();


;; Function int __gthread_active_p() (null)
;; enabled by -tree-original


{
  static void * const __gthread_active_ptr = (void *) __gthrw___pthread_key_create;

  # DEBUG BEGIN STMT;
  <<cleanup_point   static void * const __gthread_active_ptr = (void *) __gthrw___pthread_key_create;>>;
  # DEBUG BEGIN STMT;
  return <retval> = (void *) __gthread_active_ptr != 0B;
}


;; Function int __gthread_create(__gthread_t*, void* (*)(void*), void*) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = __gthrw_pthread_create (__threadid, 0B, __func, __args)>>;


;; Function int __gthread_join(__gthread_t, void**) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = __gthrw_pthread_join (__threadid, __value_ptr)>>;


;; Function int __gthread_detach(__gthread_t) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = __gthrw_pthread_detach (__threadid)>>;


;; Function int __gthread_equal(__gthread_t, __gthread_t) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = __gthrw_pthread_equal (__t1, __t2)>>;


;; Function __gthread_t __gthread_self() (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = __gthrw_pthread_self ()>>;


;; Function int __gthread_yield() (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = __gthrw_sched_yield ()>>;


;; Function int __gthread_once(__gthread_once_t*, void (*)()) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    # DEBUG BEGIN STMT;
    <<cleanup_point return <retval> = __gthrw_pthread_once (__once, __func)>>;
  }
else
  {
    # DEBUG BEGIN STMT;
    return <retval> = -1;
  }
__builtin_unreachable ();


;; Function int __gthread_key_create(__gthread_key_t*, void (*)(void*)) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = __gthrw_pthread_key_create (__key, __dtor)>>;


;; Function int __gthread_key_delete(__gthread_key_t) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = __gthrw_pthread_key_delete (__key)>>;


;; Function void* __gthread_getspecific(__gthread_key_t) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = __gthrw_pthread_getspecific (__key)>>;


;; Function int __gthread_setspecific(__gthread_key_t, const void*) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = __gthrw_pthread_setspecific (__key, __ptr)>>;


;; Function void __gthread_mutex_init_function(__gthread_mutex_t*) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    # DEBUG BEGIN STMT;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __gthrw_pthread_mutex_init (__mutex, 0B) >>>>>;
  }


;; Function int __gthread_mutex_destroy(__gthread_mutex_t*) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    # DEBUG BEGIN STMT;
    <<cleanup_point return <retval> = __gthrw_pthread_mutex_destroy (__mutex)>>;
  }
else
  {
    # DEBUG BEGIN STMT;
    return <retval> = 0;
  }
__builtin_unreachable ();


;; Function int __gthread_mutex_lock(__gthread_mutex_t*) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    # DEBUG BEGIN STMT;
    <<cleanup_point return <retval> = __gthrw_pthread_mutex_lock (__mutex)>>;
  }
else
  {
    # DEBUG BEGIN STMT;
    return <retval> = 0;
  }
__builtin_unreachable ();


;; Function int __gthread_mutex_trylock(__gthread_mutex_t*) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    # DEBUG BEGIN STMT;
    <<cleanup_point return <retval> = __gthrw_pthread_mutex_trylock (__mutex)>>;
  }
else
  {
    # DEBUG BEGIN STMT;
    return <retval> = 0;
  }
__builtin_unreachable ();


;; Function int __gthread_mutex_timedlock(__gthread_mutex_t*, const __gthread_time_t*) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    # DEBUG BEGIN STMT;
    <<cleanup_point return <retval> = __gthrw_pthread_mutex_timedlock (__mutex, __abs_timeout)>>;
  }
else
  {
    # DEBUG BEGIN STMT;
    return <retval> = 0;
  }
__builtin_unreachable ();


;; Function int __gthread_mutex_unlock(__gthread_mutex_t*) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    # DEBUG BEGIN STMT;
    <<cleanup_point return <retval> = __gthrw_pthread_mutex_unlock (__mutex)>>;
  }
else
  {
    # DEBUG BEGIN STMT;
    return <retval> = 0;
  }
__builtin_unreachable ();


;; Function int __gthread_recursive_mutex_lock(__gthread_recursive_mutex_t*) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = __gthread_mutex_lock (__mutex)>>;


;; Function int __gthread_recursive_mutex_trylock(__gthread_recursive_mutex_t*) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = __gthread_mutex_trylock (__mutex)>>;


;; Function int __gthread_recursive_mutex_timedlock(__gthread_recursive_mutex_t*, const __gthread_time_t*) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = __gthread_mutex_timedlock (__mutex, __abs_timeout)>>;


;; Function int __gthread_recursive_mutex_unlock(__gthread_recursive_mutex_t*) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = __gthread_mutex_unlock (__mutex)>>;


;; Function int __gthread_recursive_mutex_destroy(__gthread_recursive_mutex_t*) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = __gthread_mutex_destroy (__mutex)>>;


;; Function int __gthread_cond_broadcast(__gthread_cond_t*) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = __gthrw_pthread_cond_broadcast (__cond)>>;


;; Function int __gthread_cond_signal(__gthread_cond_t*) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = __gthrw_pthread_cond_signal (__cond)>>;


;; Function int __gthread_cond_wait(__gthread_cond_t*, __gthread_mutex_t*) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = __gthrw_pthread_cond_wait (__cond, __mutex)>>;


;; Function int __gthread_cond_timedwait(__gthread_cond_t*, __gthread_mutex_t*, const __gthread_time_t*) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = __gthrw_pthread_cond_timedwait (__cond, __mutex, __abs_timeout)>>;


;; Function int __gthread_cond_wait_recursive(__gthread_cond_t*, __gthread_recursive_mutex_t*) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = __gthread_cond_wait (__cond, __mutex)>>;


;; Function int __gthread_cond_destroy(__gthread_cond_t*) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = __gthrw_pthread_cond_destroy (__cond)>>;


;; Function _Atomic_word __gnu_cxx::__exchange_and_add(volatile _Atomic_word*, int) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = (int) __atomic_fetch_add_4 ((volatile void *) __mem, (unsigned int) __val, 4)>>;


;; Function void __gnu_cxx::__atomic_add(volatile _Atomic_word*, int) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (int) __atomic_fetch_add_4 ((volatile void *) __mem, (unsigned int) __val, 4) >>>>>;


;; Function _Atomic_word __gnu_cxx::__exchange_and_add_single(_Atomic_word*, int) (null)
;; enabled by -tree-original


{
  _Atomic_word __result = *__mem;

  # DEBUG BEGIN STMT;
    _Atomic_word __result = *__mem;
  # DEBUG BEGIN STMT;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__mem = *__mem + __val) >>>>>;
  # DEBUG BEGIN STMT;
  return <retval> = __result;
}


;; Function void __gnu_cxx::__atomic_add_single(_Atomic_word*, int) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__mem = *__mem + __val) >>>>>;


;; Function _Atomic_word __gnu_cxx::__exchange_and_add_dispatch(_Atomic_word*, int) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    # DEBUG BEGIN STMT;
    <<cleanup_point return <retval> = __gnu_cxx::__exchange_and_add ((volatile _Atomic_word *) __mem, __val)>>;
  }
else
  {
    # DEBUG BEGIN STMT;
    <<cleanup_point return <retval> = __gnu_cxx::__exchange_and_add_single (__mem, __val)>>;
  }
__builtin_unreachable ();


;; Function void __gnu_cxx::__atomic_add_dispatch(_Atomic_word*, int) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    # DEBUG BEGIN STMT;
    <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__atomic_add ((volatile _Atomic_word *) __mem, __val) >>>>>;
  }
else
  {
    # DEBUG BEGIN STMT;
    <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__atomic_add_single (__mem, __val) >>>>>;
  }


;; Function std::size_t std::hash<bool>::operator()(bool) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = (size_t) __val;
   >>>;
__builtin_unreachable ();


;; Function std::size_t std::hash<char>::operator()(char) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = (size_t) __val;
   >>>;
__builtin_unreachable ();


;; Function std::size_t std::hash<signed char>::operator()(signed char) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = (size_t) __val;
   >>>;
__builtin_unreachable ();


;; Function std::size_t std::hash<unsigned char>::operator()(unsigned char) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = (size_t) __val;
   >>>;
__builtin_unreachable ();


;; Function std::size_t std::hash<wchar_t>::operator()(wchar_t) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = (size_t) __val;
   >>>;
__builtin_unreachable ();


;; Function std::size_t std::hash<char16_t>::operator()(char16_t) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = (size_t) __val;
   >>>;
__builtin_unreachable ();


;; Function std::size_t std::hash<char32_t>::operator()(char32_t) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = (size_t) __val;
   >>>;
__builtin_unreachable ();


;; Function std::size_t std::hash<short int>::operator()(short int) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = (size_t) __val;
   >>>;
__builtin_unreachable ();


;; Function std::size_t std::hash<int>::operator()(int) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = (size_t) __val;
   >>>;
__builtin_unreachable ();


;; Function std::size_t std::hash<long int>::operator()(long int) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = (size_t) __val;
   >>>;
__builtin_unreachable ();


;; Function std::size_t std::hash<long long int>::operator()(long long int) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = (size_t) __val;
   >>>;
__builtin_unreachable ();


;; Function std::size_t std::hash<short unsigned int>::operator()(short unsigned int) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = (size_t) __val;
   >>>;
__builtin_unreachable ();


;; Function std::size_t std::hash<unsigned int>::operator()(unsigned int) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = (size_t) __val;
   >>>;
__builtin_unreachable ();


;; Function std::size_t std::hash<long unsigned int>::operator()(long unsigned int) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = __val;
   >>>;
__builtin_unreachable ();


;; Function std::size_t std::hash<long long unsigned int>::operator()(long long unsigned int) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = (size_t) __val;
   >>>;
__builtin_unreachable ();


;; Function static std::size_t std::_Hash_impl::hash(const void*, std::size_t, std::size_t) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = std::_Hash_bytes (__ptr, __clength, __seed)>>;


;; Function static std::size_t std::_Fnv_hash_impl::hash(const void*, std::size_t, std::size_t) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = std::_Fnv_hash_bytes (__ptr, __clength, __seed)>>;


;; Function std::size_t std::hash<float>::operator()(float) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = __val != 0.0 ? std::_Hash_impl::hash<float> ((const float &) &__val) : 0>>;
   >>>;
__builtin_unreachable ();


;; Function std::size_t std::hash<double>::operator()(double) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = __val != 0.0 ? std::_Hash_impl::hash<double> ((const double &) &__val) : 0>>;
   >>>;
__builtin_unreachable ();


;; Function constexpr const _CharT* std::basic_string_view<_CharT, _Traits>::data() const [with _CharT = char; _Traits = std::char_traits<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const char *) ((const struct basic_string_view *) this)->_M_str
   >>>;
__builtin_unreachable ();


;; Function constexpr std::basic_string_view<_CharT, _Traits>::size_type std::basic_string_view<_CharT, _Traits>::length() const [with _CharT = char; _Traits = std::char_traits<char>; std::basic_string_view<_CharT, _Traits>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) ((const struct basic_string_view *) this)->_M_len
   >>>;
__builtin_unreachable ();


;; Function std::size_t std::hash<std::basic_string_view<char> >::operator()(const string_view&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) std::basic_string_view<char>::data ((const struct string_view *) __str), std::basic_string_view<char>::length ((const struct string_view *) __str), 3339675911)>>;
   >>>;
__builtin_unreachable ();


;; Function constexpr std::basic_string_view<_CharT, _Traits>::size_type std::basic_string_view<_CharT, _Traits>::length() const [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; std::basic_string_view<_CharT, _Traits>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) ((const struct basic_string_view *) this)->_M_len
   >>>;
__builtin_unreachable ();


;; Function constexpr const _CharT* std::basic_string_view<_CharT, _Traits>::data() const [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const wchar_t *) ((const struct basic_string_view *) this)->_M_str
   >>>;
__builtin_unreachable ();


;; Function std::size_t std::hash<std::basic_string_view<wchar_t> >::operator()(const wstring_view&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) std::basic_string_view<wchar_t>::data ((const struct wstring_view *) __s), std::basic_string_view<wchar_t>::length ((const struct wstring_view *) __s) * 4, 3339675911)>>;
   >>>;
__builtin_unreachable ();


;; Function constexpr std::basic_string_view<_CharT, _Traits>::size_type std::basic_string_view<_CharT, _Traits>::length() const [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; std::basic_string_view<_CharT, _Traits>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) ((const struct basic_string_view *) this)->_M_len
   >>>;
__builtin_unreachable ();


;; Function constexpr const _CharT* std::basic_string_view<_CharT, _Traits>::data() const [with _CharT = char16_t; _Traits = std::char_traits<char16_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const char16_t *) ((const struct basic_string_view *) this)->_M_str
   >>>;
__builtin_unreachable ();


;; Function std::size_t std::hash<std::basic_string_view<char16_t> >::operator()(const u16string_view&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) std::basic_string_view<char16_t>::data ((const struct u16string_view *) __s), std::basic_string_view<char16_t>::length ((const struct u16string_view *) __s) * 2, 3339675911)>>;
   >>>;
__builtin_unreachable ();


;; Function constexpr std::basic_string_view<_CharT, _Traits>::size_type std::basic_string_view<_CharT, _Traits>::length() const [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; std::basic_string_view<_CharT, _Traits>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) ((const struct basic_string_view *) this)->_M_len
   >>>;
__builtin_unreachable ();


;; Function constexpr const _CharT* std::basic_string_view<_CharT, _Traits>::data() const [with _CharT = char32_t; _Traits = std::char_traits<char32_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const char32_t *) ((const struct basic_string_view *) this)->_M_str
   >>>;
__builtin_unreachable ();


;; Function std::size_t std::hash<std::basic_string_view<char32_t> >::operator()(const u32string_view&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) std::basic_string_view<char32_t>::data ((const struct u32string_view *) __s), std::basic_string_view<char32_t>::length ((const struct u32string_view *) __s) * 4, 3339675911)>>;
   >>>;
__builtin_unreachable ();


;; Function constexpr std::basic_string_view<char> std::literals::string_view_literals::operator""sv(const char*, std::size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = TARGET_EXPR <D.19458, <<< Unknown tree: aggr_init_expr
  6
  __ct_comp 
  D.19458
  (struct basic_string_view *) <<< Unknown tree: void_cst >>>
  __str
  __len >>>>;, D.19458>>;
   >>>;
__builtin_unreachable ();


;; Function constexpr std::basic_string_view<wchar_t> std::literals::string_view_literals::operator""sv(const wchar_t*, std::size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = TARGET_EXPR <D.19472, <<< Unknown tree: aggr_init_expr
  6
  __ct_comp 
  D.19472
  (struct basic_string_view *) <<< Unknown tree: void_cst >>>
  __str
  __len >>>>;, D.19472>>;
   >>>;
__builtin_unreachable ();


;; Function constexpr std::basic_string_view<char16_t> std::literals::string_view_literals::operator""sv(const char16_t*, std::size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = TARGET_EXPR <D.19486, <<< Unknown tree: aggr_init_expr
  6
  __ct_comp 
  D.19486
  (struct basic_string_view *) <<< Unknown tree: void_cst >>>
  __str
  __len >>>>;, D.19486>>;
   >>>;
__builtin_unreachable ();


;; Function constexpr std::basic_string_view<char32_t> std::literals::string_view_literals::operator""sv(const char32_t*, std::size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = TARGET_EXPR <D.19500, <<< Unknown tree: aggr_init_expr
  6
  __ct_comp 
  D.19500
  (struct basic_string_view *) <<< Unknown tree: void_cst >>>
  __str
  __len >>>>;, D.19500>>;
   >>>;
__builtin_unreachable ();


;; Function int atoi(const char*) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = (int) strtol (__nptr, 0B, 10)>>;
   >>>;
__builtin_unreachable ();


;; Function long int atol(const char*) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = strtol (__nptr, 0B, 10)>>;
   >>>;
__builtin_unreachable ();


;; Function long long int atoll(const char*) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = strtoll (__nptr, 0B, 10)>>;
   >>>;
__builtin_unreachable ();


;; Function unsigned int gnu_dev_major(long long unsigned int) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = (unsigned int) (__dev >> 8) & 4095 | (unsigned int) (__dev >> 32) & 4294963200;
   >>>;
__builtin_unreachable ();


;; Function unsigned int gnu_dev_minor(long long unsigned int) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = (unsigned int) __dev & 255 | (unsigned int) (__dev >> 12) & 4294967040;
   >>>;
__builtin_unreachable ();


;; Function long long unsigned int gnu_dev_makedev(unsigned int, unsigned int) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = ((long long unsigned int) (__minor & 255 | __major << 8 & 1048320) | (long long unsigned int) __minor << 12 & 17592184995840) | (long long unsigned int) __major << 32 & 18446726481523507200;
   >>>;
__builtin_unreachable ();


;; Function double atof(const char*) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = strtod (__nptr, 0B)>>;
   >>>;
__builtin_unreachable ();


;; Function long int std::abs(long int) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
return <retval> = ABS_EXPR <__i>;


;; Function long long int std::abs(long long int) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
return <retval> = ABS_EXPR <__x>;


;; Function constexpr double std::abs(double) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
return <retval> = ABS_EXPR <__x>;


;; Function constexpr float std::abs(float) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
return <retval> = ABS_EXPR <__x>;


;; Function constexpr long double std::abs(long double) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
return <retval> = ABS_EXPR <__x>;


;; Function ldiv_t std::div(long int, long int) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = TARGET_EXPR <D.22005, ldiv (__i, __j)>>>;


;; Function lldiv_t __gnu_cxx::div(long long int, long long int) (null)
;; enabled by -tree-original


{
  struct lldiv_t __q;

  # DEBUG BEGIN STMT;
    struct lldiv_t __q;
  # DEBUG BEGIN STMT;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__q.quot = __n / __d) >>>>>;
  # DEBUG BEGIN STMT;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__q.rem = __n % __d) >>>>>;
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = TARGET_EXPR <D.22056, *(struct lldiv_t &) &__q>>>;
}


;; Function int vprintf(const char*, __va_list_tag*) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = vfprintf (stdout, __fmt, __arg)>>;


;; Function int getchar() (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = _IO_getc (stdin)>>;


;; Function int fgetc_unlocked(FILE*) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = __builtin_expect (__fp->_IO_read_ptr >= __fp->_IO_read_end, 0) != 0 ? __uflow (__fp) : (int) *(unsigned char *) __fp->_IO_read_ptr++ >>;


;; Function int getc_unlocked(FILE*) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = __builtin_expect (__fp->_IO_read_ptr >= __fp->_IO_read_end, 0) != 0 ? __uflow (__fp) : (int) *(unsigned char *) __fp->_IO_read_ptr++ >>;


;; Function int getchar_unlocked() (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = __builtin_expect (stdin->_IO_read_ptr >= stdin->_IO_read_end, 0) != 0 ? __uflow (stdin) : (int) *(unsigned char *) stdin->_IO_read_ptr++ >>;


;; Function int putchar(int) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = _IO_putc (__c, stdout)>>;


;; Function int fputc_unlocked(int, FILE*) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = __builtin_expect (__stream->_IO_write_ptr >= __stream->_IO_write_end, 0) != 0 ? __overflow (__stream, (int) (unsigned char) __c) : (int) (unsigned char) (*__stream->_IO_write_ptr++  = (char) __c)>>;


;; Function int putc_unlocked(int, FILE*) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = __builtin_expect (__stream->_IO_write_ptr >= __stream->_IO_write_end, 0) != 0 ? __overflow (__stream, (int) (unsigned char) __c) : (int) (unsigned char) (*__stream->_IO_write_ptr++  = (char) __c)>>;


;; Function int putchar_unlocked(int) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = __builtin_expect (stdout->_IO_write_ptr >= stdout->_IO_write_end, 0) != 0 ? __overflow (stdout, (int) (unsigned char) __c) : (int) (unsigned char) (*stdout->_IO_write_ptr++  = (char) __c)>>;


;; Function __ssize_t getline(char**, size_t*, FILE*) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = __getdelim (__lineptr, __n, 10, __stream)>>;


;; Function int feof_unlocked(FILE*) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = (__stream->_flags & 16) != 0;
   >>>;
__builtin_unreachable ();


;; Function int ferror_unlocked(FILE*) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = (__stream->_flags & 32) != 0;
   >>>;
__builtin_unreachable ();


;; Function int std::__cxx11::stoi(const string&, std::size_t*, int) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = __gnu_cxx::__stoa<long int, int, char, int> ((long int (*<T4082>) (const char *, char * *, int)) strtol, (const char *) "stoi", std::__cxx11::basic_string<char>::c_str ((const struct string *) __str), __idx, __base)>>;


;; Function long int std::__cxx11::stol(const string&, std::size_t*, int) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = __gnu_cxx::__stoa<long int> ((long int (*<T4082>) (const char *, char * *, int)) strtol, (const char *) "stol", std::__cxx11::basic_string<char>::c_str ((const struct string *) __str), __idx, __base)>>;


;; Function long unsigned int std::__cxx11::stoul(const string&, std::size_t*, int) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = __gnu_cxx::__stoa<long unsigned int> ((long unsigned int (*<T4096>) (const char *, char * *, int)) strtoul, (const char *) "stoul", std::__cxx11::basic_string<char>::c_str ((const struct string *) __str), __idx, __base)>>;


;; Function long long int std::__cxx11::stoll(const string&, std::size_t*, int) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = __gnu_cxx::__stoa<long long int> ((long long int (*<T40a0>) (const char *, char * *, int)) strtoll, (const char *) "stoll", std::__cxx11::basic_string<char>::c_str ((const struct string *) __str), __idx, __base)>>;


;; Function long long unsigned int std::__cxx11::stoull(const string&, std::size_t*, int) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = __gnu_cxx::__stoa<long long unsigned int> ((long long unsigned int (*<T40ab>) (const char *, char * *, int)) strtoull, (const char *) "stoull", std::__cxx11::basic_string<char>::c_str ((const struct string *) __str), __idx, __base)>>;


;; Function float std::__cxx11::stof(const string&, std::size_t*) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = __gnu_cxx::__stoa<float> ((float (*<T40b7>) (const char *, char * *)) strtof, (const char *) "stof", std::__cxx11::basic_string<char>::c_str ((const struct string *) __str), __idx)>>;


;; Function double std::__cxx11::stod(const string&, std::size_t*) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = __gnu_cxx::__stoa<double> ((double (*<T40c0>) (const char *, char * *)) strtod, (const char *) "stod", std::__cxx11::basic_string<char>::c_str ((const struct string *) __str), __idx)>>;


;; Function long double std::__cxx11::stold(const string&, std::size_t*) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = __gnu_cxx::__stoa<long double> ((long double (*<T40cb>) (const char *, char * *)) strtold, (const char *) "stold", std::__cxx11::basic_string<char>::c_str ((const struct string *) __str), __idx)>>;


;; Function std::__cxx11::string std::__cxx11::to_string(int) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return *<retval> = TARGET_EXPR <D.24343, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.24343
  (int (*<T40da>) (char *, size_t, const char *, struct  *)) vsnprintf
  16
  (const char *) "%d"
  __val >>>>>>;


;; Function std::__cxx11::string std::__cxx11::to_string(unsigned int) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return *<retval> = TARGET_EXPR <D.24356, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.24356
  (int (*<T40da>) (char *, size_t, const char *, struct  *)) vsnprintf
  16
  (const char *) "%u"
  __val >>>>>>;


;; Function std::__cxx11::string std::__cxx11::to_string(long int) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return *<retval> = TARGET_EXPR <D.24360, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.24360
  (int (*<T40da>) (char *, size_t, const char *, struct  *)) vsnprintf
  32
  (const char *) "%ld"
  __val >>>>>>;


;; Function std::__cxx11::string std::__cxx11::to_string(long unsigned int) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return *<retval> = TARGET_EXPR <D.24364, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.24364
  (int (*<T40da>) (char *, size_t, const char *, struct  *)) vsnprintf
  32
  (const char *) "%lu"
  __val >>>>>>;


;; Function std::__cxx11::string std::__cxx11::to_string(long long int) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return *<retval> = TARGET_EXPR <D.24368, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.24368
  (int (*<T40da>) (char *, size_t, const char *, struct  *)) vsnprintf
  32
  (const char *) "%lld"
  __val >>>>>>;


;; Function std::__cxx11::string std::__cxx11::to_string(long long unsigned int) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return *<retval> = TARGET_EXPR <D.24372, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.24372
  (int (*<T40da>) (char *, size_t, const char *, struct  *)) vsnprintf
  32
  (const char *) "%llu"
  __val >>>>>>;


;; Function std::__cxx11::string std::__cxx11::to_string(float) (null)
;; enabled by -tree-original


{
  const int __n = 58;

  # DEBUG BEGIN STMT;
  <<cleanup_point   const int __n = 58;>>;
  # DEBUG BEGIN STMT;
  <<cleanup_point return *<retval> = TARGET_EXPR <D.24405, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.24405
  (int (*<T40da>) (char *, size_t, const char *, struct  *)) vsnprintf
  58
  (const char *) "%f"
  (double) __val >>>>>>;
}


;; Function std::__cxx11::string std::__cxx11::to_string(double) (null)
;; enabled by -tree-original


{
  const int __n = 328;

  # DEBUG BEGIN STMT;
  <<cleanup_point   const int __n = 328;>>;
  # DEBUG BEGIN STMT;
  <<cleanup_point return *<retval> = TARGET_EXPR <D.24438, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.24438
  (int (*<T40da>) (char *, size_t, const char *, struct  *)) vsnprintf
  328
  (const char *) "%f"
  __val >>>>>>;
}


;; Function std::__cxx11::string std::__cxx11::to_string(long double) (null)
;; enabled by -tree-original


{
  const int __n = 4952;

  # DEBUG BEGIN STMT;
  <<cleanup_point   const int __n = 4952;>>;
  # DEBUG BEGIN STMT;
  <<cleanup_point return *<retval> = TARGET_EXPR <D.24471, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.24471
  (int (*<T40da>) (char *, size_t, const char *, struct  *)) vsnprintf
  4952
  (const char *) "%Lf"
  __val >>>>>>;
}


;; Function int std::__cxx11::stoi(const wstring&, std::size_t*, int) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = __gnu_cxx::__stoa<long int, int, wchar_t, int> ((long int (*<T44f0>) (const wchar_t *, wchar_t * *, int)) wcstol, (const char *) "stoi", std::__cxx11::basic_string<wchar_t>::c_str ((const struct wstring *) __str), __idx, __base)>>;


;; Function long int std::__cxx11::stol(const wstring&, std::size_t*, int) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = __gnu_cxx::__stoa<long int> ((long int (*<T44f0>) (const wchar_t *, wchar_t * *, int)) wcstol, (const char *) "stol", std::__cxx11::basic_string<wchar_t>::c_str ((const struct wstring *) __str), __idx, __base)>>;


;; Function long unsigned int std::__cxx11::stoul(const wstring&, std::size_t*, int) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = __gnu_cxx::__stoa<long unsigned int> ((long unsigned int (*<T4502>) (const wchar_t *, wchar_t * *, int)) wcstoul, (const char *) "stoul", std::__cxx11::basic_string<wchar_t>::c_str ((const struct wstring *) __str), __idx, __base)>>;


;; Function long long int std::__cxx11::stoll(const wstring&, std::size_t*, int) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = __gnu_cxx::__stoa<long long int> ((long long int (*<T450c>) (const wchar_t *, wchar_t * *, int)) wcstoll, (const char *) "stoll", std::__cxx11::basic_string<wchar_t>::c_str ((const struct wstring *) __str), __idx, __base)>>;


;; Function long long unsigned int std::__cxx11::stoull(const wstring&, std::size_t*, int) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = __gnu_cxx::__stoa<long long unsigned int> ((long long unsigned int (*<T4516>) (const wchar_t *, wchar_t * *, int)) wcstoull, (const char *) "stoull", std::__cxx11::basic_string<wchar_t>::c_str ((const struct wstring *) __str), __idx, __base)>>;


;; Function float std::__cxx11::stof(const wstring&, std::size_t*) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = __gnu_cxx::__stoa<float> ((float (*<T4520>) (const wchar_t *, wchar_t * *)) wcstof, (const char *) "stof", std::__cxx11::basic_string<wchar_t>::c_str ((const struct wstring *) __str), __idx)>>;


;; Function double std::__cxx11::stod(const wstring&, std::size_t*) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = __gnu_cxx::__stoa<double> ((double (*<T452a>) (const wchar_t *, wchar_t * *)) wcstod, (const char *) "stod", std::__cxx11::basic_string<wchar_t>::c_str ((const struct wstring *) __str), __idx)>>;


;; Function long double std::__cxx11::stold(const wstring&, std::size_t*) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = __gnu_cxx::__stoa<long double> ((long double (*<T4534>) (const wchar_t *, wchar_t * *)) wcstold, (const char *) "stold", std::__cxx11::basic_string<wchar_t>::c_str ((const struct wstring *) __str), __idx)>>;


;; Function std::__cxx11::wstring std::__cxx11::to_wstring(int) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return *<retval> = TARGET_EXPR <D.26106, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.26106
  (int (*<T4542>) (wchar_t *, size_t, const wchar_t *, struct  *)) vswprintf
  16
  (const wchar_t *) "%"
  __val >>>>>>;


;; Function std::__cxx11::wstring std::__cxx11::to_wstring(unsigned int) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return *<retval> = TARGET_EXPR <D.26119, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.26119
  (int (*<T4542>) (wchar_t *, size_t, const wchar_t *, struct  *)) vswprintf
  16
  (const wchar_t *) "%"
  __val >>>>>>;


;; Function std::__cxx11::wstring std::__cxx11::to_wstring(long int) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return *<retval> = TARGET_EXPR <D.26123, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.26123
  (int (*<T4542>) (wchar_t *, size_t, const wchar_t *, struct  *)) vswprintf
  32
  (const wchar_t *) "%"
  __val >>>>>>;


;; Function std::__cxx11::wstring std::__cxx11::to_wstring(long unsigned int) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return *<retval> = TARGET_EXPR <D.26127, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.26127
  (int (*<T4542>) (wchar_t *, size_t, const wchar_t *, struct  *)) vswprintf
  32
  (const wchar_t *) "%"
  __val >>>>>>;


;; Function std::__cxx11::wstring std::__cxx11::to_wstring(long long int) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return *<retval> = TARGET_EXPR <D.26131, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.26131
  (int (*<T4542>) (wchar_t *, size_t, const wchar_t *, struct  *)) vswprintf
  32
  (const wchar_t *) "%"
  __val >>>>>>;


;; Function std::__cxx11::wstring std::__cxx11::to_wstring(long long unsigned int) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return *<retval> = TARGET_EXPR <D.26135, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.26135
  (int (*<T4542>) (wchar_t *, size_t, const wchar_t *, struct  *)) vswprintf
  32
  (const wchar_t *) "%"
  __val >>>>>>;


;; Function std::__cxx11::wstring std::__cxx11::to_wstring(float) (null)
;; enabled by -tree-original


{
  const int __n = 58;

  # DEBUG BEGIN STMT;
  <<cleanup_point   const int __n = 58;>>;
  # DEBUG BEGIN STMT;
  <<cleanup_point return *<retval> = TARGET_EXPR <D.26140, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.26140
  (int (*<T4542>) (wchar_t *, size_t, const wchar_t *, struct  *)) vswprintf
  58
  (const wchar_t *) "%"
  (double) __val >>>>>>;
}


;; Function std::__cxx11::wstring std::__cxx11::to_wstring(double) (null)
;; enabled by -tree-original


{
  const int __n = 328;

  # DEBUG BEGIN STMT;
  <<cleanup_point   const int __n = 328;>>;
  # DEBUG BEGIN STMT;
  <<cleanup_point return *<retval> = TARGET_EXPR <D.26145, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.26145
  (int (*<T4542>) (wchar_t *, size_t, const wchar_t *, struct  *)) vswprintf
  328
  (const wchar_t *) "%"
  __val >>>>>>;
}


;; Function std::__cxx11::wstring std::__cxx11::to_wstring(long double) (null)
;; enabled by -tree-original


{
  const int __n = 4952;

  # DEBUG BEGIN STMT;
  <<cleanup_point   const int __n = 4952;>>;
  # DEBUG BEGIN STMT;
  <<cleanup_point return *<retval> = TARGET_EXPR <D.26150, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.26150
  (int (*<T4542>) (wchar_t *, size_t, const wchar_t *, struct  *)) vswprintf
  4952
  (const wchar_t *) "%"
  __val >>>>>>;
}


;; Function std::size_t std::hash<std::__cxx11::basic_string<char> >::operator()(const string&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) std::__cxx11::basic_string<char>::data ((const struct string *) __s), std::__cxx11::basic_string<char>::length ((const struct string *) __s), 3339675911)>>;
   >>>;
__builtin_unreachable ();


;; Function std::size_t std::hash<std::__cxx11::basic_string<wchar_t> >::operator()(const wstring&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) std::__cxx11::basic_string<wchar_t>::data ((const struct wstring *) __s), std::__cxx11::basic_string<wchar_t>::length ((const struct wstring *) __s) * 4, 3339675911)>>;
   >>>;
__builtin_unreachable ();


;; Function std::size_t std::hash<std::__cxx11::basic_string<char16_t> >::operator()(const u16string&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) std::__cxx11::basic_string<char16_t>::data ((const struct u16string *) __s), std::__cxx11::basic_string<char16_t>::length ((const struct u16string *) __s) * 2, 3339675911)>>;
   >>>;
__builtin_unreachable ();


;; Function std::size_t std::hash<std::__cxx11::basic_string<char32_t> >::operator()(const u32string&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) std::__cxx11::basic_string<char32_t>::data ((const struct u32string *) __s), std::__cxx11::basic_string<char32_t>::length ((const struct u32string *) __s) * 4, 3339675911)>>;
   >>>;
__builtin_unreachable ();


;; Function std::__cxx11::basic_string<char> std::literals::string_literals::operator""s(const char*, std::size_t) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return *<retval> = TARGET_EXPR <D.29750, <<< Unknown tree: aggr_init_expr
  7
  __ct_comp 
  D.29750
  (struct basic_string *) <<< Unknown tree: void_cst >>>
  __str
  __len
  (const struct allocator &) &TARGET_EXPR <D.29749, <<< Unknown tree: aggr_init_expr
  4
  __ct_comp 
  D.29749
  (struct allocator *) <<< Unknown tree: void_cst >>> >>>> >>>>>>;


;; Function std::__cxx11::basic_string<wchar_t> std::literals::string_literals::operator""s(const wchar_t*, std::size_t) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return *<retval> = TARGET_EXPR <D.29852, <<< Unknown tree: aggr_init_expr
  7
  __ct_comp 
  D.29852
  (struct basic_string *) <<< Unknown tree: void_cst >>>
  __str
  __len
  (const struct allocator &) &TARGET_EXPR <D.29851, <<< Unknown tree: aggr_init_expr
  4
  __ct_comp 
  D.29851
  (struct allocator *) <<< Unknown tree: void_cst >>> >>>> >>>>>>;


;; Function std::__cxx11::basic_string<char16_t> std::literals::string_literals::operator""s(const char16_t*, std::size_t) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return *<retval> = TARGET_EXPR <D.29954, <<< Unknown tree: aggr_init_expr
  7
  __ct_comp 
  D.29954
  (struct basic_string *) <<< Unknown tree: void_cst >>>
  __str
  __len
  (const struct allocator &) &TARGET_EXPR <D.29953, <<< Unknown tree: aggr_init_expr
  4
  __ct_comp 
  D.29953
  (struct allocator *) <<< Unknown tree: void_cst >>> >>>> >>>>>>;


;; Function std::__cxx11::basic_string<char32_t> std::literals::string_literals::operator""s(const char32_t*, std::size_t) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return *<retval> = TARGET_EXPR <D.30065, <<< Unknown tree: aggr_init_expr
  7
  __ct_comp 
  D.30065
  (struct basic_string *) <<< Unknown tree: void_cst >>>
  __str
  __len
  (const struct allocator &) &TARGET_EXPR <D.30064, <<< Unknown tree: aggr_init_expr
  4
  __ct_comp 
  D.30064
  (struct allocator *) <<< Unknown tree: void_cst >>> >>>> >>>>>>;


;; Function std::locale::locale(const string&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct _Impl * _M_impl;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::locale::locale ((struct locale *) this, std::__cxx11::basic_string<char>::c_str ((const struct string *) __s)) >>>>>;
  try
    {
      
    }
  catch
    {
      std::locale::~locale ((struct locale *) this);
    }
}


;; Function std::locale::locale(const std::locale&, const string&, std::locale::category) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct _Impl * _M_impl;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::locale::locale ((struct locale *) this, __base, std::__cxx11::basic_string<char>::c_str ((const struct string *) __s), __cat) >>>>>;
  try
    {
      
    }
  catch
    {
      std::locale::~locale ((struct locale *) this);
    }
}


;; Function bool std::locale::operator!=(const std::locale&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = !std::locale::operator== ((const struct locale *) this, __other)>>;
   >>>;
__builtin_unreachable ();


;; Function std::locale::facet::facet(std::size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int (*) () * _vptr.facet;
    _Atomic_word _M_refcount;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct facet *) this)->_vptr.facet = &_ZTVNSt6locale5facetE + 16) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct facet *) this)->_M_refcount = __refs != 0 ? 1 : 0) >>>>>;
  }
   >>>;


;; Function void std::locale::facet::_M_add_reference() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__atomic_add_dispatch (&((const struct facet *) this)->_M_refcount, 1) >>>>>;
   >>>;


;; Function void std::locale::facet::_M_remove_reference() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  # DEBUG BEGIN STMT;
  if (<<cleanup_point __gnu_cxx::__exchange_and_add_dispatch (&((const struct facet *) this)->_M_refcount, -1) == 1>>)
    {
      # DEBUG BEGIN STMT;
      # DEBUG BEGIN STMT;
      <<< Unknown tree: try_block
  # DEBUG BEGIN STMT;
  <<cleanup_point <<< Unknown tree: expr_stmt
  if ((struct facet *) this != 0B)
    {
      OBJ_TYPE_REF(*(((struct facet *) this)->_vptr.facet + 8);(struct facet)(struct facet *) this->1) ((struct facet *) this);
    }
  else
    {
      <<< Unknown tree: void_cst >>>
    } >>>>>;
  <<< Unknown tree: handler
  
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __cxa_begin_catch (__builtin_eh_pointer (0)) >>>>>;
    }
  finally
    {
      __cxa_end_catch ();
    } >>> >>>;
    }
   >>>;


;; Function std::locale::id::id() (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    size_t _M_index;
  } &) this = {CLOBBER} >>>>>;
{
  
}


;; Function void std::locale::_Impl::_M_add_reference() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__atomic_add_dispatch (&((struct _Impl *) this)->_M_refcount, 1) >>>>>;
   >>>;


;; Function void std::locale::_Impl::_M_remove_reference() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  # DEBUG BEGIN STMT;
  if (<<cleanup_point __gnu_cxx::__exchange_and_add_dispatch (&((struct _Impl *) this)->_M_refcount, -1) == 1>>)
    {
      # DEBUG BEGIN STMT;
      # DEBUG BEGIN STMT;
      <<< Unknown tree: try_block
  # DEBUG BEGIN STMT;
  <<cleanup_point <<< Unknown tree: expr_stmt
  if ((struct _Impl *) this != 0B)
    {
      try
        {
          std::locale::_Impl::~_Impl ((struct _Impl *) this);
        }
      finally
        {
          operator delete ((void *) this, 40);
        }
    }
  else
    {
      <<< Unknown tree: void_cst >>>
    } >>>>>;
  <<< Unknown tree: handler
  
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __cxa_begin_catch (__builtin_eh_pointer (0)) >>>>>;
    }
  finally
    {
      __cxa_end_catch ();
    } >>> >>>;
    }
   >>>;


;; Function bool std::locale::_Impl::_M_check_same_name() (null)
;; enabled by -tree-original


{
  bool __ret = 1;

  # DEBUG BEGIN STMT;
  <<cleanup_point   bool __ret = 1;>>;
  # DEBUG BEGIN STMT;
  {
    if (*(((struct _Impl *) this)->_M_names + 8) != 0B)
      {
        {
          # DEBUG BEGIN STMT;
          {
            size_t __i = 0;

            <<cleanup_point             size_t __i = 0;>>;
            while (1)
              {
                if (__i > 10 || !__ret) goto <D.31074>;
                # DEBUG BEGIN STMT;
                <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = __builtin_strcmp ((const char *) *(((struct _Impl *) this)->_M_names + (sizetype) (__i * 8)), (const char *) *(((struct _Impl *) this)->_M_names + ((sizetype) __i + 1) * 8)) == 0) >>>>>;
                <<cleanup_point (void)  ++__i>>;
              }
            <D.31074>:;
          }
        }
      }
  }
  # DEBUG BEGIN STMT;
  return <retval> = __ret;
}


;; Function constexpr bool std::less<_Tp*>::operator()(_Tp*, _Tp*) const [with _Tp = const std::_V2::error_category] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  if (__builtin_constant_p (__x < __y) != 0)
    {
      return <retval> = __x < __y;
    }
  return <retval> = (long unsigned int) __x < (long unsigned int) __y;
   >>>;
__builtin_unreachable ();


;; Function bool std::_V2::error_category::operator<(const std::_V2::error_category&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = std::less<const std::_V2::error_category*>::operator() (&TARGET_EXPR <D.32275, {.D.32216={}}>, (const struct error_category *) this, (const struct error_category *) __other)>>;
   >>>;
__builtin_unreachable ();


;; Function bool std::_V2::error_category::operator==(const std::_V2::error_category&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = (const struct error_category *) this == (const struct error_category *) __other;
   >>>;
__builtin_unreachable ();


;; Function bool std::_V2::error_category::operator!=(const std::_V2::error_category&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = (const struct error_category *) this != (const struct error_category *) __other;
   >>>;
__builtin_unreachable ();


;; Function std::error_code::error_code() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int _M_value;
    const struct error_category * _M_cat;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct error_code *) this)->_M_value = 0) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct error_code *) this)->_M_cat = (const struct error_category *) std::_V2::system_category ()) >>>>>;
  }
   >>>;


;; Function std::error_code::error_code(int, const std::_V2::error_category&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int _M_value;
    const struct error_category * _M_cat;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct error_code *) this)->_M_value = __v) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct error_code *) this)->_M_cat = (const struct error_category *) __cat) >>>>>;
  }
   >>>;


;; Function void std::error_code::assign(int, const std::_V2::error_category&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct error_code *) this)->_M_value = __v) >>>>>;
  # DEBUG BEGIN STMT;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct error_code *) this)->_M_cat = (const struct error_category *) __cat) >>>>>;
   >>>;


;; Function void std::error_code::clear() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::error_code::assign ((struct error_code *) this, 0, std::_V2::system_category ()) >>>>>;
   >>>;


;; Function int std::error_code::value() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = (int) ((const struct error_code *) this)->_M_value;
   >>>;
__builtin_unreachable ();


;; Function const std::_V2::error_category& std::error_code::category() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = (const struct error_category &) ((const struct error_code *) this)->_M_cat;
   >>>;
__builtin_unreachable ();


;; Function std::__cxx11::string std::error_code::message() const (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return *<retval> = TARGET_EXPR <D.32369, <<< Unknown tree: aggr_init_expr
  5
  OBJ_TYPE_REF(*((SAVE_EXPR <(const struct error_category *) std::error_code::category ((const struct error_code *) this)>)->_vptr.error_category + 32);(const struct error_category)SAVE_EXPR <(const struct error_category *) std::error_code::category ((const struct error_code *) this)>->4)
  D.32369
  SAVE_EXPR <(const struct error_category *) std::error_code::category ((const struct error_code *) this)>
  std::error_code::value ((const struct error_code *) this) >>>>>>;


;; Function std::error_code::operator bool() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = ((const struct error_code *) this)->_M_value != 0;
   >>>;
__builtin_unreachable ();


;; Function std::error_code std::make_error_code(std::errc) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = TARGET_EXPR <D.32392, <<< Unknown tree: aggr_init_expr
  6
  __ct_comp 
  D.32392
  (struct error_code *) <<< Unknown tree: void_cst >>>
  (int) __e
  std::_V2::generic_category () >>>>;, D.32392>>;
   >>>;
__builtin_unreachable ();


;; Function bool std::operator<(const std::error_code&, const std::error_code&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = std::_V2::error_category::operator< ((const struct error_category *) std::error_code::category ((const struct error_code *) __lhs), std::error_code::category ((const struct error_code *) __rhs)) || std::_V2::error_category::operator== ((const struct error_category *) std::error_code::category ((const struct error_code *) __lhs), std::error_code::category ((const struct error_code *) __rhs)) && std::error_code::value ((const struct error_code *) __lhs) < std::error_code::value ((const struct error_code *) __rhs)>>;
   >>>;
__builtin_unreachable ();


;; Function std::error_condition::error_condition() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int _M_value;
    const struct error_category * _M_cat;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct error_condition *) this)->_M_value = 0) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct error_condition *) this)->_M_cat = (const struct error_category *) std::_V2::generic_category ()) >>>>>;
  }
   >>>;


;; Function std::error_condition::error_condition(int, const std::_V2::error_category&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int _M_value;
    const struct error_category * _M_cat;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct error_condition *) this)->_M_value = __v) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct error_condition *) this)->_M_cat = (const struct error_category *) __cat) >>>>>;
  }
   >>>;


;; Function void std::error_condition::assign(int, const std::_V2::error_category&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct error_condition *) this)->_M_value = __v) >>>>>;
  # DEBUG BEGIN STMT;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct error_condition *) this)->_M_cat = (const struct error_category *) __cat) >>>>>;
   >>>;


;; Function void std::error_condition::clear() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::error_condition::assign ((struct error_condition *) this, 0, std::_V2::generic_category ()) >>>>>;
   >>>;


;; Function int std::error_condition::value() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = (int) ((const struct error_condition *) this)->_M_value;
   >>>;
__builtin_unreachable ();


;; Function const std::_V2::error_category& std::error_condition::category() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = (const struct error_category &) ((const struct error_condition *) this)->_M_cat;
   >>>;
__builtin_unreachable ();


;; Function std::__cxx11::string std::error_condition::message() const (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return *<retval> = TARGET_EXPR <D.32495, <<< Unknown tree: aggr_init_expr
  5
  OBJ_TYPE_REF(*((SAVE_EXPR <(const struct error_category *) std::error_condition::category ((const struct error_condition *) this)>)->_vptr.error_category + 32);(const struct error_category)SAVE_EXPR <(const struct error_category *) std::error_condition::category ((const struct error_condition *) this)>->4)
  D.32495
  SAVE_EXPR <(const struct error_category *) std::error_condition::category ((const struct error_condition *) this)>
  std::error_condition::value ((const struct error_condition *) this) >>>>>>;


;; Function std::error_condition::operator bool() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = ((const struct error_condition *) this)->_M_value != 0;
   >>>;
__builtin_unreachable ();


;; Function std::error_condition std::make_error_condition(std::errc) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = TARGET_EXPR <D.32518, <<< Unknown tree: aggr_init_expr
  6
  __ct_comp 
  D.32518
  (struct error_condition *) <<< Unknown tree: void_cst >>>
  (int) __e
  std::_V2::generic_category () >>>>;, D.32518>>;
   >>>;
__builtin_unreachable ();


;; Function bool std::operator<(const std::error_condition&, const std::error_condition&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = std::_V2::error_category::operator< ((const struct error_category *) std::error_condition::category ((const struct error_condition *) __lhs), std::error_condition::category ((const struct error_condition *) __rhs)) || std::_V2::error_category::operator== ((const struct error_category *) std::error_condition::category ((const struct error_condition *) __lhs), std::error_condition::category ((const struct error_condition *) __rhs)) && std::error_condition::value ((const struct error_condition *) __lhs) < std::error_condition::value ((const struct error_condition *) __rhs)>>;
   >>>;
__builtin_unreachable ();


;; Function bool std::operator==(const std::error_code&, const std::error_code&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = std::_V2::error_category::operator== ((const struct error_category *) std::error_code::category ((const struct error_code *) __lhs), std::error_code::category ((const struct error_code *) __rhs)) && std::error_code::value ((const struct error_code *) __lhs) == std::error_code::value ((const struct error_code *) __rhs)>>;
   >>>;
__builtin_unreachable ();


;; Function bool std::operator==(const std::error_code&, const std::error_condition&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = OBJ_TYPE_REF(*((SAVE_EXPR <(const struct error_category *) std::error_code::category ((const struct error_code *) __lhs)>)->_vptr.error_category + 48);(const struct error_category)SAVE_EXPR <(const struct error_category *) std::error_code::category ((const struct error_code *) __lhs)>->6) (SAVE_EXPR <(const struct error_category *) std::error_code::category ((const struct error_code *) __lhs)>, std::error_code::value ((const struct error_code *) __lhs), __rhs) || OBJ_TYPE_REF(*((SAVE_EXPR <(const struct error_category *) std::error_condition::category ((const struct error_condition *) __rhs)>)->_vptr.error_category + 56);(const struct error_category)SAVE_EXPR <(const struct error_category *) std::error_condition::category ((const struct error_condition *) __rhs)>->7) (SAVE_EXPR <(const struct error_category *) std::error_condition::category ((const struct error_condition *) __rhs)>, __lhs, std::error_condition::value ((const struct error_condition *) __rhs))>>;
   >>>;
__builtin_unreachable ();


;; Function bool std::operator==(const std::error_condition&, const std::error_code&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = OBJ_TYPE_REF(*((SAVE_EXPR <(const struct error_category *) std::error_code::category ((const struct error_code *) __rhs)>)->_vptr.error_category + 48);(const struct error_category)SAVE_EXPR <(const struct error_category *) std::error_code::category ((const struct error_code *) __rhs)>->6) (SAVE_EXPR <(const struct error_category *) std::error_code::category ((const struct error_code *) __rhs)>, std::error_code::value ((const struct error_code *) __rhs), __lhs) || OBJ_TYPE_REF(*((SAVE_EXPR <(const struct error_category *) std::error_condition::category ((const struct error_condition *) __lhs)>)->_vptr.error_category + 56);(const struct error_category)SAVE_EXPR <(const struct error_category *) std::error_condition::category ((const struct error_condition *) __lhs)>->7) (SAVE_EXPR <(const struct error_category *) std::error_condition::category ((const struct error_condition *) __lhs)>, __rhs, std::error_condition::value ((const struct error_condition *) __lhs))>>;
   >>>;
__builtin_unreachable ();


;; Function bool std::operator==(const std::error_condition&, const std::error_condition&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = std::_V2::error_category::operator== ((const struct error_category *) std::error_condition::category ((const struct error_condition *) __lhs), std::error_condition::category ((const struct error_condition *) __rhs)) && std::error_condition::value ((const struct error_condition *) __lhs) == std::error_condition::value ((const struct error_condition *) __rhs)>>;
   >>>;
__builtin_unreachable ();


;; Function bool std::operator!=(const std::error_code&, const std::error_code&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = !std::operator== (__lhs, __rhs)>>;
   >>>;
__builtin_unreachable ();


;; Function bool std::operator!=(const std::error_code&, const std::error_condition&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = !std::operator== (__lhs, __rhs)>>;
   >>>;
__builtin_unreachable ();


;; Function bool std::operator!=(const std::error_condition&, const std::error_code&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = !std::operator== (__lhs, __rhs)>>;
   >>>;
__builtin_unreachable ();


;; Function bool std::operator!=(const std::error_condition&, const std::error_condition&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = !std::operator== (__lhs, __rhs)>>;
   >>>;
__builtin_unreachable ();


;; Function std::system_error::system_error(std::error_code) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      struct 
      {
        int (*) () * _vptr.exception;
      } D.32001;
      struct __cow_string _M_msg;
    } D.32672;
    struct error_code _M_code;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::runtime_error::runtime_error (&((struct system_error *) this)->D.32671, (const struct string &) &TARGET_EXPR <D.32678, <<< Unknown tree: aggr_init_expr
  4
  message
  D.32678
  &__ec >>>>) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct system_error *) this)->D.32671.D.32000._vptr.exception = &_ZTVSt12system_error + 16) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct system_error *) this)->_M_code = __ec) >>>>>;
    }
  catch
    {
      std::runtime_error::~runtime_error (&((struct system_error *) this)->D.32671);
    }
}


;; Function std::system_error::system_error(std::error_code, const string&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      struct 
      {
        int (*) () * _vptr.exception;
      } D.32001;
      struct __cow_string _M_msg;
    } D.32672;
    struct error_code _M_code;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::runtime_error::runtime_error (&((struct system_error *) this)->D.32671, (const struct string &) &TARGET_EXPR <D.32700, <<< Unknown tree: aggr_init_expr
  5
  operator+
  D.32700
  (struct basic_string &) &TARGET_EXPR <D.32686, <<< Unknown tree: aggr_init_expr
  5
  operator+
  D.32686
  (const struct basic_string &) __what
  (const char *) ": " >>>>
  (struct basic_string &) &TARGET_EXPR <D.32687, <<< Unknown tree: aggr_init_expr
  4
  message
  D.32687
  &__ec >>>> >>>>) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct system_error *) this)->D.32671.D.32000._vptr.exception = &_ZTVSt12system_error + 16) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct system_error *) this)->_M_code = __ec) >>>>>;
    }
  catch
    {
      std::runtime_error::~runtime_error (&((struct system_error *) this)->D.32671);
    }
}


;; Function std::system_error::system_error(std::error_code, const char*) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      struct 
      {
        int (*) () * _vptr.exception;
      } D.32001;
      struct __cow_string _M_msg;
    } D.32672;
    struct error_code _M_code;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::runtime_error::runtime_error (&((struct system_error *) this)->D.32671, (const struct string &) &TARGET_EXPR <D.32715, <<< Unknown tree: aggr_init_expr
  5
  operator+
  D.32715
  __what
  (struct basic_string &) &TARGET_EXPR <D.32714, <<< Unknown tree: aggr_init_expr
  5
  operator+
  D.32714
  (const char *) ": "
  (struct basic_string &) &TARGET_EXPR <D.32707, <<< Unknown tree: aggr_init_expr
  4
  message
  D.32707
  &__ec >>>> >>>> >>>>) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct system_error *) this)->D.32671.D.32000._vptr.exception = &_ZTVSt12system_error + 16) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct system_error *) this)->_M_code = __ec) >>>>>;
    }
  catch
    {
      std::runtime_error::~runtime_error (&((struct system_error *) this)->D.32671);
    }
}


;; Function std::system_error::system_error(int, const std::_V2::error_category&, const char*) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      struct 
      {
        int (*) () * _vptr.exception;
      } D.32001;
      struct __cow_string _M_msg;
    } D.32672;
    struct error_code _M_code;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::system_error::system_error ((struct system_error *) this, TARGET_EXPR <D.32722, <<< Unknown tree: aggr_init_expr
  6
  __ct_comp 
  D.32722
  (struct error_code *) <<< Unknown tree: void_cst >>>
  __v
  __ecat >>>>, __what) >>>>>;
  try
    {
      
    }
  catch
    {
      std::system_error::~system_error ((struct system_error *) this);
    }
}


;; Function std::system_error::system_error(int, const std::_V2::error_category&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      struct 
      {
        int (*) () * _vptr.exception;
      } D.32001;
      struct __cow_string _M_msg;
    } D.32672;
    struct error_code _M_code;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::runtime_error::runtime_error (&((struct system_error *) this)->D.32671, (const struct string &) &TARGET_EXPR <D.32737, <<< Unknown tree: aggr_init_expr
  4
  message
  D.32737
  &TARGET_EXPR <D.32736, <<< Unknown tree: aggr_init_expr
  6
  __ct_comp 
  D.32736
  (struct error_code *) <<< Unknown tree: void_cst >>>
  __v
  __ecat >>>> >>>>) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct system_error *) this)->D.32671.D.32000._vptr.exception = &_ZTVSt12system_error + 16) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::error_code::error_code (&((struct system_error *) this)->_M_code, __v, __ecat) >>>>>;
    }
  catch
    {
      std::runtime_error::~runtime_error (&((struct system_error *) this)->D.32671);
    }
}


;; Function std::system_error::system_error(int, const std::_V2::error_category&, const string&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      struct 
      {
        int (*) () * _vptr.exception;
      } D.32001;
      struct __cow_string _M_msg;
    } D.32672;
    struct error_code _M_code;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::runtime_error::runtime_error (&((struct system_error *) this)->D.32671, (const struct string &) &TARGET_EXPR <D.32746, <<< Unknown tree: aggr_init_expr
  5
  operator+
  D.32746
  (struct basic_string &) &TARGET_EXPR <D.32743, <<< Unknown tree: aggr_init_expr
  5
  operator+
  D.32743
  (const struct basic_string &) __what
  (const char *) ": " >>>>
  (struct basic_string &) &TARGET_EXPR <D.32745, <<< Unknown tree: aggr_init_expr
  4
  message
  D.32745
  &TARGET_EXPR <D.32744, <<< Unknown tree: aggr_init_expr
  6
  __ct_comp 
  D.32744
  (struct error_code *) <<< Unknown tree: void_cst >>>
  __v
  __ecat >>>> >>>> >>>>) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct system_error *) this)->D.32671.D.32000._vptr.exception = &_ZTVSt12system_error + 16) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::error_code::error_code (&((struct system_error *) this)->_M_code, __v, __ecat) >>>>>;
    }
  catch
    {
      std::runtime_error::~runtime_error (&((struct system_error *) this)->D.32671);
    }
}


;; Function const std::error_code& std::system_error::code() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = (const struct error_code &) &((const struct system_error *) this)->_M_code;
   >>>;
__builtin_unreachable ();


;; Function std::size_t std::hash<std::error_code>::operator()(const std::error_code&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    const size_t __tmp;

    # DEBUG BEGIN STMT;
        const size_t __tmp;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = std::_Hash_impl::hash<int> ((const int &) &__e->_M_value)) >>>>>;
    # DEBUG BEGIN STMT;
    <<cleanup_point return <retval> = std::_Hash_impl::__hash_combine<const std::_V2::error_category*> ((const struct error_category * const &) &__e->_M_cat, (size_t) __tmp)>>;
  }
   >>>;
__builtin_unreachable ();


;; Function std::size_t std::hash<std::error_condition>::operator()(const std::error_condition&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    const size_t __tmp;

    # DEBUG BEGIN STMT;
        const size_t __tmp;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = std::_Hash_impl::hash<int> ((const int &) &TARGET_EXPR <D.32786, std::error_condition::value ((const struct error_condition *) __e)>)) >>>>>;
    # DEBUG BEGIN STMT;
    <<cleanup_point return <retval> = std::_Hash_impl::__hash_combine<std::_V2::error_category> (std::error_condition::category ((const struct error_condition *) __e), (size_t) __tmp)>>;
  }
   >>>;
__builtin_unreachable ();


;; Function constexpr std::_Ios_Fmtflags std::operator&(std::_Ios_Fmtflags, std::_Ios_Fmtflags) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
return <retval> = (_Ios_Fmtflags) ((int) __a & (int) __b);


;; Function constexpr std::_Ios_Fmtflags std::operator|(std::_Ios_Fmtflags, std::_Ios_Fmtflags) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
return <retval> = (_Ios_Fmtflags) ((int) __a | (int) __b);


;; Function constexpr std::_Ios_Fmtflags std::operator^(std::_Ios_Fmtflags, std::_Ios_Fmtflags) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
return <retval> = (_Ios_Fmtflags) ((int) __a ^ (int) __b);


;; Function constexpr std::_Ios_Fmtflags std::operator~(std::_Ios_Fmtflags) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
return <retval> = ~__a;


;; Function const std::_Ios_Fmtflags& std::operator|=(std::_Ios_Fmtflags&, std::_Ios_Fmtflags) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = *__a = std::operator| (*__a, __b);, (const _Ios_Fmtflags &) __a;>>;


;; Function const std::_Ios_Fmtflags& std::operator&=(std::_Ios_Fmtflags&, std::_Ios_Fmtflags) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = *__a = std::operator& (*__a, __b);, (const _Ios_Fmtflags &) __a;>>;


;; Function const std::_Ios_Fmtflags& std::operator^=(std::_Ios_Fmtflags&, std::_Ios_Fmtflags) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = *__a = std::operator^ (*__a, __b);, (const _Ios_Fmtflags &) __a;>>;


;; Function constexpr std::_Ios_Openmode std::operator&(std::_Ios_Openmode, std::_Ios_Openmode) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
return <retval> = (_Ios_Openmode) ((int) __a & (int) __b);


;; Function constexpr std::_Ios_Openmode std::operator|(std::_Ios_Openmode, std::_Ios_Openmode) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
return <retval> = (_Ios_Openmode) ((int) __a | (int) __b);


;; Function constexpr std::_Ios_Openmode std::operator^(std::_Ios_Openmode, std::_Ios_Openmode) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
return <retval> = (_Ios_Openmode) ((int) __a ^ (int) __b);


;; Function constexpr std::_Ios_Openmode std::operator~(std::_Ios_Openmode) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
return <retval> = ~__a;


;; Function const std::_Ios_Openmode& std::operator|=(std::_Ios_Openmode&, std::_Ios_Openmode) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = *__a = std::operator| (*__a, __b);, (const _Ios_Openmode &) __a;>>;


;; Function const std::_Ios_Openmode& std::operator&=(std::_Ios_Openmode&, std::_Ios_Openmode) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = *__a = std::operator& (*__a, __b);, (const _Ios_Openmode &) __a;>>;


;; Function const std::_Ios_Openmode& std::operator^=(std::_Ios_Openmode&, std::_Ios_Openmode) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = *__a = std::operator^ (*__a, __b);, (const _Ios_Openmode &) __a;>>;


;; Function constexpr std::_Ios_Iostate std::operator&(std::_Ios_Iostate, std::_Ios_Iostate) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
return <retval> = (_Ios_Iostate) ((int) __a & (int) __b);


;; Function constexpr std::_Ios_Iostate std::operator|(std::_Ios_Iostate, std::_Ios_Iostate) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
return <retval> = (_Ios_Iostate) ((int) __a | (int) __b);


;; Function constexpr std::_Ios_Iostate std::operator^(std::_Ios_Iostate, std::_Ios_Iostate) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
return <retval> = (_Ios_Iostate) ((int) __a ^ (int) __b);


;; Function constexpr std::_Ios_Iostate std::operator~(std::_Ios_Iostate) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
return <retval> = ~__a;


;; Function const std::_Ios_Iostate& std::operator|=(std::_Ios_Iostate&, std::_Ios_Iostate) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = *__a = std::operator| (*__a, __b);, (const _Ios_Iostate &) __a;>>;


;; Function const std::_Ios_Iostate& std::operator&=(std::_Ios_Iostate&, std::_Ios_Iostate) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = *__a = std::operator& (*__a, __b);, (const _Ios_Iostate &) __a;>>;


;; Function const std::_Ios_Iostate& std::operator^=(std::_Ios_Iostate&, std::_Ios_Iostate) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = *__a = std::operator^ (*__a, __b);, (const _Ios_Iostate &) __a;>>;


;; Function std::error_code std::make_error_code(std::io_errc) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = TARGET_EXPR <D.32926, <<< Unknown tree: aggr_init_expr
  6
  __ct_comp 
  D.32926
  (struct error_code *) <<< Unknown tree: void_cst >>>
  (int) __e
  std::iostream_category () >>>>;, D.32926>>;
   >>>;
__builtin_unreachable ();


;; Function std::error_condition std::make_error_condition(std::io_errc) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = TARGET_EXPR <D.32930, <<< Unknown tree: aggr_init_expr
  6
  __ct_comp 
  D.32930
  (struct error_condition *) <<< Unknown tree: void_cst >>>
  (int) __e
  std::iostream_category () >>>>;, D.32930>>;
   >>>;
__builtin_unreachable ();


;; Function std::ios_base::_Callback_list::_Callback_list(std::ios_base::event_callback, int, std::ios_base::_Callback_list*) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct _Callback_list * _M_next;
    void (*event_callback) (event, struct ios_base &, int) _M_fn;
    int _M_index;
    _Atomic_word _M_refcount;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Callback_list *) this)->_M_next = __cb) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Callback_list *) this)->_M_fn = __fn) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Callback_list *) this)->_M_index = __index) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Callback_list *) this)->_M_refcount = 0) >>>>>;
}


;; Function void std::ios_base::_Callback_list::_M_add_reference() (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__atomic_add_dispatch (&((struct _Callback_list *) this)->_M_refcount, 1) >>>>>;


;; Function int std::ios_base::_Callback_list::_M_remove_reference() (null)
;; enabled by -tree-original


{
  int __res;

  # DEBUG BEGIN STMT;
  # DEBUG BEGIN STMT;
    int __res;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__res = __gnu_cxx::__exchange_and_add_dispatch (&((struct _Callback_list *) this)->_M_refcount, -1)) >>>>>;
  # DEBUG BEGIN STMT;
  if (__res == 0)
    {
      # DEBUG BEGIN STMT;
    }
  # DEBUG BEGIN STMT;
  return <retval> = __res;
}


;; Function std::ios_base::_Words::_Words() (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    void * _M_pword;
    long int _M_iword;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Words *) this)->_M_pword = 0B) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Words *) this)->_M_iword = 0) >>>>>;
}


;; Function std::ios_base::fmtflags std::ios_base::flags() const (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
return <retval> = (fmtflags) ((const struct ios_base *) this)->_M_flags;


;; Function std::ios_base::fmtflags std::ios_base::flags(std::ios_base::fmtflags) (null)
;; enabled by -tree-original


{
  fmtflags __old = ((struct ios_base *) this)->_M_flags;

  # DEBUG BEGIN STMT;
    fmtflags __old = ((struct ios_base *) this)->_M_flags;
  # DEBUG BEGIN STMT;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct ios_base *) this)->_M_flags = __fmtfl) >>>>>;
  # DEBUG BEGIN STMT;
  return <retval> = __old;
}


;; Function std::ios_base::fmtflags std::ios_base::setf(std::ios_base::fmtflags) (null)
;; enabled by -tree-original


{
  fmtflags __old = ((struct ios_base *) this)->_M_flags;

  # DEBUG BEGIN STMT;
    fmtflags __old = ((struct ios_base *) this)->_M_flags;
  # DEBUG BEGIN STMT;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::operator|= ((_Ios_Fmtflags &) &((struct ios_base *) this)->_M_flags, __fmtfl) >>>>>;
  # DEBUG BEGIN STMT;
  return <retval> = __old;
}


;; Function std::ios_base::fmtflags std::ios_base::setf(std::ios_base::fmtflags, std::ios_base::fmtflags) (null)
;; enabled by -tree-original


{
  fmtflags __old = ((struct ios_base *) this)->_M_flags;

  # DEBUG BEGIN STMT;
    fmtflags __old = ((struct ios_base *) this)->_M_flags;
  # DEBUG BEGIN STMT;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::operator&= ((_Ios_Fmtflags &) &((struct ios_base *) this)->_M_flags, std::operator~ (__mask)) >>>>>;
  # DEBUG BEGIN STMT;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::operator|= ((_Ios_Fmtflags &) &((struct ios_base *) this)->_M_flags, std::operator& (__fmtfl, __mask)) >>>>>;
  # DEBUG BEGIN STMT;
  return <retval> = __old;
}


;; Function void std::ios_base::unsetf(std::ios_base::fmtflags) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::operator&= ((_Ios_Fmtflags &) &((struct ios_base *) this)->_M_flags, std::operator~ (__mask)) >>>>>;


;; Function std::streamsize std::ios_base::precision() const (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
return <retval> = (streamsize) ((const struct ios_base *) this)->_M_precision;


;; Function std::streamsize std::ios_base::precision(std::streamsize) (null)
;; enabled by -tree-original


{
  streamsize __old = ((struct ios_base *) this)->_M_precision;

  # DEBUG BEGIN STMT;
    streamsize __old = ((struct ios_base *) this)->_M_precision;
  # DEBUG BEGIN STMT;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct ios_base *) this)->_M_precision = __prec) >>>>>;
  # DEBUG BEGIN STMT;
  return <retval> = __old;
}


;; Function std::streamsize std::ios_base::width() const (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
return <retval> = (streamsize) ((const struct ios_base *) this)->_M_width;


;; Function std::streamsize std::ios_base::width(std::streamsize) (null)
;; enabled by -tree-original


{
  streamsize __old = ((struct ios_base *) this)->_M_width;

  # DEBUG BEGIN STMT;
    streamsize __old = ((struct ios_base *) this)->_M_width;
  # DEBUG BEGIN STMT;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct ios_base *) this)->_M_width = __wide) >>>>>;
  # DEBUG BEGIN STMT;
  return <retval> = __old;
}


;; Function std::locale std::ios_base::getloc() const (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return *<retval> = TARGET_EXPR <D.33247, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.33247
  (struct locale *) <<< Unknown tree: void_cst >>>
  (const struct locale &) &((const struct ios_base *) this)->_M_ios_locale >>>>>>;


;; Function const std::locale& std::ios_base::_M_getloc() const (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
return <retval> = (const struct locale &) &((const struct ios_base *) this)->_M_ios_locale;


;; Function long int& std::ios_base::iword(int) (null)
;; enabled by -tree-original


{
  struct _Words & __word;

  # DEBUG BEGIN STMT;
    struct _Words & __word;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__word = ((struct ios_base *) this)->_M_word_size > __ix ? (struct _Words &) (((struct ios_base *) this)->_M_word + (sizetype) ((long unsigned int) __ix * 16)) : std::ios_base::_M_grow_words ((struct ios_base *) this, __ix, 1)) >>>>>;
  # DEBUG BEGIN STMT;
  return <retval> = (long int &) &__word->_M_iword;
}


;; Function void*& std::ios_base::pword(int) (null)
;; enabled by -tree-original


{
  struct _Words & __word;

  # DEBUG BEGIN STMT;
    struct _Words & __word;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__word = ((struct ios_base *) this)->_M_word_size > __ix ? (struct _Words &) (((struct ios_base *) this)->_M_word + (sizetype) ((long unsigned int) __ix * 16)) : std::ios_base::_M_grow_words ((struct ios_base *) this, __ix, 0)) >>>>>;
  # DEBUG BEGIN STMT;
  return <retval> = (void * &) &__word->_M_pword;
}


;; Function std::ios_base& std::boolalpha(std::ios_base&) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 1) >>>>>;
# DEBUG BEGIN STMT;
return <retval> = __base;


;; Function std::ios_base& std::noboolalpha(std::ios_base&) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point <<< Unknown tree: expr_stmt
  std::ios_base::unsetf ((struct ios_base *) __base, 1) >>>>>;
# DEBUG BEGIN STMT;
return <retval> = __base;


;; Function std::ios_base& std::showbase(std::ios_base&) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 512) >>>>>;
# DEBUG BEGIN STMT;
return <retval> = __base;


;; Function std::ios_base& std::noshowbase(std::ios_base&) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point <<< Unknown tree: expr_stmt
  std::ios_base::unsetf ((struct ios_base *) __base, 512) >>>>>;
# DEBUG BEGIN STMT;
return <retval> = __base;


;; Function std::ios_base& std::showpoint(std::ios_base&) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 1024) >>>>>;
# DEBUG BEGIN STMT;
return <retval> = __base;


;; Function std::ios_base& std::noshowpoint(std::ios_base&) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point <<< Unknown tree: expr_stmt
  std::ios_base::unsetf ((struct ios_base *) __base, 1024) >>>>>;
# DEBUG BEGIN STMT;
return <retval> = __base;


;; Function std::ios_base& std::showpos(std::ios_base&) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 2048) >>>>>;
# DEBUG BEGIN STMT;
return <retval> = __base;


;; Function std::ios_base& std::noshowpos(std::ios_base&) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point <<< Unknown tree: expr_stmt
  std::ios_base::unsetf ((struct ios_base *) __base, 2048) >>>>>;
# DEBUG BEGIN STMT;
return <retval> = __base;


;; Function std::ios_base& std::skipws(std::ios_base&) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 4096) >>>>>;
# DEBUG BEGIN STMT;
return <retval> = __base;


;; Function std::ios_base& std::noskipws(std::ios_base&) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point <<< Unknown tree: expr_stmt
  std::ios_base::unsetf ((struct ios_base *) __base, 4096) >>>>>;
# DEBUG BEGIN STMT;
return <retval> = __base;


;; Function std::ios_base& std::uppercase(std::ios_base&) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 16384) >>>>>;
# DEBUG BEGIN STMT;
return <retval> = __base;


;; Function std::ios_base& std::nouppercase(std::ios_base&) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point <<< Unknown tree: expr_stmt
  std::ios_base::unsetf ((struct ios_base *) __base, 16384) >>>>>;
# DEBUG BEGIN STMT;
return <retval> = __base;


;; Function std::ios_base& std::unitbuf(std::ios_base&) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 8192) >>>>>;
# DEBUG BEGIN STMT;
return <retval> = __base;


;; Function std::ios_base& std::nounitbuf(std::ios_base&) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point <<< Unknown tree: expr_stmt
  std::ios_base::unsetf ((struct ios_base *) __base, 8192) >>>>>;
# DEBUG BEGIN STMT;
return <retval> = __base;


;; Function std::ios_base& std::internal(std::ios_base&) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 16, 176) >>>>>;
# DEBUG BEGIN STMT;
return <retval> = __base;


;; Function std::ios_base& std::left(std::ios_base&) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 32, 176) >>>>>;
# DEBUG BEGIN STMT;
return <retval> = __base;


;; Function std::ios_base& std::right(std::ios_base&) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 128, 176) >>>>>;
# DEBUG BEGIN STMT;
return <retval> = __base;


;; Function std::ios_base& std::dec(std::ios_base&) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 2, 74) >>>>>;
# DEBUG BEGIN STMT;
return <retval> = __base;


;; Function std::ios_base& std::hex(std::ios_base&) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 8, 74) >>>>>;
# DEBUG BEGIN STMT;
return <retval> = __base;


;; Function std::ios_base& std::oct(std::ios_base&) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 64, 74) >>>>>;
# DEBUG BEGIN STMT;
return <retval> = __base;


;; Function std::ios_base& std::fixed(std::ios_base&) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 4, 260) >>>>>;
# DEBUG BEGIN STMT;
return <retval> = __base;


;; Function std::ios_base& std::scientific(std::ios_base&) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 256, 260) >>>>>;
# DEBUG BEGIN STMT;
return <retval> = __base;


;; Function std::ios_base& std::hexfloat(std::ios_base&) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 260, 260) >>>>>;
# DEBUG BEGIN STMT;
return <retval> = __base;


;; Function std::ios_base& std::defaultfloat(std::ios_base&) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point <<< Unknown tree: expr_stmt
  std::ios_base::unsetf ((struct ios_base *) __base, 260) >>>>>;
# DEBUG BEGIN STMT;
return <retval> = __base;


;; Function std::ctype<char>::char_type std::ctype<char>::toupper(std::ctype<char>::char_type) const (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = OBJ_TYPE_REF(*(((const struct ctype *) this)->D.35526._vptr.facet + 16);(const struct ctype)(const struct ctype *) this->2) ((const struct ctype *) this, (int) __c)>>;


;; Function const char_type* std::ctype<char>::toupper(std::ctype<char>::char_type*, const char_type*) const (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = OBJ_TYPE_REF(*(((const struct ctype *) this)->D.35526._vptr.facet + 24);(const struct ctype)(const struct ctype *) this->3) ((const struct ctype *) this, __lo, __hi)>>;


;; Function std::ctype<char>::char_type std::ctype<char>::tolower(std::ctype<char>::char_type) const (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = OBJ_TYPE_REF(*(((const struct ctype *) this)->D.35526._vptr.facet + 32);(const struct ctype)(const struct ctype *) this->4) ((const struct ctype *) this, (int) __c)>>;


;; Function const char_type* std::ctype<char>::tolower(std::ctype<char>::char_type*, const char_type*) const (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = OBJ_TYPE_REF(*(((const struct ctype *) this)->D.35526._vptr.facet + 40);(const struct ctype)(const struct ctype *) this->5) ((const struct ctype *) this, __lo, __hi)>>;


;; Function std::ctype<char>::char_type std::ctype<char>::widen(char) const (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
if (((const struct ctype *) this)->_M_widen_ok != 0)
  {
    # DEBUG BEGIN STMT;
    return <retval> = ((const struct ctype *) this)->_M_widen[(int) (unsigned char) __c];
  }
# DEBUG BEGIN STMT;
<<cleanup_point <<< Unknown tree: expr_stmt
  std::ctype<char>::_M_widen_init ((const struct ctype *) this) >>>>>;
# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = OBJ_TYPE_REF(*(((const struct ctype *) this)->D.35526._vptr.facet + 48);(const struct ctype)(const struct ctype *) this->6) ((const struct ctype *) this, (int) __c)>>;


;; Function const char* std::ctype<char>::widen(const char*, const char*, std::ctype<char>::char_type*) const (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
if (((const struct ctype *) this)->_M_widen_ok == 1)
  {
    # DEBUG BEGIN STMT;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __builtin_memcpy ((void *) __to, (const void *) __lo, (long unsigned int) (__hi - __lo)) >>>>>;
    # DEBUG BEGIN STMT;
    return <retval> = __hi;
  }
# DEBUG BEGIN STMT;
if (((const struct ctype *) this)->_M_widen_ok == 0)
  {
    # DEBUG BEGIN STMT;
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::ctype<char>::_M_widen_init ((const struct ctype *) this) >>>>>;
  }
# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = OBJ_TYPE_REF(*(((const struct ctype *) this)->D.35526._vptr.facet + 56);(const struct ctype)(const struct ctype *) this->7) ((const struct ctype *) this, __lo, __hi, __to)>>;


;; Function char std::ctype<char>::narrow(std::ctype<char>::char_type, char) const (null)
;; enabled by -tree-original


{
  const char __t;

  # DEBUG BEGIN STMT;
  if (((const struct ctype *) this)->_M_narrow[(int) (unsigned char) __c] != 0)
    {
      # DEBUG BEGIN STMT;
      return <retval> = ((const struct ctype *) this)->_M_narrow[(int) (unsigned char) __c];
    }
  # DEBUG BEGIN STMT;
    const char __t;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__t = OBJ_TYPE_REF(*(((const struct ctype *) this)->D.35526._vptr.facet + 64);(const struct ctype)(const struct ctype *) this->8) ((const struct ctype *) this, (int) __c, (int) __dfault)) >>>>>;
  # DEBUG BEGIN STMT;
  if (__t != (const char) __dfault)
    {
      # DEBUG BEGIN STMT;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((const struct ctype *) this)->_M_narrow[(int) (unsigned char) __c] = (char) __t) >>>>>;
    }
  # DEBUG BEGIN STMT;
  return <retval> = (char) __t;
}


;; Function const char_type* std::ctype<char>::narrow(const char_type*, const char_type*, char, char*) const (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
if (__builtin_expect (((const struct ctype *) this)->_M_narrow_ok == 1, 1) != 0)
  {
    # DEBUG BEGIN STMT;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __builtin_memcpy ((void *) __to, (const void *) __lo, (long unsigned int) (__hi - __lo)) >>>>>;
    # DEBUG BEGIN STMT;
    return <retval> = __hi;
  }
# DEBUG BEGIN STMT;
if (((const struct ctype *) this)->_M_narrow_ok == 0)
  {
    # DEBUG BEGIN STMT;
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::ctype<char>::_M_narrow_init ((const struct ctype *) this) >>>>>;
  }
# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = OBJ_TYPE_REF(*(((const struct ctype *) this)->D.35526._vptr.facet + 72);(const struct ctype)(const struct ctype *) this->9) ((const struct ctype *) this, __lo, __hi, (int) __dfault, __to)>>;


;; Function const mask* std::ctype<char>::table() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = (const mask *) ((const struct ctype *) this)->_M_table;
   >>>;
__builtin_unreachable ();


;; Function virtual std::ctype<char>::char_type std::ctype<char>::do_widen(char) const (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
return <retval> = __c;


;; Function virtual const char* std::ctype<char>::do_widen(const char*, const char*, std::ctype<char>::char_type*) const (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) __builtin_memcpy ((void *) __to, (const void *) __lo, (long unsigned int) (__hi - __lo)) >>>>>;
# DEBUG BEGIN STMT;
return <retval> = __hi;


;; Function virtual char std::ctype<char>::do_narrow(std::ctype<char>::char_type, char) const (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
return <retval> = __c;


;; Function virtual const char_type* std::ctype<char>::do_narrow(const char_type*, const char_type*, char, char*) const (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) __builtin_memcpy ((void *) __to, (const void *) __lo, (long unsigned int) (__hi - __lo)) >>>>>;
# DEBUG BEGIN STMT;
return <retval> = __hi;


;; Function bool std::ctype<char>::is(std::ctype_base::mask, char) const (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
return <retval> = ((short unsigned int) *((const mask *) ((const struct ctype *) this)->_M_table + (sizetype) ((long unsigned int) (unsigned char) __c * 2)) & __m) != 0;


;; Function const char* std::ctype<char>::is(const char*, const char*, std::ctype_base::mask*) const (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
while (1)
  {
    if (__low >= __high) goto <D.35972>;
    # DEBUG BEGIN STMT;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__vec++  = (mask) *((const mask *) ((const struct ctype *) this)->_M_table + (sizetype) ((long unsigned int) (unsigned char) *__low++  * 2))) >>>>>;
  }
<D.35972>:;
# DEBUG BEGIN STMT;
return <retval> = __high;


;; Function const char* std::ctype<char>::scan_is(std::ctype_base::mask, const char*, const char*) const (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
while (1)
  {
    if (__low >= __high || ((short unsigned int) *((const mask *) ((const struct ctype *) this)->_M_table + (sizetype) ((long unsigned int) (unsigned char) *__low * 2)) & __m) != 0) goto <D.35980>;
    # DEBUG BEGIN STMT;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++__low >>>>>;
  }
<D.35980>:;
# DEBUG BEGIN STMT;
return <retval> = __low;


;; Function const char* std::ctype<char>::scan_not(std::ctype_base::mask, const char*, const char*) const (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
while (1)
  {
    if (__low >= __high || ((short unsigned int) *((const mask *) ((const struct ctype *) this)->_M_table + (sizetype) ((long unsigned int) (unsigned char) *__low * 2)) & __m) == 0) goto <D.35988>;
    # DEBUG BEGIN STMT;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++__low >>>>>;
  }
<D.35988>:;
# DEBUG BEGIN STMT;
return <retval> = __low;


;; Function void std::__uses_alloc0::_Sink::operator=(const void*) (null)
;; enabled by -tree-original





;; Function void std::tuple<>::swap(std::tuple<>&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  
   >>>;


;; Function void* std::_Any_data::_M_access() (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
return <retval> = (void *) &((union _Any_data * {ref-all}) this)->_M_pod_data[0];


;; Function const void* std::_Any_data::_M_access() const (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
return <retval> = (const void *) &((const union _Any_data * {ref-all}) this)->_M_pod_data[0];


;; Function std::_Function_base::_Function_base() (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    union _Any_data _M_functor;
    bool (*_Manager_type) (union _Any_data & {ref-all}, const union _Any_data & {ref-all}, _Manager_operation) _M_manager;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Function_base *) this)->_M_manager = 0B) >>>>>;
}


;; Function std::_Function_base::~_Function_base() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        # DEBUG BEGIN STMT;
        if (((struct _Function_base *) this)->_M_manager != 0B)
          {
            # DEBUG BEGIN STMT;
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) ((struct _Function_base *) this)->_M_manager ((union _Any_data & {ref-all}) &((struct _Function_base *) this)->_M_functor, (const union _Any_data & {ref-all}) &((struct _Function_base *) this)->_M_functor, __destroy_functor) >>>>>;
          }
      }
    finally
      {
        *(struct 
        {
          union _Any_data _M_functor;
          bool (*_Manager_type) (union _Any_data & {ref-all}, const union _Any_data & {ref-all}, _Manager_operation) _M_manager;
        } &) this = {CLOBBER};
      }
  }
  <D.52687>:;
   >>>;


;; Function bool std::_Function_base::_M_empty() const (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
return <retval> = (bool (*_Manager_type) (union _Any_data & {ref-all}, const union _Any_data & {ref-all}, _Manager_operation)) ((const struct _Function_base *) this)->_M_manager == 0B;


;; Function std::__detail::_Hash_node_base::_Hash_node_base() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct _Hash_node_base * _M_nxt;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Hash_node_base *) this)->_M_nxt = 0B) >>>>>;
  }
   >>>;


;; Function std::__detail::_Hash_node_base::_Hash_node_base(std::__detail::_Hash_node_base*) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct _Hash_node_base * _M_nxt;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Hash_node_base *) this)->_M_nxt = __next) >>>>>;
  }
   >>>;


;; Function std::__detail::_Mod_range_hashing::result_type std::__detail::_Mod_range_hashing::operator()(std::__detail::_Mod_range_hashing::first_argument_type, std::__detail::_Mod_range_hashing::second_argument_type) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = __num % __den;
   >>>;
__builtin_unreachable ();


;; Function std::__detail::_Prime_rehash_policy::_Prime_rehash_policy(float) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    float _M_max_load_factor;
    size_t _M_next_resize;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Prime_rehash_policy *) this)->_M_max_load_factor = __z) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Prime_rehash_policy *) this)->_M_next_resize = 0) >>>>>;
  }
   >>>;


;; Function float std::__detail::_Prime_rehash_policy::max_load_factor() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = (float) ((const struct _Prime_rehash_policy *) this)->_M_max_load_factor;
   >>>;
__builtin_unreachable ();


;; Function std::size_t std::__detail::_Prime_rehash_policy::_M_bkt_for_elements(std::size_t) const (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
return <retval> = (size_t) __builtin_ceil ((double) ((long double) __n / (long double) ((const struct _Prime_rehash_policy *) this)->_M_max_load_factor));


;; Function std::__detail::_Prime_rehash_policy::_State std::__detail::_Prime_rehash_policy::_M_state() const (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
return <retval> = ((const struct _Prime_rehash_policy *) this)->_M_next_resize;


;; Function void std::__detail::_Prime_rehash_policy::_M_reset() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Prime_rehash_policy *) this)->_M_next_resize = 0) >>>>>;
   >>>;


;; Function void std::__detail::_Prime_rehash_policy::_M_reset(std::__detail::_Prime_rehash_policy::_State) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Prime_rehash_policy *) this)->_M_next_resize = __state) >>>>>;


;; Function std::__detail::_Mask_range_hashing::result_type std::__detail::_Mask_range_hashing::operator()(std::__detail::_Mask_range_hashing::first_argument_type, std::__detail::_Mask_range_hashing::second_argument_type) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = __den + 18446744073709551615 & __num;
   >>>;
__builtin_unreachable ();


;; Function constexpr std::size_t std::__detail::__clp2(std::size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    uint_fast64_t __x = __n;

    # DEBUG BEGIN STMT;
        uint_fast64_t __x = __n;
    # DEBUG BEGIN STMT;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__x = __x + 18446744073709551615) >>>>>;
    # DEBUG BEGIN STMT;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__x = __x >> 1 | __x) >>>>>;
    # DEBUG BEGIN STMT;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__x = __x >> 2 | __x) >>>>>;
    # DEBUG BEGIN STMT;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__x = __x >> 4 | __x) >>>>>;
    # DEBUG BEGIN STMT;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__x = __x >> 8 | __x) >>>>>;
    # DEBUG BEGIN STMT;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__x = __x >> 16 | __x) >>>>>;
    # DEBUG BEGIN STMT;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__x = __x >> 32 | __x) >>>>>;
    # DEBUG BEGIN STMT;
    return <retval> = __x + 1;
  }
   >>>;
__builtin_unreachable ();


;; Function std::__detail::_Power2_rehash_policy::_Power2_rehash_policy(float) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    float _M_max_load_factor;
    size_t _M_next_resize;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Power2_rehash_policy *) this)->_M_max_load_factor = __z) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Power2_rehash_policy *) this)->_M_next_resize = 0) >>>>>;
  }
   >>>;


;; Function float std::__detail::_Power2_rehash_policy::max_load_factor() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = (float) ((const struct _Power2_rehash_policy *) this)->_M_max_load_factor;
   >>>;
__builtin_unreachable ();


;; Function constexpr const _Tp& std::min(const _Tp&, const _Tp&) [with _Tp = long unsigned int] (null)
;; enabled by -tree-original


if (*__b < *__a)
  {
    return <retval> = __b;
  }
return <retval> = __a;


;; Function std::size_t std::__detail::_Power2_rehash_policy::_M_next_bkt(std::size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    const long unsigned int __max_width = 8;
    const long unsigned int __max_bkt = 9223372036854775808;
    size_t __res;

    # DEBUG BEGIN STMT;
    <<cleanup_point     const long unsigned int __max_width = 8;>>;
    # DEBUG BEGIN STMT;
    <<cleanup_point     const long unsigned int __max_bkt = 9223372036854775808;>>;
    # DEBUG BEGIN STMT;
        size_t __res;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__res = std::__detail::__clp2 (__n)) >>>>>;
    # DEBUG BEGIN STMT;
    if (__res == __n)
      {
        # DEBUG BEGIN STMT;
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__res = __res << 1) >>>>>;
      }
    # DEBUG BEGIN STMT;
    if (__res == 0)
      {
        # DEBUG BEGIN STMT;
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__res = 9223372036854775808) >>>>>;
      }
    # DEBUG BEGIN STMT;
    if (__res == 9223372036854775808)
      {
        # DEBUG BEGIN STMT;
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Power2_rehash_policy *) this)->_M_next_resize = 18446744073709551615) >>>>>;
      }
    else
      {
        # DEBUG BEGIN STMT;
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Power2_rehash_policy *) this)->_M_next_resize = (size_t) __builtin_ceil ((double) ((long double) __res * (long double) ((struct _Power2_rehash_policy *) this)->_M_max_load_factor))) >>>>>;
      }
    # DEBUG BEGIN STMT;
    return <retval> = __res;
  }
   >>>;
__builtin_unreachable ();


;; Function std::size_t std::__detail::_Power2_rehash_policy::_M_bkt_for_elements(std::size_t) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = (size_t) __builtin_ceil ((double) ((long double) __n / (long double) ((const struct _Power2_rehash_policy *) this)->_M_max_load_factor));
   >>>;
__builtin_unreachable ();


;; Function constexpr const _Tp& std::max(const _Tp&, const _Tp&) [with _Tp = long unsigned int] (null)
;; enabled by -tree-original


if (*__a < *__b)
  {
    return <retval> = __b;
  }
return <retval> = __a;


;; Function static constexpr bool std::_PCC<<anonymous>, _T1, _T2>::_ConstructiblePair() [with _U1 = bool; _U2 = int; bool <anonymous> = true; _T1 = bool; _T2 = long unsigned int] (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function static constexpr bool std::_PCC<<anonymous>, _T1, _T2>::_ImplicitlyConvertiblePair() [with _U1 = bool; _U2 = int; bool <anonymous> = true; _T1 = bool; _T2 = long unsigned int] (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function static constexpr bool std::_PCC<<anonymous>, _T1, _T2>::_MoveConstructiblePair() [with _U1 = bool; _U2 = int; bool <anonymous> = true; _T1 = bool; _T2 = long unsigned int] (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function static constexpr bool std::_PCC<<anonymous>, _T1, _T2>::_ImplicitlyMoveConvertiblePair() [with _U1 = bool; _U2 = int; bool <anonymous> = true; _T1 = bool; _T2 = long unsigned int] (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function static constexpr bool std::_PCC<<anonymous>, _T1, _T2>::_ConstructiblePair() [with _U1 = bool; _U2 = int; bool <anonymous> = true; _T1 = bool; _T2 = int] (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function static constexpr bool std::_PCC<<anonymous>, _T1, _T2>::_ImplicitlyConvertiblePair() [with _U1 = bool; _U2 = int; bool <anonymous> = true; _T1 = bool; _T2 = int] (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function static constexpr bool std::_PCC<<anonymous>, _T1, _T2>::_MoveCopyPair() [with bool __implicit = true; _U1 = bool; _U2 = int; bool <anonymous> = true; _T1 = bool; _T2 = int] (null)
;; enabled by -tree-original


{
  typedef struct __do_converts __do_converts;
  typedef struct __converts __converts;

  return <retval> = 1;
}


;; Function static constexpr bool std::_PCC<<anonymous>, _T1, _T2>::_MoveCopyPair() [with bool __implicit = false; _U1 = bool; _U2 = int; bool <anonymous> = true; _T1 = bool; _T2 = int] (null)
;; enabled by -tree-original


{
  typedef struct __do_converts __do_converts;
  typedef struct __converts __converts;

  return <retval> = 0;
}


;; Function static constexpr bool std::_PCC<<anonymous>, _T1, _T2>::_CopyMovePair() [with bool __implicit = true; _U1 = bool; _U2 = int; bool <anonymous> = true; _T1 = bool; _T2 = int] (null)
;; enabled by -tree-original


{
  typedef struct __do_converts __do_converts;
  typedef struct __converts __converts;

  return <retval> = 1;
}


;; Function static constexpr bool std::_PCC<<anonymous>, _T1, _T2>::_CopyMovePair() [with bool __implicit = false; _U1 = bool; _U2 = int; bool <anonymous> = true; _T1 = bool; _T2 = int] (null)
;; enabled by -tree-original


{
  typedef struct __do_converts __do_converts;
  typedef struct __converts __converts;

  return <retval> = 0;
}


;; Function static constexpr bool std::_PCC<<anonymous>, _T1, _T2>::_MoveConstructiblePair() [with _U1 = bool; _U2 = int; bool <anonymous> = true; _T1 = bool; _T2 = int] (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function static constexpr bool std::_PCC<<anonymous>, _T1, _T2>::_ImplicitlyMoveConvertiblePair() [with _U1 = bool; _U2 = int; bool <anonymous> = true; _T1 = bool; _T2 = int] (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function constexpr _Tp&& std::forward(typename std::remove_reference<_Tp>::type&) [with _Tp = bool; typename std::remove_reference<_Tp>::type = bool] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (bool &) __t
   >>>;
__builtin_unreachable ();


;; Function constexpr _Tp&& std::forward(typename std::remove_reference<_Tp>::type&) [with _Tp = int; typename std::remove_reference<_Tp>::type = int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (int &) __t
   >>>;
__builtin_unreachable ();


;; Function constexpr std::pair<typename std::__decay_and_strip<_Tp>::__type, typename std::__decay_and_strip<_T2>::__type> std::make_pair(_T1&&, _T2&&) [with _T1 = bool; _T2 = int; typename std::__decay_and_strip<_T2>::__type = int; typename std::__decay_and_strip<_Tp>::__type = bool] (null)
;; enabled by -tree-original


{
  typedef __ds_type1 __ds_type1;
  typedef __ds_type2 __ds_type2;
  typedef struct __pair_type __pair_type;

  <<cleanup_point return <retval> = TARGET_EXPR <D.57086, <<< Unknown tree: aggr_init_expr
  6
  __ct_comp 
  D.57086
  (struct pair *) <<< Unknown tree: void_cst >>>
  std::forward<bool> ((type &) __x)
  std::forward<int> ((type &) __y) >>>>;, D.57086>>;
}


;; Function constexpr std::pair<_T1, _T2>::pair(_U1&&, _U2&&) [with _U1 = bool; _U2 = int; typename std::enable_if<(std::_PCC<true, _T1, _T2>::_MoveConstructiblePair<_U1, _U2>() && std::_PCC<true, _T1, _T2>::_ImplicitlyMoveConvertiblePair<_U1, _U2>()), bool>::type <anonymous> = 1; _T1 = bool; _T2 = int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    bool first;
    int second;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct pair *) this)->first = *std::forward<bool> ((type &) __x)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct pair *) this)->second = *std::forward<int> ((type &) __y)) >>>>>;
}


;; Function std::pair<bool, long unsigned int> std::__detail::_Power2_rehash_policy::_M_need_rehash(std::size_t, std::size_t, std::size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    # DEBUG BEGIN STMT;
    {
      if (__n_elt + __n_ins >= ((struct _Power2_rehash_policy *) this)->_M_next_resize)
        {
          {
            long double __min_bkts = (long double) (__n_elt + __n_ins) / (long double) ((struct _Power2_rehash_policy *) this)->_M_max_load_factor;

            # DEBUG BEGIN STMT;
                        long double __min_bkts = (long double) (__n_elt + __n_ins) / (long double) ((struct _Power2_rehash_policy *) this)->_M_max_load_factor;
            # DEBUG BEGIN STMT;
            if ((long double) __n_bkt <= __min_bkts)
              {
                # DEBUG BEGIN STMT;
                <<cleanup_point return <retval> = TARGET_EXPR <D.55284, std::make_pair<bool, long unsigned int> ((bool &) &TARGET_EXPR <D.55282, 1>, (long unsigned int &) &TARGET_EXPR <D.55283, std::__detail::_Power2_rehash_policy::_M_next_bkt ((struct _Power2_rehash_policy *) this, (long unsigned int) *std::max<long unsigned int> ((const long unsigned int &) &TARGET_EXPR <D.55230, (long unsigned int) (__builtin_floor ((double) __min_bkts) + 1.0e+0)>, (const long unsigned int &) &TARGET_EXPR <D.55231, __n_bkt * 2>))>)>>>;
              }
            # DEBUG BEGIN STMT;
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Power2_rehash_policy *) this)->_M_next_resize = (size_t) __builtin_floor ((double) ((long double) __n_bkt * (long double) ((struct _Power2_rehash_policy *) this)->_M_max_load_factor))) >>>>>;
            # DEBUG BEGIN STMT;
            <<cleanup_point return <retval> = TARGET_EXPR <D.57090, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.57090
  (struct pair *) <<< Unknown tree: void_cst >>>
  (struct pair &) &TARGET_EXPR <D.56361, TARGET_EXPR <D.57095, {.first=0, .second=0}>> >>>>;, D.57090>>;
          }
        }
      else
        {
          # DEBUG BEGIN STMT;
          <<cleanup_point return <retval> = TARGET_EXPR <D.57094, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.57094
  (struct pair *) <<< Unknown tree: void_cst >>>
  (struct pair &) &TARGET_EXPR <D.57093, TARGET_EXPR <D.57096, {.first=0, .second=0}>> >>>>;, D.57094>>;
        }
    }
  }
   >>>;
__builtin_unreachable ();


;; Function std::__detail::_Power2_rehash_policy::_State std::__detail::_Power2_rehash_policy::_M_state() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = (size_t) ((const struct _Power2_rehash_policy *) this)->_M_next_resize;
   >>>;
__builtin_unreachable ();


;; Function void std::__detail::_Power2_rehash_policy::_M_reset() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Power2_rehash_policy *) this)->_M_next_resize = 0) >>>>>;
   >>>;


;; Function void std::__detail::_Power2_rehash_policy::_M_reset(std::__detail::_Power2_rehash_policy::_State) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Power2_rehash_policy *) this)->_M_next_resize = __state) >>>>>;
   >>>;


;; Function constexpr std::nullopt_t::nullopt_t(std::nullopt_t::_Construct) (null)
;; enabled by -tree-original


{
  
}


;; Function std::bad_optional_access::bad_optional_access() (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      int (*) () * _vptr.exception;
    } D.59292;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::exception::exception (&((struct bad_optional_access *) this)->D.59291) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct bad_optional_access *) this)->D.59291._vptr.exception = &_ZTVSt19bad_optional_access + 16) >>>>>;
    }
  catch
    {
      std::exception::~exception (&((struct bad_optional_access *) this)->D.59291);
    }
}


;; Function virtual const char* std::bad_optional_access::what() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = (const char *) "bad optional access";
   >>>;
__builtin_unreachable ();


;; Function void std::__throw_bad_optional_access() (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point <<< Unknown tree: expr_stmt
  <<< Unknown tree: throw_expr
  <<cleanup_point TARGET_EXPR <D.59314, __cxa_allocate_exception (8)>;, *(struct bad_optional_access *) D.59314 = TARGET_EXPR <D.59311, <<< Unknown tree: aggr_init_expr
  4
  __ct_comp 
  D.59311
  (struct bad_optional_access *) <<< Unknown tree: void_cst >>> >>>>;>>;, __cxa_throw (D.59314, (void *) &_ZTISt19bad_optional_access, __dt_comp ); >>> >>>>>;


;; Function constexpr bool std::__call_is_nt(std::__invoke_other) [with _Fn = const std::hash<int>&; _Args = {const int&}] (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function constexpr std::integral_constant<_Tp, __v>::operator std::integral_constant<_Tp, __v>::value_type() const [with _Tp = bool; _Tp __v = true; std::integral_constant<_Tp, __v>::value_type = bool] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 1
   >>>;
__builtin_unreachable ();


;; Function std::_Bit_reference::_Bit_reference(std::_Bit_type*, std::_Bit_type) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    _Bit_type * _M_p;
    _Bit_type _M_mask;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Bit_reference *) this)->_M_p = __x) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Bit_reference *) this)->_M_mask = __y) >>>>>;
}


;; Function std::_Bit_reference::_Bit_reference() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    _Bit_type * _M_p;
    _Bit_type _M_mask;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Bit_reference *) this)->_M_p = 0B) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Bit_reference *) this)->_M_mask = 0) >>>>>;
  }
   >>>;


;; Function std::_Bit_reference::operator bool() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = (*(_Bit_type *) ((const struct _Bit_reference *) this)->_M_p & (long unsigned int) ((const struct _Bit_reference *) this)->_M_mask) != 0;
   >>>;
__builtin_unreachable ();


;; Function std::_Bit_reference& std::_Bit_reference::operator=(bool) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  if (__x)
    {
      # DEBUG BEGIN STMT;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*((struct _Bit_reference *) this)->_M_p = *((struct _Bit_reference *) this)->_M_p | ((struct _Bit_reference *) this)->_M_mask) >>>>>;
    }
  else
    {
      # DEBUG BEGIN STMT;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*((struct _Bit_reference *) this)->_M_p = *((struct _Bit_reference *) this)->_M_p & ~((struct _Bit_reference *) this)->_M_mask) >>>>>;
    }
  # DEBUG BEGIN STMT;
  return <retval> = (struct _Bit_reference &) this;
   >>>;
__builtin_unreachable ();


;; Function std::_Bit_reference& std::_Bit_reference::operator=(const std::_Bit_reference&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = std::_Bit_reference::operator= ((struct _Bit_reference *) this, (int) std::_Bit_reference::operator bool ((const struct _Bit_reference *) __x))>>;
   >>>;
__builtin_unreachable ();


;; Function bool std::_Bit_reference::operator==(const std::_Bit_reference&) const (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = std::_Bit_reference::operator bool ((const struct _Bit_reference *) this) == std::_Bit_reference::operator bool ((const struct _Bit_reference *) __x)>>;


;; Function bool std::_Bit_reference::operator<(const std::_Bit_reference&) const (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = !std::_Bit_reference::operator bool ((const struct _Bit_reference *) this) && std::_Bit_reference::operator bool ((const struct _Bit_reference *) __x)>>;


;; Function void std::_Bit_reference::flip() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*((struct _Bit_reference *) this)->_M_p = *((struct _Bit_reference *) this)->_M_p ^ ((struct _Bit_reference *) this)->_M_mask) >>>>>;
   >>>;


;; Function void std::swap(std::_Bit_reference, std::_Bit_reference) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    bool __tmp;

    # DEBUG BEGIN STMT;
        bool __tmp;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = std::_Bit_reference::operator bool (&__x)) >>>>>;
    # DEBUG BEGIN STMT;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::_Bit_reference::operator= (&__x, (const struct _Bit_reference &) &__y) >>>>>;
    # DEBUG BEGIN STMT;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::_Bit_reference::operator= (&__y, (int) __tmp) >>>>>;
  }
   >>>;


;; Function void std::swap(std::_Bit_reference, bool&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    bool __tmp;

    # DEBUG BEGIN STMT;
        bool __tmp;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = std::_Bit_reference::operator bool (&__x)) >>>>>;
    # DEBUG BEGIN STMT;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::_Bit_reference::operator= (&__x, (int) *__y) >>>>>;
    # DEBUG BEGIN STMT;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__y = __tmp) >>>>>;
  }
   >>>;


;; Function void std::swap(bool&, std::_Bit_reference) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    bool __tmp = *__x;

    # DEBUG BEGIN STMT;
        bool __tmp = *__x;
    # DEBUG BEGIN STMT;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__x = std::_Bit_reference::operator bool (&__y)) >>>>>;
    # DEBUG BEGIN STMT;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::_Bit_reference::operator= (&__y, (int) __tmp) >>>>>;
  }
   >>>;


;; Function std::_Bit_iterator_base::_Bit_iterator_base(std::_Bit_type*, unsigned int) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
    } D.72769;
    _Bit_type * _M_p;
    unsigned int _M_offset;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Bit_iterator_base *) this)->_M_p = __x) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Bit_iterator_base *) this)->_M_offset = __y) >>>>>;
}


;; Function void std::_Bit_iterator_base::_M_bump_up() (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
if (<<cleanup_point ((struct _Bit_iterator_base *) this)->_M_offset++  == 63>>)
  {
    # DEBUG BEGIN STMT;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Bit_iterator_base *) this)->_M_offset = 0) >>>>>;
    # DEBUG BEGIN STMT;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++((struct _Bit_iterator_base *) this)->_M_p >>>>>;
  }


;; Function void std::_Bit_iterator_base::_M_bump_down() (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
if (<<cleanup_point ((struct _Bit_iterator_base *) this)->_M_offset--  == 0>>)
  {
    # DEBUG BEGIN STMT;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Bit_iterator_base *) this)->_M_offset = 63) >>>>>;
    # DEBUG BEGIN STMT;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  --((struct _Bit_iterator_base *) this)->_M_p >>>>>;
  }


;; Function void std::_Bit_iterator_base::_M_incr(std::ptrdiff_t) (null)
;; enabled by -tree-original


{
  difference_type __n = (ptrdiff_t) ((struct _Bit_iterator_base *) this)->_M_offset + __i;

  # DEBUG BEGIN STMT;
    difference_type __n = (ptrdiff_t) ((struct _Bit_iterator_base *) this)->_M_offset + __i;
  # DEBUG BEGIN STMT;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Bit_iterator_base *) this)->_M_p = ((struct _Bit_iterator_base *) this)->_M_p + (sizetype) ((long unsigned int) (__n / 64) * 8)) >>>>>;
  # DEBUG BEGIN STMT;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__n = __n % 64) >>>>>;
  # DEBUG BEGIN STMT;
  if (__n < 0)
    {
      # DEBUG BEGIN STMT;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__n = __n + 64) >>>>>;
      # DEBUG BEGIN STMT;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  --((struct _Bit_iterator_base *) this)->_M_p >>>>>;
    }
  # DEBUG BEGIN STMT;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Bit_iterator_base *) this)->_M_offset = (unsigned int) __n) >>>>>;
}


;; Function bool std::_Bit_iterator_base::operator==(const std::_Bit_iterator_base&) const (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
return <retval> = (_Bit_type *) ((const struct _Bit_iterator_base *) this)->_M_p == (_Bit_type *) __i->_M_p && ((const struct _Bit_iterator_base *) this)->_M_offset == __i->_M_offset;


;; Function bool std::_Bit_iterator_base::operator<(const std::_Bit_iterator_base&) const (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
return <retval> = (_Bit_type *) ((const struct _Bit_iterator_base *) this)->_M_p < (_Bit_type *) __i->_M_p || (_Bit_type *) ((const struct _Bit_iterator_base *) this)->_M_p == (_Bit_type *) __i->_M_p && ((const struct _Bit_iterator_base *) this)->_M_offset < __i->_M_offset;


;; Function bool std::_Bit_iterator_base::operator!=(const std::_Bit_iterator_base&) const (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = !std::_Bit_iterator_base::operator== ((const struct _Bit_iterator_base *) this, __i)>>;


;; Function bool std::_Bit_iterator_base::operator>(const std::_Bit_iterator_base&) const (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = std::_Bit_iterator_base::operator< ((const struct _Bit_iterator_base *) __i, (const struct _Bit_iterator_base &) this)>>;


;; Function bool std::_Bit_iterator_base::operator<=(const std::_Bit_iterator_base&) const (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = !std::_Bit_iterator_base::operator< ((const struct _Bit_iterator_base *) __i, (const struct _Bit_iterator_base &) this)>>;


;; Function bool std::_Bit_iterator_base::operator>=(const std::_Bit_iterator_base&) const (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = !std::_Bit_iterator_base::operator< ((const struct _Bit_iterator_base *) this, __i)>>;


;; Function std::ptrdiff_t std::operator-(const std::_Bit_iterator_base&, const std::_Bit_iterator_base&) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
return <retval> = (((_Bit_type *) __x->_M_p - (_Bit_type *) __y->_M_p) * 8 + (long int) __x->_M_offset) - (long int) __y->_M_offset;


;; Function std::_Bit_iterator::_Bit_iterator() (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      struct 
      {
      } D.72769;
      _Bit_type * _M_p;
      unsigned int _M_offset;
    } D.72883;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::_Bit_iterator_base::_Bit_iterator_base (&((struct _Bit_iterator *) this)->D.72882, 0B, 0) >>>>>;
}


;; Function std::_Bit_iterator::_Bit_iterator(std::_Bit_type*, unsigned int) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      struct 
      {
      } D.72769;
      _Bit_type * _M_p;
      unsigned int _M_offset;
    } D.72883;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::_Bit_iterator_base::_Bit_iterator_base (&((struct _Bit_iterator *) this)->D.72882, __x, __y) >>>>>;
}


;; Function std::_Bit_iterator::iterator std::_Bit_iterator::_M_const_cast() const (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = TARGET_EXPR <D.72936, *(const struct _Bit_iterator &) this>>>;


;; Function std::_Bit_iterator::reference std::_Bit_iterator::operator*() const (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = TARGET_EXPR <D.72947, <<< Unknown tree: aggr_init_expr
  6
  __ct_comp 
  D.72947
  (struct _Bit_reference *) <<< Unknown tree: void_cst >>>
  (_Bit_type *) ((const struct _Bit_iterator *) this)->D.72882._M_p
  1 << (unsigned int) ((const struct _Bit_iterator *) this)->D.72882._M_offset >>>>;, D.72947>>;


;; Function std::_Bit_iterator::iterator& std::_Bit_iterator::operator++() (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point <<< Unknown tree: expr_stmt
  std::_Bit_iterator_base::_M_bump_up (&((struct _Bit_iterator *) this)->D.72882) >>>>>;
# DEBUG BEGIN STMT;
return <retval> = (struct iterator &) this;


;; Function std::_Bit_iterator::iterator std::_Bit_iterator::operator++(int) (null)
;; enabled by -tree-original


{
  struct iterator __tmp = *(const struct _Bit_iterator &) this;

  # DEBUG BEGIN STMT;
    struct iterator __tmp = *(const struct _Bit_iterator &) this;
  # DEBUG BEGIN STMT;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::_Bit_iterator_base::_M_bump_up (&((struct _Bit_iterator *) this)->D.72882) >>>>>;
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = TARGET_EXPR <D.72961, *(struct _Bit_iterator &) &__tmp>>>;
}


;; Function std::_Bit_iterator::iterator& std::_Bit_iterator::operator--() (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point <<< Unknown tree: expr_stmt
  std::_Bit_iterator_base::_M_bump_down (&((struct _Bit_iterator *) this)->D.72882) >>>>>;
# DEBUG BEGIN STMT;
return <retval> = (struct iterator &) this;


;; Function std::_Bit_iterator::iterator std::_Bit_iterator::operator--(int) (null)
;; enabled by -tree-original


{
  struct iterator __tmp = *(const struct _Bit_iterator &) this;

  # DEBUG BEGIN STMT;
    struct iterator __tmp = *(const struct _Bit_iterator &) this;
  # DEBUG BEGIN STMT;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::_Bit_iterator_base::_M_bump_down (&((struct _Bit_iterator *) this)->D.72882) >>>>>;
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = TARGET_EXPR <D.72966, *(struct _Bit_iterator &) &__tmp>>>;
}


;; Function std::_Bit_iterator::iterator& std::_Bit_iterator::operator+=(std::iterator<std::random_access_iterator_tag, bool>::difference_type) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point <<< Unknown tree: expr_stmt
  std::_Bit_iterator_base::_M_incr (&((struct _Bit_iterator *) this)->D.72882, __i) >>>>>;
# DEBUG BEGIN STMT;
return <retval> = (struct iterator &) this;


;; Function std::_Bit_iterator::iterator& std::_Bit_iterator::operator-=(std::iterator<std::random_access_iterator_tag, bool>::difference_type) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::_Bit_iterator::operator+= ((struct _Bit_iterator *) this, -NON_LVALUE_EXPR <__i>) >>>>>;
# DEBUG BEGIN STMT;
return <retval> = (struct iterator &) this;


;; Function std::_Bit_iterator::iterator std::_Bit_iterator::operator+(std::iterator<std::random_access_iterator_tag, bool>::difference_type) const (null)
;; enabled by -tree-original


{
  struct iterator __tmp = *(const struct _Bit_iterator &) this;

  # DEBUG BEGIN STMT;
    struct iterator __tmp = *(const struct _Bit_iterator &) this;
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = TARGET_EXPR <D.72972, *(const struct _Bit_iterator &) std::_Bit_iterator::operator+= (&__tmp, __i)>>>;
}


;; Function std::_Bit_iterator::iterator std::_Bit_iterator::operator-(std::iterator<std::random_access_iterator_tag, bool>::difference_type) const (null)
;; enabled by -tree-original


{
  struct iterator __tmp = *(const struct _Bit_iterator &) this;

  # DEBUG BEGIN STMT;
    struct iterator __tmp = *(const struct _Bit_iterator &) this;
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = TARGET_EXPR <D.72976, *(const struct _Bit_iterator &) std::_Bit_iterator::operator-= (&__tmp, __i)>>>;
}


;; Function std::_Bit_iterator::reference std::_Bit_iterator::operator[](std::iterator<std::random_access_iterator_tag, bool>::difference_type) const (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = TARGET_EXPR <D.72979, std::_Bit_iterator::operator* (&TARGET_EXPR <D.72978, std::_Bit_iterator::operator+ ((const struct _Bit_iterator *) this, __i)>)>>>;


;; Function std::_Bit_iterator std::operator+(std::ptrdiff_t, const std::_Bit_iterator&) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = TARGET_EXPR <D.72984, std::_Bit_iterator::operator+ ((const struct _Bit_iterator *) __x, __n)>>>;


;; Function std::_Bit_const_iterator::_Bit_const_iterator() (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      struct 
      {
      } D.72769;
      _Bit_type * _M_p;
      unsigned int _M_offset;
    } D.73048;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::_Bit_iterator_base::_Bit_iterator_base (&((struct _Bit_const_iterator *) this)->D.73047, 0B, 0) >>>>>;
}


;; Function std::_Bit_const_iterator::_Bit_const_iterator(std::_Bit_type*, unsigned int) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      struct 
      {
      } D.72769;
      _Bit_type * _M_p;
      unsigned int _M_offset;
    } D.73048;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::_Bit_iterator_base::_Bit_iterator_base (&((struct _Bit_const_iterator *) this)->D.73047, __x, __y) >>>>>;
}


;; Function std::_Bit_const_iterator::_Bit_const_iterator(const std::_Bit_iterator&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      struct 
      {
      } D.72769;
      _Bit_type * _M_p;
      unsigned int _M_offset;
    } D.73048;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::_Bit_iterator_base::_Bit_iterator_base (&((struct _Bit_const_iterator *) this)->D.73047, (_Bit_type *) ((const struct _Bit_iterator *) __x)->D.72882._M_p, (unsigned int) ((const struct _Bit_iterator *) __x)->D.72882._M_offset) >>>>>;
}


;; Function std::_Bit_iterator std::_Bit_const_iterator::_M_const_cast() const (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = TARGET_EXPR <D.73059, <<< Unknown tree: aggr_init_expr
  6
  __ct_comp 
  D.73059
  (struct _Bit_iterator *) <<< Unknown tree: void_cst >>>
  (_Bit_type *) ((const struct _Bit_const_iterator *) this)->D.73047._M_p
  (unsigned int) ((const struct _Bit_const_iterator *) this)->D.73047._M_offset >>>>;, D.73059>>;


;; Function std::_Bit_const_iterator::const_reference std::_Bit_const_iterator::operator*() const (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = std::_Bit_reference::operator bool (&TARGET_EXPR <D.73061, <<< Unknown tree: aggr_init_expr
  6
  __ct_comp 
  D.73061
  (struct _Bit_reference *) <<< Unknown tree: void_cst >>>
  (_Bit_type *) ((const struct _Bit_const_iterator *) this)->D.73047._M_p
  1 << (unsigned int) ((const struct _Bit_const_iterator *) this)->D.73047._M_offset >>>>)>>;


;; Function std::_Bit_const_iterator::const_iterator& std::_Bit_const_iterator::operator++() (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point <<< Unknown tree: expr_stmt
  std::_Bit_iterator_base::_M_bump_up (&((struct _Bit_const_iterator *) this)->D.73047) >>>>>;
# DEBUG BEGIN STMT;
return <retval> = (struct const_iterator &) this;


;; Function std::_Bit_const_iterator::const_iterator std::_Bit_const_iterator::operator++(int) (null)
;; enabled by -tree-original


{
  struct const_iterator __tmp = *(const struct _Bit_const_iterator &) this;

  # DEBUG BEGIN STMT;
    struct const_iterator __tmp = *(const struct _Bit_const_iterator &) this;
  # DEBUG BEGIN STMT;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::_Bit_iterator_base::_M_bump_up (&((struct _Bit_const_iterator *) this)->D.73047) >>>>>;
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = TARGET_EXPR <D.73093, *(struct _Bit_const_iterator &) &__tmp>>>;
}


;; Function std::_Bit_const_iterator::const_iterator& std::_Bit_const_iterator::operator--() (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point <<< Unknown tree: expr_stmt
  std::_Bit_iterator_base::_M_bump_down (&((struct _Bit_const_iterator *) this)->D.73047) >>>>>;
# DEBUG BEGIN STMT;
return <retval> = (struct const_iterator &) this;


;; Function std::_Bit_const_iterator::const_iterator std::_Bit_const_iterator::operator--(int) (null)
;; enabled by -tree-original


{
  struct const_iterator __tmp = *(const struct _Bit_const_iterator &) this;

  # DEBUG BEGIN STMT;
    struct const_iterator __tmp = *(const struct _Bit_const_iterator &) this;
  # DEBUG BEGIN STMT;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::_Bit_iterator_base::_M_bump_down (&((struct _Bit_const_iterator *) this)->D.73047) >>>>>;
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = TARGET_EXPR <D.73098, *(struct _Bit_const_iterator &) &__tmp>>>;
}


;; Function std::_Bit_const_iterator::const_iterator& std::_Bit_const_iterator::operator+=(std::iterator<std::random_access_iterator_tag, bool>::difference_type) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point <<< Unknown tree: expr_stmt
  std::_Bit_iterator_base::_M_incr (&((struct _Bit_const_iterator *) this)->D.73047, __i) >>>>>;
# DEBUG BEGIN STMT;
return <retval> = (struct const_iterator &) this;


;; Function std::_Bit_const_iterator::const_iterator& std::_Bit_const_iterator::operator-=(std::iterator<std::random_access_iterator_tag, bool>::difference_type) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::_Bit_const_iterator::operator+= ((struct _Bit_const_iterator *) this, -NON_LVALUE_EXPR <__i>) >>>>>;
# DEBUG BEGIN STMT;
return <retval> = (struct const_iterator &) this;


;; Function std::_Bit_const_iterator::const_iterator std::_Bit_const_iterator::operator+(std::iterator<std::random_access_iterator_tag, bool>::difference_type) const (null)
;; enabled by -tree-original


{
  struct const_iterator __tmp = *(const struct _Bit_const_iterator &) this;

  # DEBUG BEGIN STMT;
    struct const_iterator __tmp = *(const struct _Bit_const_iterator &) this;
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = TARGET_EXPR <D.73104, *(const struct _Bit_const_iterator &) std::_Bit_const_iterator::operator+= (&__tmp, __i)>>>;
}


;; Function std::_Bit_const_iterator::const_iterator std::_Bit_const_iterator::operator-(std::iterator<std::random_access_iterator_tag, bool>::difference_type) const (null)
;; enabled by -tree-original


{
  struct const_iterator __tmp = *(const struct _Bit_const_iterator &) this;

  # DEBUG BEGIN STMT;
    struct const_iterator __tmp = *(const struct _Bit_const_iterator &) this;
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = TARGET_EXPR <D.73108, *(const struct _Bit_const_iterator &) std::_Bit_const_iterator::operator-= (&__tmp, __i)>>>;
}


;; Function std::_Bit_const_iterator::const_reference std::_Bit_const_iterator::operator[](std::iterator<std::random_access_iterator_tag, bool>::difference_type) const (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = std::_Bit_const_iterator::operator* (&TARGET_EXPR <D.73110, std::_Bit_const_iterator::operator+ ((const struct _Bit_const_iterator *) this, __i)>)>>;


;; Function std::_Bit_const_iterator std::operator+(std::ptrdiff_t, const std::_Bit_const_iterator&) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point return <retval> = TARGET_EXPR <D.73115, std::_Bit_const_iterator::operator+ ((const struct _Bit_const_iterator *) __x, __n)>>>;


;; Function void std::__fill_bvector(std::_Bit_type*, unsigned int, unsigned int, bool) (null)
;; enabled by -tree-original


{
  const _Bit_type __fmask = 18446744073709551615 << __first;
  const _Bit_type __lmask = 18446744073709551615 >> 64 - __last;
  const _Bit_type __mask = (long unsigned int) __fmask & (long unsigned int) __lmask;

  # DEBUG BEGIN STMT;
    const _Bit_type __fmask = 18446744073709551615 << __first;
  # DEBUG BEGIN STMT;
    const _Bit_type __lmask = 18446744073709551615 >> 64 - __last;
  # DEBUG BEGIN STMT;
    const _Bit_type __mask = (long unsigned int) __fmask & (long unsigned int) __lmask;
  # DEBUG BEGIN STMT;
  if (__x)
    {
      # DEBUG BEGIN STMT;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__v = *__v | (_Bit_type) __mask) >>>>>;
    }
  else
    {
      # DEBUG BEGIN STMT;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__v = *__v & ~(long unsigned int) __mask) >>>>>;
    }
}


;; Function void std::fill(std::_Bit_iterator, std::_Bit_iterator, const bool&) (null)
;; enabled by -tree-original


{
  # DEBUG BEGIN STMT;
  {
    if (__first.D.72882._M_p != __last.D.72882._M_p)
      {
        {
          _Bit_type * __first_p = __first.D.72882._M_p;

          # DEBUG BEGIN STMT;
                    _Bit_type * __first_p = __first.D.72882._M_p;
          # DEBUG BEGIN STMT;
          if (__first.D.72882._M_offset != 0)
            {
              # DEBUG BEGIN STMT;
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__fill_bvector (__first_p++ , __first.D.72882._M_offset, 64, (int) *__x) >>>>>;
            }
          # DEBUG BEGIN STMT;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __builtin_memset ((void *) __first_p, (bool) *__x ? -1 : 0, (long unsigned int) (__last.D.72882._M_p - __first_p)) >>>>>;
          # DEBUG BEGIN STMT;
          if (__last.D.72882._M_offset != 0)
            {
              # DEBUG BEGIN STMT;
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__fill_bvector (__last.D.72882._M_p, 0, __last.D.72882._M_offset, (int) *__x) >>>>>;
            }
        }
      }
    else
      {
        # DEBUG BEGIN STMT;
        if (__first.D.72882._M_offset != __last.D.72882._M_offset)
          {
            # DEBUG BEGIN STMT;
            <<cleanup_point <<< Unknown tree: expr_stmt
  std::__fill_bvector (__first.D.72882._M_p, __first.D.72882._M_offset, __last.D.72882._M_offset, (int) *__x) >>>>>;
          }
      }
  }
}


;; Function constexpr std::size_t SOA::Typelist::typelist_impl::sum(std::index_sequence<>) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function constexpr std::size_t SOA::Typelist::typelist_impl::min(std::index_sequence<>) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 18446744073709551615;
   >>>;
__builtin_unreachable ();


;; Function static constexpr bool SOA::Typelist::typelist<ARGS>::empty() [with ARGS = {}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 1
   >>>;
__builtin_unreachable ();


;; Function static constexpr std::size_t SOA::Typelist::typelist<ARGS>::size() [with ARGS = {}; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function constexpr std::index_sequence<(std::is_same<NEEDLE, typename TL::at::type>::value) ? IDXS  long unsigned int(-1)...> SOA::Typelist::typelist_impl::_idx_if_found(std::index_sequence<_Idx ...>) [with NEEDLE = float; TL = SOA::Typelist::typelist<>; long unsigned int ...IDXS = {}; std::index_sequence<(std::is_same<NEEDLE, typename TL::at::type>::value) ? IDXS  long unsigned int(-1)...> = std::integer_sequence<long unsigned int>; std::index_sequence<_Idx ...> = std::integer_sequence<long unsigned int>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.75849, {}>>>
   >>>;
__builtin_unreachable ();


;; Function static constexpr std::size_t SOA::Typelist::typelist<ARGS>::find() [with T = float; ARGS = {}; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = 18446744073709551615>>
   >>>;
__builtin_unreachable ();


;; Function static constexpr bool SOA::Typelist::typelist<ARGS>::empty() [with ARGS = {int}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr std::size_t SOA::Typelist::typelist<ARGS>::size() [with ARGS = {int}; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 1
   >>>;
__builtin_unreachable ();


;; Function constexpr std::index_sequence<(std::is_same<NEEDLE, typename TL::at::type>::value) ? IDXS  long unsigned int(-1)...> SOA::Typelist::typelist_impl::_idx_if_found(std::index_sequence<_Idx ...>) [with NEEDLE = int; TL = SOA::Typelist::typelist<int>; long unsigned int ...IDXS = {0}; std::index_sequence<(std::is_same<NEEDLE, typename TL::at::type>::value) ? IDXS  long unsigned int(-1)...> = std::integer_sequence<long unsigned int, 0>; std::index_sequence<_Idx ...> = std::integer_sequence<long unsigned int, 0>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.75963, {}>>>
   >>>;
__builtin_unreachable ();


;; Function constexpr std::size_t SOA::Typelist::typelist_impl::min(std::index_sequence<HEAD, TAIL ...>) [with long unsigned int HEAD = 0; long unsigned int ...TAIL = {}; std::size_t = long unsigned int; std::index_sequence<HEAD, TAIL ...> = std::integer_sequence<long unsigned int, 0>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = 0>>
   >>>;
__builtin_unreachable ();


;; Function static constexpr std::size_t SOA::Typelist::typelist<ARGS>::find() [with T = int; ARGS = {int}; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = 0>>
   >>>;
__builtin_unreachable ();


;; Function constexpr std::index_sequence<(std::is_same<NEEDLE, typename TL::at::type>::value) ? IDXS  long unsigned int(-1)...> SOA::Typelist::typelist_impl::_idx_if_found(std::index_sequence<_Idx ...>) [with NEEDLE = float; TL = SOA::Typelist::typelist<int>; long unsigned int ...IDXS = {0}; std::index_sequence<(std::is_same<NEEDLE, typename TL::at::type>::value) ? IDXS  long unsigned int(-1)...> = std::integer_sequence<long unsigned int, 18446744073709551615>; std::index_sequence<_Idx ...> = std::integer_sequence<long unsigned int, 0>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.75996, {}>>>
   >>>;
__builtin_unreachable ();


;; Function constexpr std::size_t SOA::Typelist::typelist_impl::min(std::index_sequence<HEAD, TAIL ...>) [with long unsigned int HEAD = 18446744073709551615; long unsigned int ...TAIL = {}; std::size_t = long unsigned int; std::index_sequence<HEAD, TAIL ...> = std::integer_sequence<long unsigned int, 18446744073709551615>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = 18446744073709551615>>
   >>>;
__builtin_unreachable ();


;; Function static constexpr std::size_t SOA::Typelist::typelist<ARGS>::find() [with T = float; ARGS = {int}; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = 18446744073709551615>>
   >>>;
__builtin_unreachable ();


;; Function static constexpr bool SOA::Typelist::typelist<ARGS>::empty() [with ARGS = {int, bool}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr std::size_t SOA::Typelist::typelist<ARGS>::size() [with ARGS = {int, bool}; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 2
   >>>;
__builtin_unreachable ();


;; Function constexpr std::index_sequence<(std::is_same<NEEDLE, typename TL::at::type>::value) ? IDXS  long unsigned int(-1)...> SOA::Typelist::typelist_impl::_idx_if_found(std::index_sequence<_Idx ...>) [with NEEDLE = int; TL = SOA::Typelist::typelist<int, bool>; long unsigned int ...IDXS = {0, 1}; std::index_sequence<(std::is_same<NEEDLE, typename TL::at::type>::value) ? IDXS  long unsigned int(-1)...> = std::integer_sequence<long unsigned int, 0, 18446744073709551615>; std::index_sequence<_Idx ...> = std::integer_sequence<long unsigned int, 0, 1>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.76132, {}>>>
   >>>;
__builtin_unreachable ();


;; Function constexpr std::size_t SOA::Typelist::typelist_impl::min(std::index_sequence<HEAD, TAIL ...>) [with long unsigned int HEAD = 0; long unsigned int ...TAIL = {18446744073709551615}; std::size_t = long unsigned int; std::index_sequence<HEAD, TAIL ...> = std::integer_sequence<long unsigned int, 0, 18446744073709551615>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = 0>>
   >>>;
__builtin_unreachable ();


;; Function static constexpr std::size_t SOA::Typelist::typelist<ARGS>::find() [with T = int; ARGS = {int, bool}; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = 0>>
   >>>;
__builtin_unreachable ();


;; Function constexpr std::index_sequence<(std::is_same<NEEDLE, typename TL::at::type>::value) ? IDXS  long unsigned int(-1)...> SOA::Typelist::typelist_impl::_idx_if_found(std::index_sequence<_Idx ...>) [with NEEDLE = bool; TL = SOA::Typelist::typelist<int, bool>; long unsigned int ...IDXS = {0, 1}; std::index_sequence<(std::is_same<NEEDLE, typename TL::at::type>::value) ? IDXS  long unsigned int(-1)...> = std::integer_sequence<long unsigned int, 18446744073709551615, 1>; std::index_sequence<_Idx ...> = std::integer_sequence<long unsigned int, 0, 1>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.76165, {}>>>
   >>>;
__builtin_unreachable ();


;; Function constexpr std::size_t SOA::Typelist::typelist_impl::min(std::index_sequence<HEAD, TAIL ...>) [with long unsigned int HEAD = 1; long unsigned int ...TAIL = {}; std::size_t = long unsigned int; std::index_sequence<HEAD, TAIL ...> = std::integer_sequence<long unsigned int, 1>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = 1>>
   >>>;
__builtin_unreachable ();


;; Function constexpr std::size_t SOA::Typelist::typelist_impl::min(std::index_sequence<HEAD, TAIL ...>) [with long unsigned int HEAD = 18446744073709551615; long unsigned int ...TAIL = {1}; std::size_t = long unsigned int; std::index_sequence<HEAD, TAIL ...> = std::integer_sequence<long unsigned int, 18446744073709551615, 1>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = 1>>
   >>>;
__builtin_unreachable ();


;; Function static constexpr std::size_t SOA::Typelist::typelist<ARGS>::find() [with T = bool; ARGS = {int, bool}; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = 1>>
   >>>;
__builtin_unreachable ();


;; Function constexpr std::size_t SOA::Typelist::typelist_impl::sum(std::index_sequence<HEAD, TAIL ...>) [with long unsigned int HEAD = 0; long unsigned int ...TAIL = {}; std::size_t = long unsigned int; std::index_sequence<HEAD, TAIL ...> = std::integer_sequence<long unsigned int, 0>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = 0>>
   >>>;
__builtin_unreachable ();


;; Function constexpr std::size_t SOA::Typelist::typelist_impl::sum(std::index_sequence<HEAD, TAIL ...>) [with long unsigned int HEAD = 0; long unsigned int ...TAIL = {0}; std::size_t = long unsigned int; std::index_sequence<HEAD, TAIL ...> = std::integer_sequence<long unsigned int, 0, 0>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = 0>>
   >>>;
__builtin_unreachable ();


;; Function constexpr std::size_t SOA::Typelist::typelist_impl::sum(std::index_sequence<HEAD, TAIL ...>) [with long unsigned int HEAD = 0; long unsigned int ...TAIL = {0, 0}; std::size_t = long unsigned int; std::index_sequence<HEAD, TAIL ...> = std::integer_sequence<long unsigned int, 0, 0, 0>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = 0>>
   >>>;
__builtin_unreachable ();


;; Function static constexpr std::size_t SOA::Typelist::typelist<ARGS>::count() [with T = char; ARGS = {int, int, bool}; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = 0>>
   >>>;
__builtin_unreachable ();


;; Function constexpr std::size_t SOA::Typelist::typelist_impl::sum(std::index_sequence<HEAD, TAIL ...>) [with long unsigned int HEAD = 1; long unsigned int ...TAIL = {}; std::size_t = long unsigned int; std::index_sequence<HEAD, TAIL ...> = std::integer_sequence<long unsigned int, 1>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = 1>>
   >>>;
__builtin_unreachable ();


;; Function constexpr std::size_t SOA::Typelist::typelist_impl::sum(std::index_sequence<HEAD, TAIL ...>) [with long unsigned int HEAD = 0; long unsigned int ...TAIL = {1}; std::size_t = long unsigned int; std::index_sequence<HEAD, TAIL ...> = std::integer_sequence<long unsigned int, 0, 1>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = 1>>
   >>>;
__builtin_unreachable ();


;; Function constexpr std::size_t SOA::Typelist::typelist_impl::sum(std::index_sequence<HEAD, TAIL ...>) [with long unsigned int HEAD = 0; long unsigned int ...TAIL = {0, 1}; std::size_t = long unsigned int; std::index_sequence<HEAD, TAIL ...> = std::integer_sequence<long unsigned int, 0, 0, 1>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = 1>>
   >>>;
__builtin_unreachable ();


;; Function static constexpr std::size_t SOA::Typelist::typelist<ARGS>::count() [with T = bool; ARGS = {int, int, bool}; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = 1>>
   >>>;
__builtin_unreachable ();


;; Function constexpr std::size_t SOA::Typelist::typelist_impl::sum(std::index_sequence<HEAD, TAIL ...>) [with long unsigned int HEAD = 1; long unsigned int ...TAIL = {0}; std::size_t = long unsigned int; std::index_sequence<HEAD, TAIL ...> = std::integer_sequence<long unsigned int, 1, 0>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = 1>>
   >>>;
__builtin_unreachable ();


;; Function constexpr std::size_t SOA::Typelist::typelist_impl::sum(std::index_sequence<HEAD, TAIL ...>) [with long unsigned int HEAD = 1; long unsigned int ...TAIL = {1, 0}; std::size_t = long unsigned int; std::index_sequence<HEAD, TAIL ...> = std::integer_sequence<long unsigned int, 1, 1, 0>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = 2>>
   >>>;
__builtin_unreachable ();


;; Function static constexpr std::size_t SOA::Typelist::typelist<ARGS>::count() [with T = int; ARGS = {int, int, bool}; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = 2>>
   >>>;
__builtin_unreachable ();


;; Function constexpr std::size_t std::__deque_buf_size(std::size_t) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
return <retval> = __size <= 511 ? 512 / __size : 1;


;; Function static constexpr std::size_t SOA::Typelist::typelist<ARGS>::size() [with ARGS = {SOA::Typelist::__impl_compile_time_tests::<unnamed struct>, SOA::Typelist::__impl_compile_time_tests::<unnamed struct>, SOA::Typelist::__impl_compile_time_tests::<unnamed struct>, SOA::Typelist::__impl_compile_time_tests::<unnamed struct>, SOA::Typelist::__impl_compile_time_tests::<unnamed struct>}; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 5
   >>>;
__builtin_unreachable ();


;; Function constexpr std::index_sequence<(std::is_same<NEEDLE, typename TL::at::type>::value) ? IDXS  long unsigned int(-1)...> SOA::Typelist::typelist_impl::_idx_if_found(std::index_sequence<_Idx ...>) [with NEEDLE = SOA::Typelist::__impl_compile_time_tests::<unnamed struct>; TL = SOA::Typelist::typelist<SOA::Typelist::__impl_compile_time_tests::<unnamed struct>, SOA::Typelist::__impl_compile_time_tests::<unnamed struct>, SOA::Typelist::__impl_compile_time_tests::<unnamed struct>, SOA::Typelist::__impl_compile_time_tests::<unnamed struct>, SOA::Typelist::__impl_compile_time_tests::<unnamed struct> >; long unsigned int ...IDXS = {0, 1, 2, 3, 4}; std::index_sequence<(std::is_same<NEEDLE, typename TL::at::type>::value) ? IDXS  long unsigned int(-1)...> = std::integer_sequence<long unsigned int, 0, 18446744073709551615, 18446744073709551615, 18446744073709551615, 18446744073709551615>; std::index_sequence<_Idx ...> = std::integer_sequence<long unsigned int, 0, 1, 2, 3, 4>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.78640, {}>>>
   >>>;
__builtin_unreachable ();


;; Function constexpr std::size_t SOA::Typelist::typelist_impl::min(std::index_sequence<HEAD, TAIL ...>) [with long unsigned int HEAD = 18446744073709551615; long unsigned int ...TAIL = {18446744073709551615}; std::size_t = long unsigned int; std::index_sequence<HEAD, TAIL ...> = std::integer_sequence<long unsigned int, 18446744073709551615, 18446744073709551615>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = 18446744073709551615>>
   >>>;
__builtin_unreachable ();


;; Function constexpr std::size_t SOA::Typelist::typelist_impl::min(std::index_sequence<HEAD, TAIL ...>) [with long unsigned int HEAD = 18446744073709551615; long unsigned int ...TAIL = {18446744073709551615, 18446744073709551615}; std::size_t = long unsigned int; std::index_sequence<HEAD, TAIL ...> = std::integer_sequence<long unsigned int, 18446744073709551615, 18446744073709551615, 18446744073709551615>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = 18446744073709551615>>
   >>>;
__builtin_unreachable ();


;; Function constexpr std::size_t SOA::Typelist::typelist_impl::min(std::index_sequence<HEAD, TAIL ...>) [with long unsigned int HEAD = 18446744073709551615; long unsigned int ...TAIL = {18446744073709551615, 18446744073709551615, 18446744073709551615}; std::size_t = long unsigned int; std::index_sequence<HEAD, TAIL ...> = std::integer_sequence<long unsigned int, 18446744073709551615, 18446744073709551615, 18446744073709551615, 18446744073709551615>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = 18446744073709551615>>
   >>>;
__builtin_unreachable ();


;; Function constexpr std::size_t SOA::Typelist::typelist_impl::min(std::index_sequence<HEAD, TAIL ...>) [with long unsigned int HEAD = 0; long unsigned int ...TAIL = {18446744073709551615, 18446744073709551615, 18446744073709551615, 18446744073709551615}; std::size_t = long unsigned int; std::index_sequence<HEAD, TAIL ...> = std::integer_sequence<long unsigned int, 0, 18446744073709551615, 18446744073709551615, 18446744073709551615, 18446744073709551615>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = 0>>
   >>>;
__builtin_unreachable ();


;; Function static constexpr std::size_t SOA::Typelist::typelist<ARGS>::find() [with T = SOA::Typelist::__impl_compile_time_tests::<unnamed struct>; ARGS = {SOA::Typelist::__impl_compile_time_tests::<unnamed struct>, SOA::Typelist::__impl_compile_time_tests::<unnamed struct>, SOA::Typelist::__impl_compile_time_tests::<unnamed struct>, SOA::Typelist::__impl_compile_time_tests::<unnamed struct>, SOA::Typelist::__impl_compile_time_tests::<unnamed struct>}; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = 0>>
   >>>;
__builtin_unreachable ();


;; Function constexpr std::index_sequence<(std::is_same<NEEDLE, typename TL::at::type>::value) ? IDXS  long unsigned int(-1)...> SOA::Typelist::typelist_impl::_idx_if_found(std::index_sequence<_Idx ...>) [with NEEDLE = SOA::Typelist::__impl_compile_time_tests::<unnamed struct>; TL = SOA::Typelist::typelist<SOA::Typelist::__impl_compile_time_tests::<unnamed struct>, SOA::Typelist::__impl_compile_time_tests::<unnamed struct>, SOA::Typelist::__impl_compile_time_tests::<unnamed struct>, SOA::Typelist::__impl_compile_time_tests::<unnamed struct>, SOA::Typelist::__impl_compile_time_tests::<unnamed struct> >; long unsigned int ...IDXS = {0, 1, 2, 3, 4}; std::index_sequence<(std::is_same<NEEDLE, typename TL::at::type>::value) ? IDXS  long unsigned int(-1)...> = std::integer_sequence<long unsigned int, 18446744073709551615, 1, 18446744073709551615, 18446744073709551615, 18446744073709551615>; std::index_sequence<_Idx ...> = std::integer_sequence<long unsigned int, 0, 1, 2, 3, 4>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.78749, {}>>>
   >>>;
__builtin_unreachable ();


;; Function constexpr std::size_t SOA::Typelist::typelist_impl::min(std::index_sequence<HEAD, TAIL ...>) [with long unsigned int HEAD = 1; long unsigned int ...TAIL = {18446744073709551615, 18446744073709551615, 18446744073709551615}; std::size_t = long unsigned int; std::index_sequence<HEAD, TAIL ...> = std::integer_sequence<long unsigned int, 1, 18446744073709551615, 18446744073709551615, 18446744073709551615>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = 1>>
   >>>;
__builtin_unreachable ();


;; Function constexpr std::size_t SOA::Typelist::typelist_impl::min(std::index_sequence<HEAD, TAIL ...>) [with long unsigned int HEAD = 18446744073709551615; long unsigned int ...TAIL = {1, 18446744073709551615, 18446744073709551615, 18446744073709551615}; std::size_t = long unsigned int; std::index_sequence<HEAD, TAIL ...> = std::integer_sequence<long unsigned int, 18446744073709551615, 1, 18446744073709551615, 18446744073709551615, 18446744073709551615>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = 1>>
   >>>;
__builtin_unreachable ();


;; Function static constexpr std::size_t SOA::Typelist::typelist<ARGS>::find() [with T = SOA::Typelist::__impl_compile_time_tests::<unnamed struct>; ARGS = {SOA::Typelist::__impl_compile_time_tests::<unnamed struct>, SOA::Typelist::__impl_compile_time_tests::<unnamed struct>, SOA::Typelist::__impl_compile_time_tests::<unnamed struct>, SOA::Typelist::__impl_compile_time_tests::<unnamed struct>, SOA::Typelist::__impl_compile_time_tests::<unnamed struct>}; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = 1>>
   >>>;
__builtin_unreachable ();


;; Function constexpr std::index_sequence<(std::is_same<NEEDLE, typename TL::at::type>::value) ? IDXS  long unsigned int(-1)...> SOA::Typelist::typelist_impl::_idx_if_found(std::index_sequence<_Idx ...>) [with NEEDLE = SOA::Typelist::__impl_compile_time_tests::<unnamed struct>; TL = SOA::Typelist::typelist<SOA::Typelist::__impl_compile_time_tests::<unnamed struct>, SOA::Typelist::__impl_compile_time_tests::<unnamed struct>, SOA::Typelist::__impl_compile_time_tests::<unnamed struct>, SOA::Typelist::__impl_compile_time_tests::<unnamed struct>, SOA::Typelist::__impl_compile_time_tests::<unnamed struct> >; long unsigned int ...IDXS = {0, 1, 2, 3, 4}; std::index_sequence<(std::is_same<NEEDLE, typename TL::at::type>::value) ? IDXS  long unsigned int(-1)...> = std::integer_sequence<long unsigned int, 18446744073709551615, 18446744073709551615, 2, 18446744073709551615, 18446744073709551615>; std::index_sequence<_Idx ...> = std::integer_sequence<long unsigned int, 0, 1, 2, 3, 4>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.78818, {}>>>
   >>>;
__builtin_unreachable ();


;; Function constexpr std::size_t SOA::Typelist::typelist_impl::min(std::index_sequence<HEAD, TAIL ...>) [with long unsigned int HEAD = 2; long unsigned int ...TAIL = {18446744073709551615, 18446744073709551615}; std::size_t = long unsigned int; std::index_sequence<HEAD, TAIL ...> = std::integer_sequence<long unsigned int, 2, 18446744073709551615, 18446744073709551615>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = 2>>
   >>>;
__builtin_unreachable ();


;; Function constexpr std::size_t SOA::Typelist::typelist_impl::min(std::index_sequence<HEAD, TAIL ...>) [with long unsigned int HEAD = 18446744073709551615; long unsigned int ...TAIL = {2, 18446744073709551615, 18446744073709551615}; std::size_t = long unsigned int; std::index_sequence<HEAD, TAIL ...> = std::integer_sequence<long unsigned int, 18446744073709551615, 2, 18446744073709551615, 18446744073709551615>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = 2>>
   >>>;
__builtin_unreachable ();


;; Function constexpr std::size_t SOA::Typelist::typelist_impl::min(std::index_sequence<HEAD, TAIL ...>) [with long unsigned int HEAD = 18446744073709551615; long unsigned int ...TAIL = {18446744073709551615, 2, 18446744073709551615, 18446744073709551615}; std::size_t = long unsigned int; std::index_sequence<HEAD, TAIL ...> = std::integer_sequence<long unsigned int, 18446744073709551615, 18446744073709551615, 2, 18446744073709551615, 18446744073709551615>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = 2>>
   >>>;
__builtin_unreachable ();


;; Function static constexpr std::size_t SOA::Typelist::typelist<ARGS>::find() [with T = SOA::Typelist::__impl_compile_time_tests::<unnamed struct>; ARGS = {SOA::Typelist::__impl_compile_time_tests::<unnamed struct>, SOA::Typelist::__impl_compile_time_tests::<unnamed struct>, SOA::Typelist::__impl_compile_time_tests::<unnamed struct>, SOA::Typelist::__impl_compile_time_tests::<unnamed struct>, SOA::Typelist::__impl_compile_time_tests::<unnamed struct>}; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = 2>>
   >>>;
__builtin_unreachable ();


;; Function constexpr std::index_sequence<(std::is_same<NEEDLE, typename TL::at::type>::value) ? IDXS  long unsigned int(-1)...> SOA::Typelist::typelist_impl::_idx_if_found(std::index_sequence<_Idx ...>) [with NEEDLE = SOA::Typelist::__impl_compile_time_tests::<unnamed struct>; TL = SOA::Typelist::typelist<SOA::Typelist::__impl_compile_time_tests::<unnamed struct>, SOA::Typelist::__impl_compile_time_tests::<unnamed struct>, SOA::Typelist::__impl_compile_time_tests::<unnamed struct>, SOA::Typelist::__impl_compile_time_tests::<unnamed struct>, SOA::Typelist::__impl_compile_time_tests::<unnamed struct> >; long unsigned int ...IDXS = {0, 1, 2, 3, 4}; std::index_sequence<(std::is_same<NEEDLE, typename TL::at::type>::value) ? IDXS  long unsigned int(-1)...> = std::integer_sequence<long unsigned int, 18446744073709551615, 18446744073709551615, 18446744073709551615, 3, 18446744073709551615>; std::index_sequence<_Idx ...> = std::integer_sequence<long unsigned int, 0, 1, 2, 3, 4>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.78907, {}>>>
   >>>;
__builtin_unreachable ();


;; Function constexpr std::size_t SOA::Typelist::typelist_impl::min(std::index_sequence<HEAD, TAIL ...>) [with long unsigned int HEAD = 3; long unsigned int ...TAIL = {18446744073709551615}; std::size_t = long unsigned int; std::index_sequence<HEAD, TAIL ...> = std::integer_sequence<long unsigned int, 3, 18446744073709551615>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = 3>>
   >>>;
__builtin_unreachable ();


;; Function constexpr std::size_t SOA::Typelist::typelist_impl::min(std::index_sequence<HEAD, TAIL ...>) [with long unsigned int HEAD = 18446744073709551615; long unsigned int ...TAIL = {3, 18446744073709551615}; std::size_t = long unsigned int; std::index_sequence<HEAD, TAIL ...> = std::integer_sequence<long unsigned int, 18446744073709551615, 3, 18446744073709551615>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = 3>>
   >>>;
__builtin_unreachable ();


;; Function constexpr std::size_t SOA::Typelist::typelist_impl::min(std::index_sequence<HEAD, TAIL ...>) [with long unsigned int HEAD = 18446744073709551615; long unsigned int ...TAIL = {18446744073709551615, 3, 18446744073709551615}; std::size_t = long unsigned int; std::index_sequence<HEAD, TAIL ...> = std::integer_sequence<long unsigned int, 18446744073709551615, 18446744073709551615, 3, 18446744073709551615>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = 3>>
   >>>;
__builtin_unreachable ();


;; Function constexpr std::size_t SOA::Typelist::typelist_impl::min(std::index_sequence<HEAD, TAIL ...>) [with long unsigned int HEAD = 18446744073709551615; long unsigned int ...TAIL = {18446744073709551615, 18446744073709551615, 3, 18446744073709551615}; std::size_t = long unsigned int; std::index_sequence<HEAD, TAIL ...> = std::integer_sequence<long unsigned int, 18446744073709551615, 18446744073709551615, 18446744073709551615, 3, 18446744073709551615>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = 3>>
   >>>;
__builtin_unreachable ();


;; Function static constexpr std::size_t SOA::Typelist::typelist<ARGS>::find() [with T = SOA::Typelist::__impl_compile_time_tests::<unnamed struct>; ARGS = {SOA::Typelist::__impl_compile_time_tests::<unnamed struct>, SOA::Typelist::__impl_compile_time_tests::<unnamed struct>, SOA::Typelist::__impl_compile_time_tests::<unnamed struct>, SOA::Typelist::__impl_compile_time_tests::<unnamed struct>, SOA::Typelist::__impl_compile_time_tests::<unnamed struct>}; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = 3>>
   >>>;
__builtin_unreachable ();


;; Function constexpr std::index_sequence<(std::is_same<NEEDLE, typename TL::at::type>::value) ? IDXS  long unsigned int(-1)...> SOA::Typelist::typelist_impl::_idx_if_found(std::index_sequence<_Idx ...>) [with NEEDLE = SOA::Typelist::__impl_compile_time_tests::<unnamed struct>; TL = SOA::Typelist::typelist<SOA::Typelist::__impl_compile_time_tests::<unnamed struct>, SOA::Typelist::__impl_compile_time_tests::<unnamed struct>, SOA::Typelist::__impl_compile_time_tests::<unnamed struct>, SOA::Typelist::__impl_compile_time_tests::<unnamed struct>, SOA::Typelist::__impl_compile_time_tests::<unnamed struct> >; long unsigned int ...IDXS = {0, 1, 2, 3, 4}; std::index_sequence<(std::is_same<NEEDLE, typename TL::at::type>::value) ? IDXS  long unsigned int(-1)...> = std::integer_sequence<long unsigned int, 18446744073709551615, 18446744073709551615, 18446744073709551615, 18446744073709551615, 4>; std::index_sequence<_Idx ...> = std::integer_sequence<long unsigned int, 0, 1, 2, 3, 4>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.79016, {}>>>
   >>>;
__builtin_unreachable ();


;; Function constexpr std::size_t SOA::Typelist::typelist_impl::min(std::index_sequence<HEAD, TAIL ...>) [with long unsigned int HEAD = 4; long unsigned int ...TAIL = {}; std::size_t = long unsigned int; std::index_sequence<HEAD, TAIL ...> = std::integer_sequence<long unsigned int, 4>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = 4>>
   >>>;
__builtin_unreachable ();


;; Function constexpr std::size_t SOA::Typelist::typelist_impl::min(std::index_sequence<HEAD, TAIL ...>) [with long unsigned int HEAD = 18446744073709551615; long unsigned int ...TAIL = {4}; std::size_t = long unsigned int; std::index_sequence<HEAD, TAIL ...> = std::integer_sequence<long unsigned int, 18446744073709551615, 4>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = 4>>
   >>>;
__builtin_unreachable ();


;; Function constexpr std::size_t SOA::Typelist::typelist_impl::min(std::index_sequence<HEAD, TAIL ...>) [with long unsigned int HEAD = 18446744073709551615; long unsigned int ...TAIL = {18446744073709551615, 4}; std::size_t = long unsigned int; std::index_sequence<HEAD, TAIL ...> = std::integer_sequence<long unsigned int, 18446744073709551615, 18446744073709551615, 4>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = 4>>
   >>>;
__builtin_unreachable ();


;; Function constexpr std::size_t SOA::Typelist::typelist_impl::min(std::index_sequence<HEAD, TAIL ...>) [with long unsigned int HEAD = 18446744073709551615; long unsigned int ...TAIL = {18446744073709551615, 18446744073709551615, 4}; std::size_t = long unsigned int; std::index_sequence<HEAD, TAIL ...> = std::integer_sequence<long unsigned int, 18446744073709551615, 18446744073709551615, 18446744073709551615, 4>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = 4>>
   >>>;
__builtin_unreachable ();


;; Function constexpr std::size_t SOA::Typelist::typelist_impl::min(std::index_sequence<HEAD, TAIL ...>) [with long unsigned int HEAD = 18446744073709551615; long unsigned int ...TAIL = {18446744073709551615, 18446744073709551615, 18446744073709551615, 4}; std::size_t = long unsigned int; std::index_sequence<HEAD, TAIL ...> = std::integer_sequence<long unsigned int, 18446744073709551615, 18446744073709551615, 18446744073709551615, 18446744073709551615, 4>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = 4>>
   >>>;
__builtin_unreachable ();


;; Function static constexpr std::size_t SOA::Typelist::typelist<ARGS>::find() [with T = SOA::Typelist::__impl_compile_time_tests::<unnamed struct>; ARGS = {SOA::Typelist::__impl_compile_time_tests::<unnamed struct>, SOA::Typelist::__impl_compile_time_tests::<unnamed struct>, SOA::Typelist::__impl_compile_time_tests::<unnamed struct>, SOA::Typelist::__impl_compile_time_tests::<unnamed struct>, SOA::Typelist::__impl_compile_time_tests::<unnamed struct>}; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = 4>>
   >>>;
__builtin_unreachable ();


;; Function virtual const char* __gnu_cxx::__concurrence_lock_error::what() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = (const char *) "__gnu_cxx::__concurrence_lock_error";
   >>>;
__builtin_unreachable ();


;; Function virtual const char* __gnu_cxx::__concurrence_unlock_error::what() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = (const char *) "__gnu_cxx::__concurrence_unlock_error";
   >>>;
__builtin_unreachable ();


;; Function virtual const char* __gnu_cxx::__concurrence_broadcast_error::what() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = (const char *) "__gnu_cxx::__concurrence_broadcast_error";
   >>>;
__builtin_unreachable ();


;; Function virtual const char* __gnu_cxx::__concurrence_wait_error::what() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = (const char *) "__gnu_cxx::__concurrence_wait_error";
   >>>;
__builtin_unreachable ();


;; Function __gnu_cxx::__concurrence_lock_error::__concurrence_lock_error() (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::exception::exception (&((struct __concurrence_lock_error *) this)->D.79716) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __concurrence_lock_error *) this)->D.79716._vptr.exception = &_ZTVN9__gnu_cxx24__concurrence_lock_errorE + 16) >>>>>;
    }
  catch
    {
      std::exception::~exception (&((struct __concurrence_lock_error *) this)->D.79716);
    }
}


;; Function void __gnu_cxx::__throw_concurrence_lock_error() (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point <<< Unknown tree: expr_stmt
  <<< Unknown tree: throw_expr
  <<cleanup_point TARGET_EXPR <D.79814, __cxa_allocate_exception (8)>;, *(struct __concurrence_lock_error *) D.79814 = TARGET_EXPR <D.79813, <<< Unknown tree: aggr_init_expr
  4
  __ct_comp 
  D.79813
  (struct __concurrence_lock_error *) <<< Unknown tree: void_cst >>> >>>>;>>;, __cxa_throw (D.79814, (void *) &_ZTIN9__gnu_cxx24__concurrence_lock_errorE, __dt_comp ); >>> >>>>>;


;; Function __gnu_cxx::__concurrence_unlock_error::__concurrence_unlock_error() (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::exception::exception (&((struct __concurrence_unlock_error *) this)->D.79737) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __concurrence_unlock_error *) this)->D.79737._vptr.exception = &_ZTVN9__gnu_cxx26__concurrence_unlock_errorE + 16) >>>>>;
    }
  catch
    {
      std::exception::~exception (&((struct __concurrence_unlock_error *) this)->D.79737);
    }
}


;; Function void __gnu_cxx::__throw_concurrence_unlock_error() (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point <<< Unknown tree: expr_stmt
  <<< Unknown tree: throw_expr
  <<cleanup_point TARGET_EXPR <D.79845, __cxa_allocate_exception (8)>;, *(struct __concurrence_unlock_error *) D.79845 = TARGET_EXPR <D.79844, <<< Unknown tree: aggr_init_expr
  4
  __ct_comp 
  D.79844
  (struct __concurrence_unlock_error *) <<< Unknown tree: void_cst >>> >>>>;>>;, __cxa_throw (D.79845, (void *) &_ZTIN9__gnu_cxx26__concurrence_unlock_errorE, __dt_comp ); >>> >>>>>;


;; Function __gnu_cxx::__concurrence_broadcast_error::__concurrence_broadcast_error() (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::exception::exception (&((struct __concurrence_broadcast_error *) this)->D.79758) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __concurrence_broadcast_error *) this)->D.79758._vptr.exception = &_ZTVN9__gnu_cxx29__concurrence_broadcast_errorE + 16) >>>>>;
    }
  catch
    {
      std::exception::~exception (&((struct __concurrence_broadcast_error *) this)->D.79758);
    }
}


;; Function void __gnu_cxx::__throw_concurrence_broadcast_error() (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point <<< Unknown tree: expr_stmt
  <<< Unknown tree: throw_expr
  <<cleanup_point TARGET_EXPR <D.79876, __cxa_allocate_exception (8)>;, *(struct __concurrence_broadcast_error *) D.79876 = TARGET_EXPR <D.79875, <<< Unknown tree: aggr_init_expr
  4
  __ct_comp 
  D.79875
  (struct __concurrence_broadcast_error *) <<< Unknown tree: void_cst >>> >>>>;>>;, __cxa_throw (D.79876, (void *) &_ZTIN9__gnu_cxx29__concurrence_broadcast_errorE, __dt_comp ); >>> >>>>>;


;; Function __gnu_cxx::__concurrence_wait_error::__concurrence_wait_error() (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::exception::exception (&((struct __concurrence_wait_error *) this)->D.79779) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __concurrence_wait_error *) this)->D.79779._vptr.exception = &_ZTVN9__gnu_cxx24__concurrence_wait_errorE + 16) >>>>>;
    }
  catch
    {
      std::exception::~exception (&((struct __concurrence_wait_error *) this)->D.79779);
    }
}


;; Function void __gnu_cxx::__throw_concurrence_wait_error() (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point <<< Unknown tree: expr_stmt
  <<< Unknown tree: throw_expr
  <<cleanup_point TARGET_EXPR <D.79907, __cxa_allocate_exception (8)>;, *(struct __concurrence_wait_error *) D.79907 = TARGET_EXPR <D.79906, <<< Unknown tree: aggr_init_expr
  4
  __ct_comp 
  D.79906
  (struct __concurrence_wait_error *) <<< Unknown tree: void_cst >>> >>>>;>>;, __cxa_throw (D.79907, (void *) &_ZTIN9__gnu_cxx24__concurrence_wait_errorE, __dt_comp ); >>> >>>>>;


;; Function __gnu_cxx::__mutex::__mutex() (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    union __gthread_mutex_t _M_mutex = <<< Unknown tree: default_arg >>>;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __mutex *) this)->_M_mutex = {.__data={.__lock=0, .__count=0, .__owner=0, .__nusers=0, .__kind=0, .__spins=0, .__elision=0, .__list={.__prev=0B, .__next=0B}}}) >>>>>;
}


;; Function void __gnu_cxx::__mutex::lock() (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    # DEBUG BEGIN STMT;
    if (<<cleanup_point __gthread_mutex_lock (&((struct __mutex *) this)->_M_mutex) != 0>>)
      {
        # DEBUG BEGIN STMT;
        <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__throw_concurrence_lock_error () >>>>>;
      }
  }


;; Function void __gnu_cxx::__mutex::unlock() (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    # DEBUG BEGIN STMT;
    if (<<cleanup_point __gthread_mutex_unlock (&((struct __mutex *) this)->_M_mutex) != 0>>)
      {
        # DEBUG BEGIN STMT;
        <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__throw_concurrence_unlock_error () >>>>>;
      }
  }


;; Function __gthread_mutex_t* __gnu_cxx::__mutex::gthread_mutex() (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
return <retval> = &((struct __mutex *) this)->_M_mutex;


;; Function __gnu_cxx::__recursive_mutex::__recursive_mutex() (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    union __gthread_recursive_mutex_t _M_mutex = <<< Unknown tree: default_arg >>>;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __recursive_mutex *) this)->_M_mutex = {.__data={.__lock=0, .__count=0, .__owner=0, .__nusers=0, .__kind=1, .__spins=0, .__elision=0, .__list={.__prev=0B, .__next=0B}}}) >>>>>;
}


;; Function void __gnu_cxx::__recursive_mutex::lock() (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    # DEBUG BEGIN STMT;
    if (<<cleanup_point __gthread_recursive_mutex_lock (&((struct __recursive_mutex *) this)->_M_mutex) != 0>>)
      {
        # DEBUG BEGIN STMT;
        <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__throw_concurrence_lock_error () >>>>>;
      }
  }


;; Function void __gnu_cxx::__recursive_mutex::unlock() (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    # DEBUG BEGIN STMT;
    if (<<cleanup_point __gthread_recursive_mutex_unlock (&((struct __recursive_mutex *) this)->_M_mutex) != 0>>)
      {
        # DEBUG BEGIN STMT;
        <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__throw_concurrence_unlock_error () >>>>>;
      }
  }


;; Function __gthread_recursive_mutex_t* __gnu_cxx::__recursive_mutex::gthread_recursive_mutex() (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
return <retval> = &((struct __recursive_mutex *) this)->_M_mutex;


;; Function __gnu_cxx::__scoped_lock::__scoped_lock(__gnu_cxx::__scoped_lock::__mutex_type&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct __mutex_type & _M_device;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __scoped_lock *) this)->_M_device = __name) >>>>>;
  # DEBUG BEGIN STMT;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__mutex::lock ((struct __mutex_type *) ((struct __scoped_lock *) this)->_M_device) >>>>>;
}


;; Function __gnu_cxx::__scoped_lock::~__scoped_lock() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        # DEBUG BEGIN STMT;
        <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__mutex::unlock ((struct __mutex_type *) ((struct __scoped_lock *) this)->_M_device) >>>>>;
      }
    finally
      {
        *(struct 
        {
          struct __mutex_type & _M_device;
        } &) this = {CLOBBER};
      }
  }
  <D.80044>:;
   >>>;


;; Function __gnu_cxx::__cond::__cond() (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    union __gthread_cond_t _M_cond = <<< Unknown tree: default_arg >>>;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __cond *) this)->_M_cond = {.__data={.__lock=0, .__futex=0, .__total_seq=0, .__wakeup_seq=0, .__woken_seq=0, .__mutex=0B, .__nwaiters=0, .__broadcast_seq=0}}) >>>>>;
}


;; Function void __gnu_cxx::__cond::broadcast() (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    # DEBUG BEGIN STMT;
    if (<<cleanup_point __gthread_cond_broadcast (&((struct __cond *) this)->_M_cond) != 0>>)
      {
        # DEBUG BEGIN STMT;
        <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__throw_concurrence_broadcast_error () >>>>>;
      }
  }


;; Function void __gnu_cxx::__cond::wait(__gnu_cxx::__mutex*) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
# DEBUG BEGIN STMT;
if (<<cleanup_point __gthread_cond_wait (&((struct __cond *) this)->_M_cond, __gnu_cxx::__mutex::gthread_mutex (NON_LVALUE_EXPR <mutex>)) != 0>>)
  {
    # DEBUG BEGIN STMT;
    <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__throw_concurrence_wait_error () >>>>>;
  }


;; Function void __gnu_cxx::__cond::wait_recursive(__gnu_cxx::__recursive_mutex*) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
# DEBUG BEGIN STMT;
if (<<cleanup_point __gthread_cond_wait_recursive (&((struct __cond *) this)->_M_cond, __gnu_cxx::__recursive_mutex::gthread_recursive_mutex (NON_LVALUE_EXPR <mutex>)) != 0>>)
  {
    # DEBUG BEGIN STMT;
    <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__throw_concurrence_wait_error () >>>>>;
  }


;; Function std::bad_weak_ptr::bad_weak_ptr() (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::exception::exception (&((struct bad_weak_ptr *) this)->D.80927) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct bad_weak_ptr *) this)->D.80927._vptr.exception = &_ZTVSt12bad_weak_ptr + 16) >>>>>;
    }
  catch
    {
      std::exception::~exception (&((struct bad_weak_ptr *) this)->D.80927);
    }
}


;; Function void std::__throw_bad_weak_ptr() (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point <<< Unknown tree: expr_stmt
  <<< Unknown tree: throw_expr
  <<cleanup_point TARGET_EXPR <D.80952, __cxa_allocate_exception (8)>;, *(struct bad_weak_ptr *) D.80952 = TARGET_EXPR <D.80951, <<< Unknown tree: aggr_init_expr
  4
  __ct_comp 
  D.80951
  (struct bad_weak_ptr *) <<< Unknown tree: void_cst >>> >>>>;>>;, __cxa_throw (D.80952, (void *) &_ZTISt12bad_weak_ptr, __dt_comp ); >>> >>>>>;


;; Function void std::_Sp_counted_base<_Lp>::_M_add_ref_lock() [with __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0] (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
if (((struct _Sp_counted_base *) this)->_M_use_count == 0)
  {
    # DEBUG BEGIN STMT;
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_bad_weak_ptr () >>>>>;
  }
# DEBUG BEGIN STMT;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++((struct _Sp_counted_base *) this)->_M_use_count >>>>>;


;; Function void std::_Sp_counted_base<_Lp>::_M_add_ref_lock() [with __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)1] (null)
;; enabled by -tree-original


{
  struct __scoped_lock sentry;

  # DEBUG BEGIN STMT;
    struct __scoped_lock sentry;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__scoped_lock::__scoped_lock (&sentry, (struct __mutex_type &) &((struct _Sp_counted_base *) this)->D.81208.D.80971) >>>>>;
  try
    {
      # DEBUG BEGIN STMT;
      if (<<cleanup_point __gnu_cxx::__exchange_and_add_dispatch (&((struct _Sp_counted_base *) this)->_M_use_count, 1) == 0>>)
        {
          # DEBUG BEGIN STMT;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Sp_counted_base *) this)->_M_use_count = 0) >>>>>;
          # DEBUG BEGIN STMT;
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_bad_weak_ptr () >>>>>;
        }
    }
  finally
    {
      __gnu_cxx::__scoped_lock::~__scoped_lock (&sentry);
    }
}


;; Function void std::_Sp_counted_base<_Lp>::_M_add_ref_lock() [with __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)2] (null)
;; enabled by -tree-original


{
  _Atomic_word __count;

  # DEBUG BEGIN STMT;
    _Atomic_word __count;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__count = (_Atomic_word) std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_get_use_count ((struct _Sp_counted_base *) this)) >>>>>;
  # DEBUG BEGIN STMT;
  while (1)
    {
      # DEBUG BEGIN STMT;
      if (__count == 0)
        {
          # DEBUG BEGIN STMT;
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_bad_weak_ptr () >>>>>;
        }
      if (<<cleanup_point !__atomic_compare_exchange_4 ((volatile void *) &((struct _Sp_counted_base *) this)->_M_use_count, (void *) &__count, (unsigned int) (__count + 1), 1, 4, 0)>>) (void) 0; else goto <D.81372>;
    }
  <D.81372>:;
}


;; Function bool std::_Sp_counted_base<_Lp>::_M_add_ref_lock_nothrow() [with __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0] (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
if (((struct _Sp_counted_base *) this)->_M_use_count == 0)
  {
    # DEBUG BEGIN STMT;
    return <retval> = 0;
  }
# DEBUG BEGIN STMT;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++((struct _Sp_counted_base *) this)->_M_use_count >>>>>;
# DEBUG BEGIN STMT;
return <retval> = 1;


;; Function bool std::_Sp_counted_base<_Lp>::_M_add_ref_lock_nothrow() [with __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)1] (null)
;; enabled by -tree-original


{
  struct __scoped_lock sentry;

  # DEBUG BEGIN STMT;
    struct __scoped_lock sentry;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__scoped_lock::__scoped_lock (&sentry, (struct __mutex_type &) &((struct _Sp_counted_base *) this)->D.81208.D.80971) >>>>>;
  try
    {
      # DEBUG BEGIN STMT;
      if (<<cleanup_point __gnu_cxx::__exchange_and_add_dispatch (&((struct _Sp_counted_base *) this)->_M_use_count, 1) == 0>>)
        {
          # DEBUG BEGIN STMT;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Sp_counted_base *) this)->_M_use_count = 0) >>>>>;
          # DEBUG BEGIN STMT;
          return <retval> = 0;
        }
      # DEBUG BEGIN STMT;
      return <retval> = 1;
    }
  finally
    {
      __gnu_cxx::__scoped_lock::~__scoped_lock (&sentry);
    }
}


;; Function bool std::_Sp_counted_base<_Lp>::_M_add_ref_lock_nothrow() [with __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)2] (null)
;; enabled by -tree-original


{
  _Atomic_word __count;

  # DEBUG BEGIN STMT;
    _Atomic_word __count;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__count = (_Atomic_word) std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_get_use_count ((struct _Sp_counted_base *) this)) >>>>>;
  # DEBUG BEGIN STMT;
  while (1)
    {
      # DEBUG BEGIN STMT;
      if (__count == 0)
        {
          # DEBUG BEGIN STMT;
          return <retval> = 0;
        }
      if (<<cleanup_point !__atomic_compare_exchange_4 ((volatile void *) &((struct _Sp_counted_base *) this)->_M_use_count, (void *) &__count, (unsigned int) (__count + 1), 1, 4, 0)>>) (void) 0; else goto <D.81385>;
    }
  <D.81385>:;
  # DEBUG BEGIN STMT;
  return <retval> = 1;
}


;; Function void std::_Sp_counted_base<_Lp>::_M_add_ref_copy() [with __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0] (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++((struct _Sp_counted_base *) this)->_M_use_count >>>>>;


;; Function void std::_Sp_counted_base<_Lp>::_M_release() [with __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  if (<<cleanup_point  --((struct _Sp_counted_base *) this)->_M_use_count == 0>>)
    {
      # DEBUG BEGIN STMT;
      <<cleanup_point <<< Unknown tree: expr_stmt
  OBJ_TYPE_REF(*(((struct _Sp_counted_base *) this)->_vptr._Sp_counted_base + 16);(struct _Sp_counted_base)(struct _Sp_counted_base *) this->2) ((struct _Sp_counted_base *) this) >>>>>;
      # DEBUG BEGIN STMT;
      if (<<cleanup_point  --((struct _Sp_counted_base *) this)->_M_weak_count == 0>>)
        {
          # DEBUG BEGIN STMT;
          <<cleanup_point <<< Unknown tree: expr_stmt
  OBJ_TYPE_REF(*(((struct _Sp_counted_base *) this)->_vptr._Sp_counted_base + 24);(struct _Sp_counted_base)(struct _Sp_counted_base *) this->3) ((struct _Sp_counted_base *) this) >>>>>;
        }
    }
   >>>;


;; Function void std::_Sp_counted_base<_Lp>::_M_weak_add_ref() [with __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++((struct _Sp_counted_base *) this)->_M_weak_count >>>>>;
   >>>;


;; Function void std::_Sp_counted_base<_Lp>::_M_weak_release() [with __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  if (<<cleanup_point  --((struct _Sp_counted_base *) this)->_M_weak_count == 0>>)
    {
      # DEBUG BEGIN STMT;
      <<cleanup_point <<< Unknown tree: expr_stmt
  OBJ_TYPE_REF(*(((struct _Sp_counted_base *) this)->_vptr._Sp_counted_base + 24);(struct _Sp_counted_base)(struct _Sp_counted_base *) this->3) ((struct _Sp_counted_base *) this) >>>>>;
    }
   >>>;


;; Function long int std::_Sp_counted_base<_Lp>::_M_get_use_count() const [with __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = (long int) ((const struct _Sp_counted_base *) this)->_M_use_count;
   >>>;
__builtin_unreachable ();


;; Function void std::_Sp_counted_ptr<_Ptr, _Lp>::_M_dispose() [with _Ptr = std::nullptr_t; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  
   >>>;


;; Function void std::_Sp_counted_ptr<_Ptr, _Lp>::_M_dispose() [with _Ptr = std::nullptr_t; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)1] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  
   >>>;


;; Function void std::_Sp_counted_ptr<_Ptr, _Lp>::_M_dispose() [with _Ptr = std::nullptr_t; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)2] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  
   >>>;


;; Function constexpr std::memory_order std::operator|(std::memory_order, std::__memory_order_modifier) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
return <retval> = (memory_order) ((int) __m | (int) __mod);


;; Function constexpr std::memory_order std::operator&(std::memory_order, std::__memory_order_modifier) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
return <retval> = (memory_order) ((int) __m & (int) __mod);


;; Function constexpr std::memory_order std::__cmpexch_failure_order2(std::memory_order) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = __m != 4 ? __m != 3 ? __m : memory_order_relaxed : memory_order_acquire;
   >>>;
__builtin_unreachable ();


;; Function constexpr std::memory_order std::__cmpexch_failure_order(std::memory_order) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = (memory_order) ((int) std::__cmpexch_failure_order2 (std::operator& (__m, __memory_order_mask)) | (int) std::operator& (__m, __memory_order_modifier_mask))>>;
   >>>;
__builtin_unreachable ();


;; Function void std::atomic_thread_fence(std::memory_order) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __atomic_thread_fence ((int) __m) >>>>>;
   >>>;


;; Function void std::atomic_signal_fence(std::memory_order) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __atomic_signal_fence ((int) __m) >>>>>;
   >>>;


;; Function constexpr std::atomic_flag::atomic_flag(bool) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct __atomic_flag_base D.84006;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct atomic_flag *) this)->D.84005 = {._M_i=std::atomic_flag::_S_init ((int) __i)}) >>>>>;
  }
   >>>;


;; Function bool std::atomic_flag::test_and_set(std::memory_order) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = __atomic_test_and_set ((volatile void *) &((struct atomic_flag *) this)->D.84005._M_i, (int) __m)>>;
   >>>;
__builtin_unreachable ();


;; Function bool std::atomic_flag::test_and_set(std::memory_order) volatile (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = __atomic_test_and_set ((volatile void *) &((volatile struct atomic_flag *) this)->D.84005._M_i, (int) __m)>>;
   >>>;
__builtin_unreachable ();


;; Function void std::atomic_flag::clear(std::memory_order) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    memory_order __b;

    # DEBUG BEGIN STMT;
        memory_order __b;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__b = std::operator& (__m, __memory_order_mask)) >>>>>;
    # DEBUG BEGIN STMT;
    # DEBUG BEGIN STMT;
    # DEBUG BEGIN STMT;
    # DEBUG BEGIN STMT;
    <<cleanup_point <<< Unknown tree: expr_stmt
  __atomic_clear ((volatile void *) &((struct atomic_flag *) this)->D.84005._M_i, (int) __m) >>>>>;
  }
   >>>;


;; Function void std::atomic_flag::clear(std::memory_order) volatile (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    memory_order __b;

    # DEBUG BEGIN STMT;
        memory_order __b;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__b = std::operator& (__m, __memory_order_mask)) >>>>>;
    # DEBUG BEGIN STMT;
    # DEBUG BEGIN STMT;
    # DEBUG BEGIN STMT;
    # DEBUG BEGIN STMT;
    <<cleanup_point <<< Unknown tree: expr_stmt
  __atomic_clear ((volatile void *) &((volatile struct atomic_flag *) this)->D.84005._M_i, (int) __m) >>>>>;
  }
   >>>;


;; Function static constexpr std::__atomic_flag_data_type std::atomic_flag::_S_init(bool) (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
return <retval> = __i;


;; Function void* std::align(std::size_t, std::size_t, void*&, std::size_t&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    const long unsigned int __intptr = (uintptr_t) *__ptr;
    const long unsigned int __aligned = ((long unsigned int) __intptr + (long unsigned int) __align) + 18446744073709551615 & -NON_LVALUE_EXPR <__align>;
    const long unsigned int __diff = (long unsigned int) __aligned - (long unsigned int) __intptr;

    # DEBUG BEGIN STMT;
        const long unsigned int __intptr = (uintptr_t) *__ptr;
    # DEBUG BEGIN STMT;
        const long unsigned int __aligned = ((long unsigned int) __intptr + (long unsigned int) __align) + 18446744073709551615 & -NON_LVALUE_EXPR <__align>;
    # DEBUG BEGIN STMT;
        const long unsigned int __diff = (long unsigned int) __aligned - (long unsigned int) __intptr;
    # DEBUG BEGIN STMT;
    if (__size + (long unsigned int) __diff > *__space)
      {
        # DEBUG BEGIN STMT;
        return <retval> = 0B;
      }
    else
      {
        # DEBUG BEGIN STMT;
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__space = *__space - (long unsigned int) __diff) >>>>>;
        # DEBUG BEGIN STMT;
        <<cleanup_point return <retval> = *__ptr = (void *) __aligned>>;
      }
  }
   >>>;
__builtin_unreachable ();


;; Function void std::declare_reachable(void*) (null)
;; enabled by -tree-original





;; Function void std::declare_no_pointers(char*, std::size_t) (null)
;; enabled by -tree-original





;; Function void std::undeclare_no_pointers(char*, std::size_t) (null)
;; enabled by -tree-original





;; Function std::pointer_safety std::get_pointer_safety() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function constexpr bool SOA::Utils::ALL() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 1;
   >>>;
__builtin_unreachable ();


;; Function constexpr bool SOA::Utils::ANY() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = 0;
   >>>;
__builtin_unreachable ();


;; Function constexpr std::byte& std::operator|=(std::byte&, std::byte) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = *__l = (byte) ((unsigned char) *__l | (unsigned char) __r);, __l>>;
   >>>;
__builtin_unreachable ();


;; Function constexpr std::byte std::operator|(std::byte, std::byte) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = (byte) ((unsigned char) __l | (unsigned char) __r);
   >>>;
__builtin_unreachable ();


;; Function constexpr std::byte& std::operator&=(std::byte&, std::byte) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = *__l = (byte) ((unsigned char) *__l & (unsigned char) __r);, __l>>;
   >>>;
__builtin_unreachable ();


;; Function constexpr std::byte std::operator&(std::byte, std::byte) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = (byte) ((unsigned char) __l & (unsigned char) __r);
   >>>;
__builtin_unreachable ();


;; Function constexpr std::byte& std::operator^=(std::byte&, std::byte) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  <<cleanup_point return <retval> = *__l = (byte) ((unsigned char) *__l ^ (unsigned char) __r);, __l>>;
   >>>;
__builtin_unreachable ();


;; Function constexpr std::byte std::operator^(std::byte, std::byte) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = (byte) ((unsigned char) __l ^ (unsigned char) __r);
   >>>;
__builtin_unreachable ();


;; Function constexpr std::byte std::operator~(std::byte) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  # DEBUG BEGIN STMT;
  return <retval> = ~__b;
   >>>;
__builtin_unreachable ();


;; Function static constexpr std::size_t SOA::Typelist::typelist<ARGS>::count() [with T = f_vertex; ARGS = {f_vertex}; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = 1>>
   >>>;
__builtin_unreachable ();


;; Function constexpr bool SOA::Utils::ANY(HEAD, TAIL ...) [with HEAD = bool; TAIL = {}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = NON_LVALUE_EXPR <head>>>
   >>>;
__builtin_unreachable ();


;; Function static constexpr std::size_t SOA::Typelist::typelist<ARGS>::size() [with ARGS = {f_vertex}; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 1
   >>>;
__builtin_unreachable ();


;; Function constexpr std::index_sequence<(std::is_same<NEEDLE, typename TL::at::type>::value) ? IDXS  long unsigned int(-1)...> SOA::Typelist::typelist_impl::_idx_if_found(std::index_sequence<_Idx ...>) [with NEEDLE = f_vertex; TL = SOA::Typelist::typelist<f_vertex>; long unsigned int ...IDXS = {0}; std::index_sequence<(std::is_same<NEEDLE, typename TL::at::type>::value) ? IDXS  long unsigned int(-1)...> = std::integer_sequence<long unsigned int, 0>; std::index_sequence<_Idx ...> = std::integer_sequence<long unsigned int, 0>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.90333, {}>>>
   >>>;
__builtin_unreachable ();


;; Function static constexpr std::size_t SOA::Typelist::typelist<ARGS>::find() [with T = f_vertex; ARGS = {f_vertex}; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = 0>>
   >>>;
__builtin_unreachable ();


;; Function constexpr bool SOA::Utils::ALL(HEAD, TAIL ...) [with HEAD = bool; TAIL = {}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = NON_LVALUE_EXPR <head>>>
   >>>;
__builtin_unreachable ();


;; Function static constexpr bool std::_TC<<anonymous>, _Elements>::_ConstructibleTuple() [with _UElements = {vertex_t&}; bool <anonymous> = true; _Elements = {vertex_t&}] (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function static constexpr bool std::_TC<<anonymous>, _Elements>::_ImplicitlyConvertibleTuple() [with _UElements = {vertex_t&}; bool <anonymous> = true; _Elements = {vertex_t&}] (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function static constexpr bool std::_TC<<anonymous>, _Elements>::_NotSameTuple() [with _UElements = {vertex_t&}; bool <anonymous> = true; _Elements = {vertex_t&}] (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function static constexpr bool std::_TC<<anonymous>, _Elements>::_MoveConstructibleTuple() [with _UElements = {vertex_t&}; bool <anonymous> = true; _Elements = {vertex_t&}] (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function static constexpr bool std::_TC<<anonymous>, _Elements>::_ImplicitlyMoveConvertibleTuple() [with _UElements = {vertex_t&}; bool <anonymous> = true; _Elements = {vertex_t&}] (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function constexpr _Tp&& std::forward(typename std::remove_reference<_Tp>::type&) [with _Tp = vertex_t&; typename std::remove_reference<_Tp>::type = vertex_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (struct vertex_t &) __t
   >>>;
__builtin_unreachable ();


;; Function constexpr std::tuple<_Elements&& ...> std::forward_as_tuple(_Elements&& ...) [with _Elements = {vertex_t&}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return *<retval> = TARGET_EXPR <D.97082, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.97082
  (struct tuple *) <<< Unknown tree: void_cst >>>
  std::forward<vertex_t&> ((struct type &) __args#0) >>>>>>
   >>>;
__builtin_unreachable ();


;; Function static constexpr _Head& std::_Head_base<_Idx, _Head, false>::_M_head(std::_Head_base<_Idx, _Head, false>&) [with long unsigned int _Idx = 0; _Head = std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> >] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (struct vector &) &__b->_M_head_impl
   >>>;
__builtin_unreachable ();


;; Function static constexpr _Head& std::_Tuple_impl<_Idx, _Head>::_M_head(std::_Tuple_impl<_Idx, _Head>&) [with long unsigned int _Idx = 0; _Head = std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> >] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::_Head_base<0, std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> >, false>::_M_head ((struct _Head_base &) &((struct _Tuple_impl *) __t)->D.93464)>>
   >>>;
__builtin_unreachable ();


;; Function constexpr _Head& std::__get_helper(std::_Tuple_impl<_Idx, _Head, _Tail ...>&) [with long unsigned int __i = 0; _Head = std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> >; _Tail = {}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::_Tuple_impl<0, std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >::_M_head (__t)>>
   >>>;
__builtin_unreachable ();


;; Function constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >& std::get(std::tuple<_Elements ...>&) [with long unsigned int __i = 0; _Elements = {std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> >}; std::__tuple_element_t<__i, std::tuple<_Elements ...> > = std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> >] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (struct __tuple_element_t &) std::__get_helper<0, std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > > ((struct _Tuple_impl &) &((struct tuple *) __t)->D.94746)>>
   >>>;
__builtin_unreachable ();


;; Function static constexpr bool std::_TC<<anonymous>, _Elements>::_ConstructibleTuple() [with _UElements = {const vertex_t&}; bool <anonymous> = true; _Elements = {const vertex_t&}] (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function static constexpr bool std::_TC<<anonymous>, _Elements>::_ImplicitlyConvertibleTuple() [with _UElements = {const vertex_t&}; bool <anonymous> = true; _Elements = {const vertex_t&}] (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function static constexpr bool std::_TC<<anonymous>, _Elements>::_NotSameTuple() [with _UElements = {const vertex_t&}; bool <anonymous> = true; _Elements = {const vertex_t&}] (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function static constexpr bool std::_TC<<anonymous>, _Elements>::_MoveConstructibleTuple() [with _UElements = {const vertex_t&}; bool <anonymous> = true; _Elements = {const vertex_t&}] (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function static constexpr bool std::_TC<<anonymous>, _Elements>::_ImplicitlyMoveConvertibleTuple() [with _UElements = {const vertex_t&}; bool <anonymous> = true; _Elements = {const vertex_t&}] (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function constexpr _Tp&& std::forward(typename std::remove_reference<_Tp>::type&) [with _Tp = const vertex_t&; typename std::remove_reference<_Tp>::type = const vertex_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const struct vertex_t &) __t
   >>>;
__builtin_unreachable ();


;; Function constexpr std::tuple<_Elements&& ...> std::forward_as_tuple(_Elements&& ...) [with _Elements = {const vertex_t&}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return *<retval> = TARGET_EXPR <D.99220, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.99220
  (struct tuple *) <<< Unknown tree: void_cst >>>
  std::forward<const vertex_t&> ((const struct type &) __args#0) >>>>>>
   >>>;
__builtin_unreachable ();


;; Function static constexpr const _Head& std::_Head_base<_Idx, _Head, false>::_M_head(const std::_Head_base<_Idx, _Head, false>&) [with long unsigned int _Idx = 0; _Head = std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> >] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const struct vector &) &__b->_M_head_impl
   >>>;
__builtin_unreachable ();


;; Function static constexpr const _Head& std::_Tuple_impl<_Idx, _Head>::_M_head(const std::_Tuple_impl<_Idx, _Head>&) [with long unsigned int _Idx = 0; _Head = std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> >] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::_Head_base<0, std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> >, false>::_M_head ((const struct _Head_base &) &((const struct _Tuple_impl *) __t)->D.93464)>>
   >>>;
__builtin_unreachable ();


;; Function constexpr const _Head& std::__get_helper(const std::_Tuple_impl<_Idx, _Head, _Tail ...>&) [with long unsigned int __i = 0; _Head = std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> >; _Tail = {}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::_Tuple_impl<0, std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >::_M_head (__t)>>
   >>>;
__builtin_unreachable ();


;; Function constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >& std::get(const std::tuple<_Elements ...>&) [with long unsigned int __i = 0; _Elements = {std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> >}; std::__tuple_element_t<__i, std::tuple<_Elements ...> > = std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> >] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const struct __tuple_element_t &) std::__get_helper<0, std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > > ((const struct _Tuple_impl &) &((const struct tuple *) __t)->D.94746)>>
   >>>;
__builtin_unreachable ();


;; Function constexpr typename std::remove_reference<_Tp>::type&& std::move(_Tp&&) [with _Tp = SOA::ObjectProxy<SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::position>&; typename std::remove_reference<_Tp>::type = SOA::ObjectProxy<SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::position>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (struct type &) __t
   >>>;
__builtin_unreachable ();


;; Function constexpr _Tp&& std::forward(typename std::remove_reference<_Tp>::type&) [with _Tp = std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> >&&; typename std::remove_reference<_Tp>::type = std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> >] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (struct vector &) __t
   >>>;
__builtin_unreachable ();


;; Function constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >&& std::get(std::tuple<_Elements ...>&&) [with long unsigned int __i = 0; _Elements = {std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> >}; std::__tuple_element_t<__i, std::tuple<_Elements ...> > = std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> >] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    typedef struct __element_type __element_type;

    <<cleanup_point return <retval> = (struct __tuple_element_t &) std::forward<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> >&&> ((struct type &) std::get<0, std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > > ((struct tuple &) __t))>>;
  }
   >>>;
__builtin_unreachable ();


;; Function static constexpr bool std::_TC<<anonymous>, _Elements>::_ConstructibleTuple() [with _UElements = {vertex_t}; bool <anonymous> = true; _Elements = {vertex_t}] (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function static constexpr bool std::_TC<<anonymous>, _Elements>::_ImplicitlyConvertibleTuple() [with _UElements = {vertex_t}; bool <anonymous> = true; _Elements = {vertex_t}] (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function static constexpr bool std::_TC<<anonymous>, _Elements>::_NotSameTuple() [with _UElements = {const vertex_t&}; bool <anonymous> = true; _Elements = {vertex_t}] (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function static constexpr bool std::_TC<<anonymous>, _Elements>::_MoveConstructibleTuple() [with _UElements = {const vertex_t&}; bool <anonymous> = true; _Elements = {vertex_t}] (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function static constexpr bool std::_TC<<anonymous>, _Elements>::_ImplicitlyMoveConvertibleTuple() [with _UElements = {const vertex_t&}; bool <anonymous> = true; _Elements = {vertex_t}] (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function constexpr std::tuple<typename std::__decay_and_strip<_Elements>::__type ...> std::make_tuple(_Elements&& ...) [with _Elements = {const vertex_t&}] (null)
;; enabled by -tree-original


{
  typedef struct __result_type __result_type;

  <<cleanup_point return *<retval> = TARGET_EXPR <D.101412, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.101412
  (struct tuple *) <<< Unknown tree: void_cst >>>
  std::forward<const vertex_t&> ((const struct type &) __args#0) >>>>>>;
}


;; Function constexpr SOA::_View<STORAGE, SKIN, FIELDS>::SOAStorage* SOA::_View<STORAGE, SKIN, FIELDS>::position::stor() const [with STORAGE = std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >; SKIN = s_decayvertex; FIELDS = {f_vertex}; SOA::_View<STORAGE, SKIN, FIELDS>::SOAStorage = std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (struct SOAStorage *) ((const struct position *) this)->m_stor
   >>>;
__builtin_unreachable ();


;; Function constexpr SOA::_View<STORAGE, SKIN, FIELDS>::size_type SOA::_View<STORAGE, SKIN, FIELDS>::position::idx() const [with STORAGE = std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >; SKIN = s_decayvertex; FIELDS = {f_vertex}; SOA::_View<STORAGE, SKIN, FIELDS>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_type) ((const struct position *) this)->m_idx
   >>>;
__builtin_unreachable ();


;; Function constexpr decltype (get<MEMBERNO>((* declval<const POSITION&>().stor()))[declval<const POSITION&>().idx()]) SOA::ObjectProxy<POSITION>::get() const [with typename POSITION::parent_type::size_type MEMBERNO = 0; POSITION = SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::position; decltype (get<MEMBERNO>((* declval<const POSITION&>().stor()))[declval<const POSITION&>().idx()]) = vertex_t&] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (struct value_type &) std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> >::operator[] ((struct __tuple_element_t *) std::get<0, std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > > ((struct tuple &) SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::position::stor (&((const struct ObjectProxy *) this)->D.101625)), SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::position::idx (&((const struct ObjectProxy *) this)->D.101625))>>
   >>>;
__builtin_unreachable ();


;; Function static constexpr bool SOA::_View<STORAGE, SKIN, FIELDS>::is_contained_constant() [with RANGE = std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> >; STORAGE = std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >; SKIN = s_decayvertex; FIELDS = {f_vertex}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr bool SOA::_View<STORAGE, SKIN, FIELDS>::is_any_field_constant(const T<ARGS ...>*) [with T = std::tuple; ARGS = {std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> >}; STORAGE = std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >; SKIN = s_decayvertex; FIELDS = {f_vertex}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = 0>>
   >>>;
__builtin_unreachable ();


;; Function static constexpr bool std::tuple<_Elements>::_TC2<_Dummy>::_ImplicitlyDefaultConstructibleTuple() [with _Dummy = void; _Elements = {std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> >}] (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function static constexpr bool std::tuple<_Elements>::_TC2<_Dummy>::_DefaultConstructibleTuple() [with _Dummy = void; _Elements = {std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> >}] (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function static constexpr bool std::_TC<false, _Elements ...>::_NotSameTuple() [with _UElements = {}; _Elements = {std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> >}] (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function static constexpr bool std::_TC<false, _Elements ...>::_MoveConstructibleTuple() [with _UElements = {}; _Elements = {std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> >}] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static constexpr bool std::_TC<false, _Elements ...>::_ImplicitlyMoveConvertibleTuple() [with _UElements = {}; _Elements = {std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> >}] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static constexpr bool std::_TC<<anonymous>, _Elements>::_NotSameTuple() [with _UElements = {const std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >&}; bool <anonymous> = true; _Elements = {std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> >}] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static constexpr bool std::_TC<false, _Elements ...>::_MoveConstructibleTuple() [with _UElements = {const std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >&}; _Elements = {std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> >}] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static constexpr bool std::_TC<false, _Elements ...>::_ImplicitlyMoveConvertibleTuple() [with _UElements = {const std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >&}; _Elements = {std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> >}] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static constexpr bool std::_TC<false, _Elements ...>::_ConstructibleTuple() [with _UElements = {std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> >}; _Elements = {std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> >}] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static constexpr bool std::_TC<false, _Elements ...>::_ImplicitlyConvertibleTuple() [with _UElements = {std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> >}; _Elements = {std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> >}] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static constexpr bool std::_TC<<anonymous>, _Elements>::_NonNestedTuple() [with _SrcTuple = const std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >&; bool <anonymous> = true; _Elements = {std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> >}] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static constexpr bool std::_TC<<anonymous>, _Elements>::_NotSameTuple() [with _UElements = {std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >}; bool <anonymous> = true; _Elements = {std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> >}] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static constexpr bool std::_TC<false, _Elements ...>::_MoveConstructibleTuple() [with _UElements = {std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >}; _Elements = {std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> >}] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static constexpr bool std::_TC<false, _Elements ...>::_ImplicitlyMoveConvertibleTuple() [with _UElements = {std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >}; _Elements = {std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> >}] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static constexpr bool std::_TC<false, _Elements ...>::_MoveConstructibleTuple() [with _UElements = {std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> >}; _Elements = {std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> >}] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static constexpr bool std::_TC<false, _Elements ...>::_ImplicitlyMoveConvertibleTuple() [with _UElements = {std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> >}; _Elements = {std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> >}] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static constexpr bool std::_TC<<anonymous>, _Elements>::_NonNestedTuple() [with _SrcTuple = std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >&&; bool <anonymous> = true; _Elements = {std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> >}] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function SelectionView<const SOA::Container<std::vector, s_decayvertex>&>::~SelectionView() (null)
;; enabled by -tree-original


{
  try
    {
      try
        {
          
        }
      finally
        {
          std::vector<short unsigned int, std::allocator<short unsigned int> >::~vector (&((struct SelectionView *) this)->m_indices);
        }
    }
  finally
    {
      *(struct 
      {
        const struct container_t & m_container;
        struct index_vector m_indices;
      } &) this = {CLOBBER};
    }
}
<D.104289>:;


;; Function void foo(const SOA::Container<std::vector, s_decayvertex>&) (null)
;; enabled by -tree-original


{
  struct SelectionView S;
  struct SelectionView SS;
  typedef struct __lambda9 __lambda9;

  # DEBUG BEGIN STMT;
    struct SelectionView S;
  <<cleanup_point <<< Unknown tree: expr_stmt
  SelectionView<const SOA::Container<std::vector, s_decayvertex>&>::SelectionView (&S, (const struct container_t &) v) >>>>>;
  try
    {
      # DEBUG BEGIN STMT;
            struct SelectionView SS;
      <<cleanup_point <<< Unknown tree: expr_stmt
  SelectionView<const SOA::Container<std::vector, s_decayvertex>&>::SelectionView<foo(const SOA::Container<std::vector, s_decayvertex>&)::<lambda(auto:2)> > (&SS, (const struct SelectionView &) &S, (struct __lambda9 &) &TARGET_EXPR <D.104305, {}>) >>>>>;
      try
        {
          
        }
      finally
        {
          SelectionView<const SOA::Container<std::vector, s_decayvertex>&>::~SelectionView (&SS);
        }
    }
  finally
    {
      SelectionView<const SOA::Container<std::vector, s_decayvertex>&>::~SelectionView (&S);
    }
}


;; Function int main() (null)
;; enabled by -tree-original


# DEBUG BEGIN STMT;
return <retval> = 0;
return <retval> = 0;


;; Function static std::size_t std::_Hash_impl::hash(const _Tp&) [with _Tp = float; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) __val, 4, 3339675911)>>;


;; Function static std::size_t std::_Hash_impl::hash(const _Tp&) [with _Tp = double; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) __val, 8, 3339675911)>>;


;; Function constexpr std::basic_string_view<_CharT, _Traits>::basic_string_view(const _CharT*, std::basic_string_view<_CharT, _Traits>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_string_view<_CharT, _Traits>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    size_t _M_len;
    const char * _M_str;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string_view *) this)->_M_len = __len) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string_view *) this)->_M_str = __str) >>>>>;
  }
   >>>;


;; Function constexpr std::basic_string_view<_CharT, _Traits>::basic_string_view(const _CharT*, std::basic_string_view<_CharT, _Traits>::size_type) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; std::basic_string_view<_CharT, _Traits>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    size_t _M_len;
    const wchar_t * _M_str;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string_view *) this)->_M_len = __len) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string_view *) this)->_M_str = __str) >>>>>;
  }
   >>>;


;; Function constexpr std::basic_string_view<_CharT, _Traits>::basic_string_view(const _CharT*, std::basic_string_view<_CharT, _Traits>::size_type) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; std::basic_string_view<_CharT, _Traits>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    size_t _M_len;
    const char16_t * _M_str;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string_view *) this)->_M_len = __len) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string_view *) this)->_M_str = __str) >>>>>;
  }
   >>>;


;; Function constexpr std::basic_string_view<_CharT, _Traits>::basic_string_view(const _CharT*, std::basic_string_view<_CharT, _Traits>::size_type) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; std::basic_string_view<_CharT, _Traits>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    size_t _M_len;
    const char32_t * _M_str;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string_view *) this)->_M_len = __len) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string_view *) this)->_M_str = __str) >>>>>;
  }
   >>>;


;; Function const _CharT* std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::c_str() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const char *) std::__cxx11::basic_string<char>::_M_data ((const struct basic_string *) this)>>
   >>>;
__builtin_unreachable ();


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long int; _Ret = int; _CharT = char; _Base = {int}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int _M_errno;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long int; _Ret = int; _CharT = char; _Base = {int}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct 
        {
          int _M_errno;
        } &) this = {CLOBBER};
      }
  }
  <D.104379>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long int; _Ret = int; _CharT = char; _Base = {int}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long int; _Ret = int; _CharT = char; _Base = {int}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = (unsigned long) __val + 2147483648 > 4294967295;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = int; _CharT = char; _Base = {int}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  int __ret;
  char * __endptr;
  typedef struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef struct _Range_chk _Range_chk;
  const long int __tmp;

    int __ret;
    char * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = int; _CharT = char; _Base = {int}; std::size_t = long unsigned int]::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long int __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
      if ((const char *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = int; _CharT = char; _Base = {int}; std::size_t = long unsigned int]::_Range_chk::_S_chk ((long int) __tmp, TARGET_EXPR <D.104432, *(struct integral_constant &) &TARGET_EXPR <D.104398, {}>>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (int) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) (__endptr - __str)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = int; _CharT = char; _Base = {int}; std::size_t = long unsigned int]::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long int; _Ret = long int; _CharT = char; _Base = {int}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int _M_errno;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long int; _Ret = long int; _CharT = char; _Base = {int}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct 
        {
          int _M_errno;
        } &) this = {CLOBBER};
      }
  }
  <D.104469>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long int; _Ret = long int; _CharT = char; _Base = {int}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long int; _Ret = long int; _CharT = char; _Base = {int}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = (unsigned long) __val + 2147483648 > 4294967295;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = long int; _CharT = char; _Base = {int}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  long int __ret;
  char * __endptr;
  typedef struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef struct _Range_chk _Range_chk;
  const long int __tmp;

    long int __ret;
    char * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = long int; _CharT = char; _Base = {int}; std::size_t = long unsigned int]::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long int __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
      if ((const char *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = long int; _CharT = char; _Base = {int}; std::size_t = long unsigned int]::_Range_chk::_S_chk ((long int) __tmp, TARGET_EXPR <D.104511, *(struct integral_constant &) &TARGET_EXPR <D.104492, {}>>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (long int) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) (__endptr - __str)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = long int; _CharT = char; _Base = {int}; std::size_t = long unsigned int]::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = char; _Base = {int}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int _M_errno;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = char; _Base = {int}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct 
        {
          int _M_errno;
        } &) this = {CLOBBER};
      }
  }
  <D.104548>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = char; _Base = {int}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = char; _Base = {int}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = char; _Base = {int}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  long unsigned int __ret;
  char * __endptr;
  typedef struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef struct _Range_chk _Range_chk;
  const long unsigned int __tmp;

    long unsigned int __ret;
    char * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = char; _Base = {int}; std::size_t = long unsigned int]::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long unsigned int __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
      if ((const char *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = char; _Base = {int}; std::size_t = long unsigned int]::_Range_chk::_S_chk ((long unsigned int) __tmp, TARGET_EXPR <D.104577, *(struct integral_constant &) &TARGET_EXPR <D.104567, {}>>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (long unsigned int) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) (__endptr - __str)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = char; _Base = {int}; std::size_t = long unsigned int]::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long long int; _Ret = long long int; _CharT = char; _Base = {int}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int _M_errno;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long long int; _Ret = long long int; _CharT = char; _Base = {int}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct 
        {
          int _M_errno;
        } &) this = {CLOBBER};
      }
  }
  <D.104614>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long long int; _Ret = long long int; _CharT = char; _Base = {int}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long long int; _Ret = long long int; _CharT = char; _Base = {int}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = (unsigned long) __val + 2147483648 > 4294967295;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long int; _Ret = long long int; _CharT = char; _Base = {int}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaIxxcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  long long int __ret;
  char * __endptr;
  typedef struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef struct _Range_chk _Range_chk;
  const long long int __tmp;

    long long int __ret;
    char * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long int; _Ret = long long int; _CharT = char; _Base = {int}; std::size_t = long unsigned int]::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long long int __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
      if ((const char *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long int; _Ret = long long int; _CharT = char; _Base = {int}; std::size_t = long unsigned int]::_Range_chk::_S_chk ((long long int) __tmp, TARGET_EXPR <D.104647, *(struct integral_constant &) &TARGET_EXPR <D.104637, {}>>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (long long int) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) (__endptr - __str)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long int; _Ret = long long int; _CharT = char; _Base = {int}; std::size_t = long unsigned int]::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = char; _Base = {int}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int _M_errno;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = char; _Base = {int}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct 
        {
          int _M_errno;
        } &) this = {CLOBBER};
      }
  }
  <D.104684>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = char; _Base = {int}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = char; _Base = {int}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = char; _Base = {int}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaIyycJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  long long unsigned int __ret;
  char * __endptr;
  typedef struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef struct _Range_chk _Range_chk;
  const long long unsigned int __tmp;

    long long unsigned int __ret;
    char * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = char; _Base = {int}; std::size_t = long unsigned int]::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long long unsigned int __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
      if ((const char *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = char; _Base = {int}; std::size_t = long unsigned int]::_Range_chk::_S_chk ((long long unsigned int) __tmp, TARGET_EXPR <D.104717, *(struct integral_constant &) &TARGET_EXPR <D.104707, {}>>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (long long unsigned int) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) (__endptr - __str)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = char; _Base = {int}; std::size_t = long unsigned int]::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = float; _Ret = float; _CharT = char; _Base = {}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int _M_errno;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = float; _Ret = float; _CharT = char; _Base = {}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct 
        {
          int _M_errno;
        } &) this = {CLOBBER};
      }
  }
  <D.104754>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = float; _Ret = float; _CharT = char; _Base = {}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = float; _Ret = float; _CharT = char; _Base = {}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = __val < -2.147483648e+9 || __val > 2.147483648e+9;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = float; _Ret = float; _CharT = char; _Base = {}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  float __ret;
  char * __endptr;
  typedef struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef struct _Range_chk _Range_chk;
  const float __tmp;

    float __ret;
    char * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = float; _Ret = float; _CharT = char; _Base = {}; std::size_t = long unsigned int]::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const float __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr)) >>>>>;
      if ((const char *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = float; _Ret = float; _CharT = char; _Base = {}; std::size_t = long unsigned int]::_Range_chk::_S_chk ((float) __tmp, TARGET_EXPR <D.104783, *(struct integral_constant &) &TARGET_EXPR <D.104773, {}>>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (float) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) (__endptr - __str)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = float; _Ret = float; _CharT = char; _Base = {}; std::size_t = long unsigned int]::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = double; _Ret = double; _CharT = char; _Base = {}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int _M_errno;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = double; _Ret = double; _CharT = char; _Base = {}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct 
        {
          int _M_errno;
        } &) this = {CLOBBER};
      }
  }
  <D.104820>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = double; _Ret = double; _CharT = char; _Base = {}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = double; _Ret = double; _CharT = char; _Base = {}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = __val < -2.147483648e+9 || __val > 2.147483647e+9;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = double; _Ret = double; _CharT = char; _Base = {}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  double __ret;
  char * __endptr;
  typedef struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef struct _Range_chk _Range_chk;
  const double __tmp;

    double __ret;
    char * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = double; _Ret = double; _CharT = char; _Base = {}; std::size_t = long unsigned int]::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const double __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr)) >>>>>;
      if ((const char *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = double; _Ret = double; _CharT = char; _Base = {}; std::size_t = long unsigned int]::_Range_chk::_S_chk ((double) __tmp, TARGET_EXPR <D.104853, *(struct integral_constant &) &TARGET_EXPR <D.104843, {}>>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (double) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) (__endptr - __str)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = double; _Ret = double; _CharT = char; _Base = {}; std::size_t = long unsigned int]::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long double; _Ret = long double; _CharT = char; _Base = {}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int _M_errno;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long double; _Ret = long double; _CharT = char; _Base = {}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct 
        {
          int _M_errno;
        } &) this = {CLOBBER};
      }
  }
  <D.104890>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long double; _Ret = long double; _CharT = char; _Base = {}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long double; _Ret = long double; _CharT = char; _Base = {}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = __val < -2.147483648e+9 || __val > 2.147483647e+9;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long double; _Ret = long double; _CharT = char; _Base = {}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaIeecJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  long double __ret;
  char * __endptr;
  typedef struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef struct _Range_chk _Range_chk;
  const long double __tmp;

    long double __ret;
    char * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long double; _Ret = long double; _CharT = char; _Base = {}; std::size_t = long unsigned int]::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long double __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr)) >>>>>;
      if ((const char *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long double; _Ret = long double; _CharT = char; _Base = {}; std::size_t = long unsigned int]::_Range_chk::_S_chk ((long double) __tmp, TARGET_EXPR <D.104923, *(struct integral_constant &) &TARGET_EXPR <D.104913, {}>>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (long double) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) (__endptr - __str)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long double; _Ret = long double; _CharT = char; _Base = {}; std::size_t = long unsigned int]::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function _String __gnu_cxx::__to_xstring(int (*)(_CharT*, std::size_t, const _CharT*, __va_list_tag*), std::size_t, const _CharT*, ...) [with _String = std::__cxx11::basic_string<char>; _CharT = char; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


{
  char * __s;
  struct  __args[1];
  const int __len;

    char * __s;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__s = (char *) __builtin_alloca (NON_LVALUE_EXPR <__n>)) >>>>>;
    struct  __args[1];
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_start ((struct  *) &__args, __fmt) >>>>>;
    const int __len;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__len = __convf (__s, __n, __fmt, (struct  *) &__args)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_end ((struct  *) &__args) >>>>>;
  <<cleanup_point return *<retval> = TARGET_EXPR <D.105081, <<< Unknown tree: aggr_init_expr
  7
  __ct_comp 
  D.105081
  (struct basic_string *) <<< Unknown tree: void_cst >>>
  __s
  __s + (sizetype) __len
  (const struct allocator &) &TARGET_EXPR <D.105080, <<< Unknown tree: aggr_init_expr
  4
  __ct_comp 
  D.105080
  (struct allocator *) <<< Unknown tree: void_cst >>> >>>> >>>>>>;
}


;; Function std::__cxx11::basic_string<char>::_Alloc_hider::~_Alloc_hider() (null)
;; enabled by -tree-original


{
  try
    {
      try
        {
          
        }
      finally
        {
          std::allocator<char>::~allocator ((struct allocator *) this);
        }
    }
  finally
    {
      *(struct 
      {
        struct 
        {
          struct 
          {
          } D.14825;
        } D.22939;
        char * _M_p;
      } &) this = {CLOBBER};
    }
}
<D.105085>:;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::~basic_string() [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        try
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_dispose ((struct basic_string *) this) >>>>>;
          }
        finally
          {
            std::__cxx11::basic_string<char>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
          }
      }
    finally
      {
        *(struct 
        {
          struct _Alloc_hider _M_dataplus;
          size_type _M_string_length;
          union ._68 D.24258;
        } &) this = {CLOBBER};
      }
  }
  <D.105083>:;
   >>>;


;; Function const _CharT* std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::c_str() const [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const wchar_t *) std::__cxx11::basic_string<wchar_t>::_M_data ((const struct basic_string *) this)>>
   >>>;
__builtin_unreachable ();


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long int; _Ret = int; _CharT = wchar_t; _Base = {int}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int _M_errno;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long int; _Ret = int; _CharT = wchar_t; _Base = {int}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct 
        {
          int _M_errno;
        } &) this = {CLOBBER};
      }
  }
  <D.105132>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long int; _Ret = int; _CharT = wchar_t; _Base = {int}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long int; _Ret = int; _CharT = wchar_t; _Base = {int}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = (unsigned long) __val + 2147483648 > 4294967295;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = int; _CharT = wchar_t; _Base = {int}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaIliwJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  int __ret;
  wchar_t * __endptr;
  typedef struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef struct _Range_chk _Range_chk;
  const long int __tmp;

    int __ret;
    wchar_t * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = int; _CharT = wchar_t; _Base = {int}; std::size_t = long unsigned int]::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long int __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
      if ((const wchar_t *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = int; _CharT = wchar_t; _Base = {int}; std::size_t = long unsigned int]::_Range_chk::_S_chk ((long int) __tmp, TARGET_EXPR <D.105152, *(struct integral_constant &) &TARGET_EXPR <D.105151, {}>>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (int) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) ((__endptr - __str) /[ex] 4)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = int; _CharT = wchar_t; _Base = {int}; std::size_t = long unsigned int]::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long int; _Ret = long int; _CharT = wchar_t; _Base = {int}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int _M_errno;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long int; _Ret = long int; _CharT = wchar_t; _Base = {int}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct 
        {
          int _M_errno;
        } &) this = {CLOBBER};
      }
  }
  <D.105189>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long int; _Ret = long int; _CharT = wchar_t; _Base = {int}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long int; _Ret = long int; _CharT = wchar_t; _Base = {int}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = (unsigned long) __val + 2147483648 > 4294967295;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = long int; _CharT = wchar_t; _Base = {int}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaIllwJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  long int __ret;
  wchar_t * __endptr;
  typedef struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef struct _Range_chk _Range_chk;
  const long int __tmp;

    long int __ret;
    wchar_t * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = long int; _CharT = wchar_t; _Base = {int}; std::size_t = long unsigned int]::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long int __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
      if ((const wchar_t *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = long int; _CharT = wchar_t; _Base = {int}; std::size_t = long unsigned int]::_Range_chk::_S_chk ((long int) __tmp, TARGET_EXPR <D.105209, *(struct integral_constant &) &TARGET_EXPR <D.105208, {}>>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (long int) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) ((__endptr - __str) /[ex] 4)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = long int; _CharT = wchar_t; _Base = {int}; std::size_t = long unsigned int]::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = wchar_t; _Base = {int}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int _M_errno;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = wchar_t; _Base = {int}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct 
        {
          int _M_errno;
        } &) this = {CLOBBER};
      }
  }
  <D.105246>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = wchar_t; _Base = {int}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = wchar_t; _Base = {int}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = wchar_t; _Base = {int}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaImmwJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  long unsigned int __ret;
  wchar_t * __endptr;
  typedef struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef struct _Range_chk _Range_chk;
  const long unsigned int __tmp;

    long unsigned int __ret;
    wchar_t * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = wchar_t; _Base = {int}; std::size_t = long unsigned int]::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long unsigned int __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
      if ((const wchar_t *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = wchar_t; _Base = {int}; std::size_t = long unsigned int]::_Range_chk::_S_chk ((long unsigned int) __tmp, TARGET_EXPR <D.105266, *(struct integral_constant &) &TARGET_EXPR <D.105265, {}>>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (long unsigned int) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) ((__endptr - __str) /[ex] 4)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = wchar_t; _Base = {int}; std::size_t = long unsigned int]::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long long int; _Ret = long long int; _CharT = wchar_t; _Base = {int}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int _M_errno;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long long int; _Ret = long long int; _CharT = wchar_t; _Base = {int}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct 
        {
          int _M_errno;
        } &) this = {CLOBBER};
      }
  }
  <D.105303>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long long int; _Ret = long long int; _CharT = wchar_t; _Base = {int}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long long int; _Ret = long long int; _CharT = wchar_t; _Base = {int}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = (unsigned long) __val + 2147483648 > 4294967295;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long int; _Ret = long long int; _CharT = wchar_t; _Base = {int}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaIxxwJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  long long int __ret;
  wchar_t * __endptr;
  typedef struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef struct _Range_chk _Range_chk;
  const long long int __tmp;

    long long int __ret;
    wchar_t * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long int; _Ret = long long int; _CharT = wchar_t; _Base = {int}; std::size_t = long unsigned int]::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long long int __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
      if ((const wchar_t *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long int; _Ret = long long int; _CharT = wchar_t; _Base = {int}; std::size_t = long unsigned int]::_Range_chk::_S_chk ((long long int) __tmp, TARGET_EXPR <D.105323, *(struct integral_constant &) &TARGET_EXPR <D.105322, {}>>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (long long int) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) ((__endptr - __str) /[ex] 4)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long int; _Ret = long long int; _CharT = wchar_t; _Base = {int}; std::size_t = long unsigned int]::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = wchar_t; _Base = {int}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int _M_errno;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = wchar_t; _Base = {int}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct 
        {
          int _M_errno;
        } &) this = {CLOBBER};
      }
  }
  <D.105360>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = wchar_t; _Base = {int}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = wchar_t; _Base = {int}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = wchar_t; _Base = {int}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaIyywJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  long long unsigned int __ret;
  wchar_t * __endptr;
  typedef struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef struct _Range_chk _Range_chk;
  const long long unsigned int __tmp;

    long long unsigned int __ret;
    wchar_t * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = wchar_t; _Base = {int}; std::size_t = long unsigned int]::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long long unsigned int __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
      if ((const wchar_t *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = wchar_t; _Base = {int}; std::size_t = long unsigned int]::_Range_chk::_S_chk ((long long unsigned int) __tmp, TARGET_EXPR <D.105380, *(struct integral_constant &) &TARGET_EXPR <D.105379, {}>>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (long long unsigned int) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) ((__endptr - __str) /[ex] 4)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = wchar_t; _Base = {int}; std::size_t = long unsigned int]::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = float; _Ret = float; _CharT = wchar_t; _Base = {}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int _M_errno;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = float; _Ret = float; _CharT = wchar_t; _Base = {}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct 
        {
          int _M_errno;
        } &) this = {CLOBBER};
      }
  }
  <D.105417>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = float; _Ret = float; _CharT = wchar_t; _Base = {}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = float; _Ret = float; _CharT = wchar_t; _Base = {}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = __val < -2.147483648e+9 || __val > 2.147483648e+9;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = float; _Ret = float; _CharT = wchar_t; _Base = {}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaIffwJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  float __ret;
  wchar_t * __endptr;
  typedef struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef struct _Range_chk _Range_chk;
  const float __tmp;

    float __ret;
    wchar_t * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = float; _Ret = float; _CharT = wchar_t; _Base = {}; std::size_t = long unsigned int]::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const float __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr)) >>>>>;
      if ((const wchar_t *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = float; _Ret = float; _CharT = wchar_t; _Base = {}; std::size_t = long unsigned int]::_Range_chk::_S_chk ((float) __tmp, TARGET_EXPR <D.105437, *(struct integral_constant &) &TARGET_EXPR <D.105436, {}>>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (float) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) ((__endptr - __str) /[ex] 4)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = float; _Ret = float; _CharT = wchar_t; _Base = {}; std::size_t = long unsigned int]::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = double; _Ret = double; _CharT = wchar_t; _Base = {}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int _M_errno;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = double; _Ret = double; _CharT = wchar_t; _Base = {}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct 
        {
          int _M_errno;
        } &) this = {CLOBBER};
      }
  }
  <D.105474>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = double; _Ret = double; _CharT = wchar_t; _Base = {}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = double; _Ret = double; _CharT = wchar_t; _Base = {}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = __val < -2.147483648e+9 || __val > 2.147483647e+9;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = double; _Ret = double; _CharT = wchar_t; _Base = {}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaIddwJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  double __ret;
  wchar_t * __endptr;
  typedef struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef struct _Range_chk _Range_chk;
  const double __tmp;

    double __ret;
    wchar_t * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = double; _Ret = double; _CharT = wchar_t; _Base = {}; std::size_t = long unsigned int]::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const double __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr)) >>>>>;
      if ((const wchar_t *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = double; _Ret = double; _CharT = wchar_t; _Base = {}; std::size_t = long unsigned int]::_Range_chk::_S_chk ((double) __tmp, TARGET_EXPR <D.105494, *(struct integral_constant &) &TARGET_EXPR <D.105493, {}>>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (double) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) ((__endptr - __str) /[ex] 4)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = double; _Ret = double; _CharT = wchar_t; _Base = {}; std::size_t = long unsigned int]::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long double; _Ret = long double; _CharT = wchar_t; _Base = {}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int _M_errno;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long double; _Ret = long double; _CharT = wchar_t; _Base = {}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct 
        {
          int _M_errno;
        } &) this = {CLOBBER};
      }
  }
  <D.105531>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long double; _Ret = long double; _CharT = wchar_t; _Base = {}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long double; _Ret = long double; _CharT = wchar_t; _Base = {}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = __val < -2.147483648e+9 || __val > 2.147483647e+9;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long double; _Ret = long double; _CharT = wchar_t; _Base = {}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaIeewJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  long double __ret;
  wchar_t * __endptr;
  typedef struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef struct _Range_chk _Range_chk;
  const long double __tmp;

    long double __ret;
    wchar_t * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long double; _Ret = long double; _CharT = wchar_t; _Base = {}; std::size_t = long unsigned int]::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long double __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr)) >>>>>;
      if ((const wchar_t *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long double; _Ret = long double; _CharT = wchar_t; _Base = {}; std::size_t = long unsigned int]::_Range_chk::_S_chk ((long double) __tmp, TARGET_EXPR <D.105551, *(struct integral_constant &) &TARGET_EXPR <D.105550, {}>>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (long double) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) ((__endptr - __str) /[ex] 4)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long double; _Ret = long double; _CharT = wchar_t; _Base = {}; std::size_t = long unsigned int]::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function _String __gnu_cxx::__to_xstring(int (*)(_CharT*, std::size_t, const _CharT*, __va_list_tag*), std::size_t, const _CharT*, ...) [with _String = std::__cxx11::basic_string<wchar_t>; _CharT = wchar_t; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


{
  wchar_t * __s;
  struct  __args[1];
  const int __len;

    wchar_t * __s;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__s = (wchar_t *) __builtin_alloca (__n * 4)) >>>>>;
    struct  __args[1];
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_start ((struct  *) &__args, __fmt) >>>>>;
    const int __len;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__len = __convf (__s, __n, __fmt, (struct  *) &__args)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_end ((struct  *) &__args) >>>>>;
  <<cleanup_point return *<retval> = TARGET_EXPR <D.105583, <<< Unknown tree: aggr_init_expr
  7
  __ct_comp 
  D.105583
  (struct basic_string *) <<< Unknown tree: void_cst >>>
  __s
  __s + (sizetype) ((long unsigned int) __len * 4)
  (const struct allocator &) &TARGET_EXPR <D.105582, <<< Unknown tree: aggr_init_expr
  4
  __ct_comp 
  D.105582
  (struct allocator *) <<< Unknown tree: void_cst >>> >>>> >>>>>>;
}


;; Function std::__cxx11::basic_string<wchar_t>::_Alloc_hider::~_Alloc_hider() (null)
;; enabled by -tree-original


{
  try
    {
      try
        {
          
        }
      finally
        {
          std::allocator<wchar_t>::~allocator ((struct allocator *) this);
        }
    }
  finally
    {
      *(struct 
      {
        struct 
        {
          struct 
          {
          } D.14997;
        } D.24702;
        wchar_t * _M_p;
      } &) this = {CLOBBER};
    }
}
<D.105587>:;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::~basic_string() [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        try
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_dispose ((struct basic_string *) this) >>>>>;
          }
        finally
          {
            std::__cxx11::basic_string<wchar_t>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
          }
      }
    finally
      {
        *(struct 
        {
          struct _Alloc_hider _M_dataplus;
          size_type _M_string_length;
          union ._68 D.26021;
        } &) this = {CLOBBER};
      }
  }
  <D.105585>:;
   >>>;


;; Function const _CharT* std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::data() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const char *) std::__cxx11::basic_string<char>::_M_data ((const struct basic_string *) this)>>
   >>>;
__builtin_unreachable ();


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::length() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_type) ((const struct basic_string *) this)->_M_string_length
   >>>;
__builtin_unreachable ();


;; Function const _CharT* std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::data() const [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const wchar_t *) std::__cxx11::basic_string<wchar_t>::_M_data ((const struct basic_string *) this)>>
   >>>;
__builtin_unreachable ();


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::length() const [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_type) ((const struct basic_string *) this)->_M_string_length
   >>>;
__builtin_unreachable ();


;; Function const _CharT* std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::data() const [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const char16_t *) std::__cxx11::basic_string<char16_t>::_M_data ((const struct basic_string *) this)>>
   >>>;
__builtin_unreachable ();


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::length() const [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_type) ((const struct basic_string *) this)->_M_string_length
   >>>;
__builtin_unreachable ();


;; Function const _CharT* std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::data() const [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const char32_t *) std::__cxx11::basic_string<char32_t>::_M_data ((const struct basic_string *) this)>>
   >>>;
__builtin_unreachable ();


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::length() const [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_type) ((const struct basic_string *) this)->_M_string_length
   >>>;
__builtin_unreachable ();


;; Function std::allocator< <template-parameter-1-1> >::allocator() [with _Tp = char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<char>::new_allocator ((struct new_allocator *) this) >>>>>;
    try
      {
        
      }
    catch
      {
        __gnu_cxx::new_allocator<char>::~new_allocator ((struct new_allocator *) this);
      }
  }
   >>>;


;; Function std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        
      }
    finally
      {
        __gnu_cxx::new_allocator<char>::~new_allocator ((struct new_allocator *) this);
      }
  }
  <D.105610>:;
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct _Alloc_hider _M_dataplus;
    size_type _M_string_length;
    union ._68 D.24258;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<char>::_M_local_data ((struct basic_string *) this), __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_construct<const char*> ((struct basic_string *) this, __s, __s + (sizetype) NON_LVALUE_EXPR <__n>) >>>>>;
    }
  catch
    {
      std::__cxx11::basic_string<char>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
    }
}


;; Function std::allocator< <template-parameter-1-1> >::allocator() [with _Tp = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<wchar_t>::new_allocator ((struct new_allocator *) this) >>>>>;
    try
      {
        
      }
    catch
      {
        __gnu_cxx::new_allocator<wchar_t>::~new_allocator ((struct new_allocator *) this);
      }
  }
   >>>;


;; Function std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        
      }
    finally
      {
        __gnu_cxx::new_allocator<wchar_t>::~new_allocator ((struct new_allocator *) this);
      }
  }
  <D.105645>:;
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const _Alloc&) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct _Alloc_hider _M_dataplus;
    size_type _M_string_length;
    union ._68 D.26021;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<wchar_t>::_M_local_data ((struct basic_string *) this), __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_construct<const wchar_t*> ((struct basic_string *) this, __s, __s + (sizetype) (__n * 4)) >>>>>;
    }
  catch
    {
      std::__cxx11::basic_string<wchar_t>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
    }
}


;; Function std::allocator< <template-parameter-1-1> >::allocator() [with _Tp = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<char16_t>::new_allocator ((struct new_allocator *) this) >>>>>;
    try
      {
        
      }
    catch
      {
        __gnu_cxx::new_allocator<char16_t>::~new_allocator ((struct new_allocator *) this);
      }
  }
   >>>;


;; Function std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        
      }
    finally
      {
        __gnu_cxx::new_allocator<char16_t>::~new_allocator ((struct new_allocator *) this);
      }
  }
  <D.105689>:;
   >>>;


;; Function std::__cxx11::basic_string<char16_t>::_Alloc_hider::~_Alloc_hider() (null)
;; enabled by -tree-original


{
  try
    {
      try
        {
          
        }
      finally
        {
          std::allocator<char16_t>::~allocator ((struct allocator *) this);
        }
    }
  finally
    {
      *(struct 
      {
        struct 
        {
          struct 
          {
          } D.26366;
        } D.26590;
        char16_t * _M_p;
      } &) this = {CLOBBER};
    }
}
<D.105724>:;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const _Alloc&) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct _Alloc_hider _M_dataplus;
    size_type _M_string_length;
    union ._68 D.27909;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<char16_t>::_M_local_data ((struct basic_string *) this), __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_construct<const char16_t*> ((struct basic_string *) this, __s, __s + (sizetype) (__n * 2)) >>>>>;
    }
  catch
    {
      std::__cxx11::basic_string<char16_t>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
    }
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::~basic_string() [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        try
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_dispose ((struct basic_string *) this) >>>>>;
          }
        finally
          {
            std::__cxx11::basic_string<char16_t>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
          }
      }
    finally
      {
        *(struct 
        {
          struct _Alloc_hider _M_dataplus;
          size_type _M_string_length;
          union ._68 D.27909;
        } &) this = {CLOBBER};
      }
  }
  <D.105737>:;
   >>>;


;; Function std::allocator< <template-parameter-1-1> >::allocator() [with _Tp = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<char32_t>::new_allocator ((struct new_allocator *) this) >>>>>;
    try
      {
        
      }
    catch
      {
        __gnu_cxx::new_allocator<char32_t>::~new_allocator ((struct new_allocator *) this);
      }
  }
   >>>;


;; Function std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        
      }
    finally
      {
        __gnu_cxx::new_allocator<char32_t>::~new_allocator ((struct new_allocator *) this);
      }
  }
  <D.105747>:;
   >>>;


;; Function std::__cxx11::basic_string<char32_t>::_Alloc_hider::~_Alloc_hider() (null)
;; enabled by -tree-original


{
  try
    {
      try
        {
          
        }
      finally
        {
          std::allocator<char32_t>::~allocator ((struct allocator *) this);
        }
    }
  finally
    {
      *(struct 
      {
        struct 
        {
          struct 
          {
          } D.28100;
        } D.28324;
        char32_t * _M_p;
      } &) this = {CLOBBER};
    }
}
<D.105782>:;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const _Alloc&) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct _Alloc_hider _M_dataplus;
    size_type _M_string_length;
    union ._68 D.29643;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<char32_t>::_M_local_data ((struct basic_string *) this), __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_construct<const char32_t*> ((struct basic_string *) this, __s, __s + (sizetype) (__n * 4)) >>>>>;
    }
  catch
    {
      std::__cxx11::basic_string<char32_t>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
    }
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::~basic_string() [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        try
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_dispose ((struct basic_string *) this) >>>>>;
          }
        finally
          {
            std::__cxx11::basic_string<char32_t>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
          }
      }
    finally
      {
        *(struct 
        {
          struct _Alloc_hider _M_dataplus;
          size_type _M_string_length;
          union ._68 D.29643;
        } &) this = {CLOBBER};
      }
  }
  <D.105795>:;
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Allocator> std::operator+(const std::__cxx11::basic_string<_CharT, _Traits, _Allocator>&, const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


{
  struct basic_string __str [value-expr: *<retval>];

  (void) 0;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::basic_string ((struct basic_string *) <retval>, __lhs) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::__cxx11::basic_string<char>::append ((struct basic_string *) <retval>, __rhs) >>>>>;
      <<cleanup_point return <retval>>>;
    }
  catch
    {
      std::__cxx11::basic_string<char>::~basic_string ((struct basic_string *) <retval>);
    }
  __builtin_unreachable ();
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Allocator> std::operator+(std::__cxx11::basic_string<_CharT, _Traits, _Allocator>&&, std::__cxx11::basic_string<_CharT, _Traits, _Allocator>&&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


{
  const long unsigned int __size;
  const bool __cond;

    const long unsigned int __size;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__size = std::__cxx11::basic_string<char>::size ((struct basic_string *) __lhs) + std::__cxx11::basic_string<char>::size ((struct basic_string *) __rhs)) >>>>>;
    const bool __cond;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__cond = std::__cxx11::basic_string<char>::capacity ((struct basic_string *) __lhs) < (long unsigned int) __size && std::__cxx11::basic_string<char>::capacity ((struct basic_string *) __rhs) >= (long unsigned int) __size) >>>>>;
  <<cleanup_point return *<retval> = TARGET_EXPR <D.106459, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.106459
  (struct basic_string *) <<< Unknown tree: void_cst >>>
  (struct basic_string &) ((bool) __cond ? std::move<std::__cxx11::basic_string<char>&> (std::__cxx11::basic_string<char>::insert ((struct basic_string *) __rhs, 0, (const struct basic_string &) __lhs)) : std::move<std::__cxx11::basic_string<char>&> (std::__cxx11::basic_string<char>::append ((struct basic_string *) __lhs, (const struct basic_string &) __rhs))) >>>>>>;
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Allocator> std::operator+(const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Allocator>&&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.106461, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.106461
  (struct basic_string *) <<< Unknown tree: void_cst >>>
  (struct basic_string &) std::move<std::__cxx11::basic_string<char>&> (std::__cxx11::basic_string<char>::insert ((struct basic_string *) __rhs, 0, __lhs)) >>>>>>;


;; Function static std::size_t std::_Hash_impl::hash(const _Tp&) [with _Tp = int; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) __val, 4, 3339675911)>>;


;; Function static std::size_t std::_Hash_impl::__hash_combine(const _Tp&, std::size_t) [with _Tp = const std::_V2::error_category*; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) __val, 8, __hash)>>;


;; Function static std::size_t std::_Hash_impl::__hash_combine(const _Tp&, std::size_t) [with _Tp = std::_V2::error_category; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) __val, 8, __hash)>>;


;; Function static constexpr bool std::_PCC<<anonymous>, _T1, _T2>::_ConstructiblePair() [with _U1 = bool; _U2 = long unsigned int; bool <anonymous> = true; _T1 = bool; _T2 = long unsigned int] (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function static constexpr bool std::_PCC<<anonymous>, _T1, _T2>::_ImplicitlyConvertiblePair() [with _U1 = bool; _U2 = long unsigned int; bool <anonymous> = true; _T1 = bool; _T2 = long unsigned int] (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function static constexpr bool std::_PCC<<anonymous>, _T1, _T2>::_MoveCopyPair() [with bool __implicit = true; _U1 = bool; _U2 = long unsigned int; bool <anonymous> = true; _T1 = bool; _T2 = long unsigned int] (null)
;; enabled by -tree-original


{
  typedef struct __do_converts __do_converts;
  typedef struct __converts __converts;

  return <retval> = 1;
}


;; Function static constexpr bool std::_PCC<<anonymous>, _T1, _T2>::_MoveCopyPair() [with bool __implicit = false; _U1 = bool; _U2 = long unsigned int; bool <anonymous> = true; _T1 = bool; _T2 = long unsigned int] (null)
;; enabled by -tree-original


{
  typedef struct __do_converts __do_converts;
  typedef struct __converts __converts;

  return <retval> = 0;
}


;; Function static constexpr bool std::_PCC<<anonymous>, _T1, _T2>::_CopyMovePair() [with bool __implicit = true; _U1 = bool; _U2 = long unsigned int; bool <anonymous> = true; _T1 = bool; _T2 = long unsigned int] (null)
;; enabled by -tree-original


{
  typedef struct __do_converts __do_converts;
  typedef struct __converts __converts;

  return <retval> = 1;
}


;; Function static constexpr bool std::_PCC<<anonymous>, _T1, _T2>::_CopyMovePair() [with bool __implicit = false; _U1 = bool; _U2 = long unsigned int; bool <anonymous> = true; _T1 = bool; _T2 = long unsigned int] (null)
;; enabled by -tree-original


{
  typedef struct __do_converts __do_converts;
  typedef struct __converts __converts;

  return <retval> = 0;
}


;; Function static constexpr bool std::_PCC<<anonymous>, _T1, _T2>::_MoveConstructiblePair() [with _U1 = bool; _U2 = long unsigned int; bool <anonymous> = true; _T1 = bool; _T2 = long unsigned int] (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function static constexpr bool std::_PCC<<anonymous>, _T1, _T2>::_ImplicitlyMoveConvertiblePair() [with _U1 = bool; _U2 = long unsigned int; bool <anonymous> = true; _T1 = bool; _T2 = long unsigned int] (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function constexpr _Tp&& std::forward(typename std::remove_reference<_Tp>::type&) [with _Tp = long unsigned int; typename std::remove_reference<_Tp>::type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (long unsigned int &) __t
   >>>;
__builtin_unreachable ();


;; Function constexpr std::pair<typename std::__decay_and_strip<_Tp>::__type, typename std::__decay_and_strip<_T2>::__type> std::make_pair(_T1&&, _T2&&) [with _T1 = bool; _T2 = long unsigned int; typename std::__decay_and_strip<_T2>::__type = long unsigned int; typename std::__decay_and_strip<_Tp>::__type = bool] (null)
;; enabled by -tree-original


{
  typedef __ds_type1 __ds_type1;
  typedef __ds_type2 __ds_type2;
  typedef struct __pair_type __pair_type;

  <<cleanup_point return <retval> = TARGET_EXPR <D.106835, <<< Unknown tree: aggr_init_expr
  6
  __ct_comp 
  D.106835
  (struct pair *) <<< Unknown tree: void_cst >>>
  std::forward<bool> ((type &) __x)
  std::forward<long unsigned int> ((type &) __y) >>>>;, D.106835>>;
}


;; Function constexpr std::pair<_T1, _T2>::pair(std::pair<_U1, _U2>&&) [with _U1 = bool; _U2 = int; typename std::enable_if<(std::_PCC<((! std::is_same<_T1, _U1>::value) || (! std::is_same<_T2, _U2>::value)), _T1, _T2>::_MoveConstructiblePair<_U1, _U2>() && std::_PCC<((! std::is_same<_T1, _U1>::value) || (! std::is_same<_T2, _U2>::value)), _T1, _T2>::_ImplicitlyMoveConvertiblePair<_U1, _U2>()), bool>::type <anonymous> = 1; _T1 = bool; _T2 = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    bool first;
    long unsigned int second;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct pair *) this)->first = *std::forward<bool> ((type &) &__p->first)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct pair *) this)->second = (long unsigned int) *std::forward<int> ((type &) &__p->second)) >>>>>;
}


;; Function long int std::_Sp_counted_base<_Lp>::_M_get_use_count() const [with __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)2] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (long int) (int) __atomic_load_4 ((const void *) &((const struct _Sp_counted_base *) this)->_M_use_count, 0)>>
   >>>;
__builtin_unreachable ();


;; Function void std::_Sp_counted_base<_Lp>::_M_destroy() [with __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  if ((struct _Sp_counted_base *) this != 0B)
    {
      OBJ_TYPE_REF(*(((struct _Sp_counted_base *) this)->_vptr._Sp_counted_base + 8);(struct _Sp_counted_base)(struct _Sp_counted_base *) this->1) ((struct _Sp_counted_base *) this);
    }
  else
    {
      <<< Unknown tree: void_cst >>>
    } >>>>>
   >>>;


;; Function constexpr std::_Head_base<_Idx, _Head, false>::_Head_base(const _Head&) [with long unsigned int _Idx = 0; _Head = vertex_t&] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct vertex_t & _M_head_impl;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Head_base *) this)->_M_head_impl = __h) >>>>>;
}


;; Function constexpr std::_Tuple_impl<_Idx, _Head>::_Tuple_impl(const _Head&) [with long unsigned int _Idx = 0; _Head = vertex_t&] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      struct vertex_t & _M_head_impl;
    } D.95606;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::_Head_base<0, vertex_t&, false>::_Head_base (&((struct _Tuple_impl *) this)->D.95605, __head) >>>>>;
}


;; Function constexpr std::tuple<_Elements>::tuple(const _Elements& ...) [with _Dummy = void; typename std::enable_if<((std::_TC<std::is_same<_Dummy, void>::value, _Elements ...>::_ConstructibleTuple<_Elements ...>() && std::_TC<std::is_same<_Dummy, void>::value, _Elements ...>::_ImplicitlyConvertibleTuple<_Elements ...>()) && (sizeof... (_Elements) >= 1)), bool>::type <anonymous> = 1; _Elements = {vertex_t&}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      struct 
      {
        struct vertex_t & _M_head_impl;
      } D.95606;
    } D.96886;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::_Tuple_impl<0, vertex_t&>::_Tuple_impl (&((struct tuple *) this)->D.96885, __elements#0) >>>>>;
}


;; Function constexpr std::_Head_base<_Idx, _Head, false>::_Head_base(const _Head&) [with long unsigned int _Idx = 0; _Head = const vertex_t&] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    const struct vertex_t & _M_head_impl;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Head_base *) this)->_M_head_impl = __h) >>>>>;
}


;; Function constexpr std::_Tuple_impl<_Idx, _Head>::_Tuple_impl(const _Head&) [with long unsigned int _Idx = 0; _Head = const vertex_t&] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      const struct vertex_t & _M_head_impl;
    } D.97744;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::_Head_base<0, const vertex_t&, false>::_Head_base (&((struct _Tuple_impl *) this)->D.97743, __head) >>>>>;
}


;; Function constexpr std::tuple<_Elements>::tuple(const _Elements& ...) [with _Dummy = void; typename std::enable_if<((std::_TC<std::is_same<_Dummy, void>::value, _Elements ...>::_ConstructibleTuple<_Elements ...>() && std::_TC<std::is_same<_Dummy, void>::value, _Elements ...>::_ImplicitlyConvertibleTuple<_Elements ...>()) && (sizeof... (_Elements) >= 1)), bool>::type <anonymous> = 1; _Elements = {const vertex_t&}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      struct 
      {
        const struct vertex_t & _M_head_impl;
      } D.97744;
    } D.99024;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::_Tuple_impl<0, const vertex_t&>::_Tuple_impl (&((struct tuple *) this)->D.99023, __elements#0) >>>>>;
}


;; Function constexpr std::_Head_base<_Idx, _Head, false>::_Head_base(const _Head&) [with long unsigned int _Idx = 0; _Head = vertex_t] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct vertex_t _M_head_impl;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Head_base *) this)->_M_head_impl = *__h) >>>>>;
}


;; Function constexpr std::_Tuple_impl<_Idx, _Head>::_Tuple_impl(const _Head&) [with long unsigned int _Idx = 0; _Head = vertex_t] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      struct vertex_t _M_head_impl;
    } D.99978;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::_Head_base<0, vertex_t, false>::_Head_base (&((struct _Tuple_impl *) this)->D.99977, __head) >>>>>;
}


;; Function constexpr std::tuple<_Elements>::tuple(const _Elements& ...) [with _Dummy = void; typename std::enable_if<((std::_TC<std::is_same<_Dummy, void>::value, _Elements ...>::_ConstructibleTuple<_Elements ...>() && std::_TC<std::is_same<_Dummy, void>::value, _Elements ...>::_ImplicitlyConvertibleTuple<_Elements ...>()) && (sizeof... (_Elements) >= 1)), bool>::type <anonymous> = 1; _Elements = {vertex_t}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      struct 
      {
        struct vertex_t _M_head_impl;
      } D.99978;
    } D.101258;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::_Tuple_impl<0, vertex_t>::_Tuple_impl (&((struct tuple *) this)->D.101257, __elements#0) >>>>>;
}


;; Function std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](std::vector<_Tp, _Alloc>::size_type) [with _Tp = vertex_t; _Alloc = SOA::AlignedAllocator<vertex_t, 64>; std::vector<_Tp, _Alloc>::reference = vertex_t&; std::vector<_Tp, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (struct value_type &) (((struct vector *) this)->D.92757._M_impl._M_start + (sizetype) (__n * 4))
   >>>;
__builtin_unreachable ();


;; Function SelectionView<CONTAINER, IndexSize>::SelectionView(const container_t&) [with CONTAINER = const SOA::Container<std::vector, s_decayvertex>&; IndexSize = short unsigned int; SelectionView<CONTAINER, IndexSize>::container_t = SOA::Container<std::vector, s_decayvertex>] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    const struct container_t & m_container;
    struct index_vector m_indices;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct SelectionView *) this)->m_container = container) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::vector<short unsigned int, std::allocator<short unsigned int> >::vector (&((struct SelectionView *) this)->m_indices, SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::size (&((const struct container_t *) ((struct SelectionView *) this)->m_container)->D.104277.D.104204.D.103696), (const struct allocator_type &) &TARGET_EXPR <D.106978, <<< Unknown tree: aggr_init_expr
  4
  __ct_comp 
  D.106978
  (struct allocator *) <<< Unknown tree: void_cst >>> >>>>) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::iota<__gnu_cxx::__normal_iterator<short unsigned int*, std::vector<short unsigned int, std::allocator<short unsigned int> > >, int> (TARGET_EXPR <D.107072, std::vector<short unsigned int, std::allocator<short unsigned int> >::begin (&((struct SelectionView *) this)->m_indices)>, TARGET_EXPR <D.107082, std::vector<short unsigned int, std::allocator<short unsigned int> >::end (&((struct SelectionView *) this)->m_indices)>, 0) >>>>>;
    }
  catch
    {
      std::vector<short unsigned int, std::allocator<short unsigned int> >::~vector (&((struct SelectionView *) this)->m_indices);
    }
}


;; Function std::vector<_Tp, _Alloc>::~vector() [with _Tp = short unsigned int; _Alloc = std::allocator<short unsigned int>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        try
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  std::_Destroy<short unsigned int*, short unsigned int> (((struct vector *) this)->D.90158._M_impl._M_start, ((struct vector *) this)->D.90158._M_impl._M_finish, (struct allocator &) std::_Vector_base<short unsigned int, std::allocator<short unsigned int> >::_M_get_Tp_allocator (&((struct vector *) this)->D.90158)) >>>>>;
          }
        finally
          {
            std::_Vector_base<short unsigned int, std::allocator<short unsigned int> >::~_Vector_base (&((struct vector *) this)->D.90158);
          }
      }
    finally
      {
        *(struct 
        {
          struct 
          {
            struct _Vector_impl _M_impl;
          } D.90159;
        } &) this = {CLOBBER};
      }
  }
  <D.107093>:;
   >>>;


;; Function SelectionView<CONTAINER, IndexSize>::SelectionView(const SelectionView<CONTAINER, IndexSize>&, Predicate_t&&) [with Predicate_t = foo(const SOA::Container<std::vector, s_decayvertex>&)::<lambda(auto:2)>; CONTAINER = const SOA::Container<std::vector, s_decayvertex>&; IndexSize = short unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    const struct container_t & m_container;
    struct index_vector m_indices;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct SelectionView *) this)->m_container = old_selection->m_container) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::vector<short unsigned int, std::allocator<short unsigned int> >::vector (&((struct SelectionView *) this)->m_indices) >>>>>;
  try
    {
      {
        typedef struct __lambda10 __lambda10;

        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) TARGET_EXPR <D.107393, std::copy_if<__gnu_cxx::__normal_iterator<const short unsigned int*, std::vector<short unsigned int, std::allocator<short unsigned int> > >, std::back_insert_iterator<std::vector<short unsigned int, std::allocator<short unsigned int> > >, SelectionView<CONTAINER, IndexSize>::SelectionView(const SelectionView<CONTAINER, IndexSize>&, Predicate_t&&) [with Predicate_t = foo(const SOA::Container<std::vector, s_decayvertex>&)::<lambda(auto:2)>; CONTAINER = const SOA::Container<std::vector, s_decayvertex>&; IndexSize = short unsigned int]::<lambda(auto:1)> > (TARGET_EXPR <D.107275, std::vector<short unsigned int, std::allocator<short unsigned int> >::begin (&old_selection->m_indices)>, TARGET_EXPR <D.107285, std::vector<short unsigned int, std::allocator<short unsigned int> >::end (&old_selection->m_indices)>, TARGET_EXPR <D.107341, std::back_inserter<std::vector<short unsigned int, std::allocator<short unsigned int> > > ((struct vector &) &((struct SelectionView *) this)->m_indices)>, TARGET_EXPR <D.107378, {.__this=(struct SelectionView *) this, .__predicate_i=(struct __lambda9 &) predicate_i}>)> >>>>>;
      }
    }
  catch
    {
      std::vector<short unsigned int, std::allocator<short unsigned int> >::~vector (&((struct SelectionView *) this)->m_indices);
    }
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_data() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char*] (null)
;; enabled by -tree-original


return <retval> = (char *) ((const struct basic_string *) this)->_M_dataplus._M_p;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(_InputIterator, _InputIterator, const _Alloc&) [with _InputIterator = char*; <template-parameter-2-2> = void; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct _Alloc_hider _M_dataplus;
    size_type _M_string_length;
    union ._68 D.24258;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<char>::_M_local_data ((struct basic_string *) this), __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_construct<char*> ((struct basic_string *) this, __beg, __end) >>>>>;
    }
  catch
    {
      std::__cxx11::basic_string<char>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
    }
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_dispose() [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


if (<<cleanup_point !std::__cxx11::basic_string<char>::_M_is_local ((struct basic_string *) this)>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_destroy ((struct basic_string *) this, ((struct basic_string *) this)->D.22945._M_allocated_capacity) >>>>>;
  }


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_data() const [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = wchar_t*] (null)
;; enabled by -tree-original


return <retval> = (wchar_t *) ((const struct basic_string *) this)->_M_dataplus._M_p;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(_InputIterator, _InputIterator, const _Alloc&) [with _InputIterator = wchar_t*; <template-parameter-2-2> = void; _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct _Alloc_hider _M_dataplus;
    size_type _M_string_length;
    union ._68 D.26021;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<wchar_t>::_M_local_data ((struct basic_string *) this), __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_construct<wchar_t*> ((struct basic_string *) this, __beg, __end) >>>>>;
    }
  catch
    {
      std::__cxx11::basic_string<wchar_t>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
    }
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_dispose() [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


if (<<cleanup_point !std::__cxx11::basic_string<wchar_t>::_M_is_local ((struct basic_string *) this)>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_destroy ((struct basic_string *) this, ((struct basic_string *) this)->D.24708._M_allocated_capacity) >>>>>;
  }


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_data() const [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char16_t*] (null)
;; enabled by -tree-original


return <retval> = (char16_t *) ((const struct basic_string *) this)->_M_dataplus._M_p;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_data() const [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char32_t*] (null)
;; enabled by -tree-original


return <retval> = (char32_t *) ((const struct basic_string *) this)->_M_dataplus._M_p;


;; Function __gnu_cxx::new_allocator<_Tp>::new_allocator() [with _Tp = char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function __gnu_cxx::new_allocator<_Tp>::~new_allocator() [with _Tp = char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
  <D.107426>:;
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_local_data() [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (char *) std::pointer_traits<char*>::pointer_to ((__make_not_void &) &((struct basic_string *) this)->D.22945._M_local_buf)>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_Alloc_hider::_Alloc_hider(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      struct 
      {
      } D.14825;
    } D.22939;
    char * _M_p;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator<char>::allocator ((struct allocator *) this, __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Alloc_hider *) this)->_M_p = __dat) >>>>>;
    }
  catch
    {
      std::allocator<char>::~allocator ((struct allocator *) this);
    }
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator) [with _InIterator = const char*; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


{
  typedef struct _Integral _Integral;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_construct_aux<const char*> ((struct basic_string *) this, __beg, __end, TARGET_EXPR <D.107507, {}>;, <<< Unknown tree: empty_class_expr >>>;) >>>>>;
}


;; Function __gnu_cxx::new_allocator<_Tp>::new_allocator() [with _Tp = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function __gnu_cxx::new_allocator<_Tp>::~new_allocator() [with _Tp = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
  <D.107550>:;
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_local_data() [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = wchar_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (wchar_t *) std::pointer_traits<wchar_t*>::pointer_to ((__make_not_void &) &((struct basic_string *) this)->D.24708._M_local_buf)>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_Alloc_hider::_Alloc_hider(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer, const _Alloc&) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = wchar_t*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      struct 
      {
      } D.14997;
    } D.24702;
    wchar_t * _M_p;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator<wchar_t>::allocator ((struct allocator *) this, __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Alloc_hider *) this)->_M_p = __dat) >>>>>;
    }
  catch
    {
      std::allocator<wchar_t>::~allocator ((struct allocator *) this);
    }
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator) [with _InIterator = const wchar_t*; _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


{
  typedef struct _Integral _Integral;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_construct_aux<const wchar_t*> ((struct basic_string *) this, __beg, __end, TARGET_EXPR <D.107595, {}>;, <<< Unknown tree: empty_class_expr >>>;) >>>>>;
}


;; Function __gnu_cxx::new_allocator<_Tp>::new_allocator() [with _Tp = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function __gnu_cxx::new_allocator<_Tp>::~new_allocator() [with _Tp = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
  <D.107605>:;
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_local_data() [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char16_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (char16_t *) std::pointer_traits<char16_t*>::pointer_to ((__make_not_void &) &((struct basic_string *) this)->D.26596._M_local_buf)>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_Alloc_hider::_Alloc_hider(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer, const _Alloc&) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char16_t*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      struct 
      {
      } D.26366;
    } D.26590;
    char16_t * _M_p;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator<char16_t>::allocator ((struct allocator *) this, __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Alloc_hider *) this)->_M_p = __dat) >>>>>;
    }
  catch
    {
      std::allocator<char16_t>::~allocator ((struct allocator *) this);
    }
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator) [with _InIterator = const char16_t*; _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>] (null)
;; enabled by -tree-original


{
  typedef struct _Integral _Integral;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_construct_aux<const char16_t*> ((struct basic_string *) this, __beg, __end, TARGET_EXPR <D.107650, {}>;, <<< Unknown tree: empty_class_expr >>>;) >>>>>;
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_dispose() [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>] (null)
;; enabled by -tree-original


if (<<cleanup_point !std::__cxx11::basic_string<char16_t>::_M_is_local ((struct basic_string *) this)>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_destroy ((struct basic_string *) this, ((struct basic_string *) this)->D.26596._M_allocated_capacity) >>>>>;
  }


;; Function __gnu_cxx::new_allocator<_Tp>::new_allocator() [with _Tp = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function __gnu_cxx::new_allocator<_Tp>::~new_allocator() [with _Tp = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
  <D.107661>:;
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_local_data() [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char32_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (char32_t *) std::pointer_traits<char32_t*>::pointer_to ((__make_not_void &) &((struct basic_string *) this)->D.28330._M_local_buf)>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_Alloc_hider::_Alloc_hider(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer, const _Alloc&) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char32_t*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      struct 
      {
      } D.28100;
    } D.28324;
    char32_t * _M_p;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator<char32_t>::allocator ((struct allocator *) this, __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Alloc_hider *) this)->_M_p = __dat) >>>>>;
    }
  catch
    {
      std::allocator<char32_t>::~allocator ((struct allocator *) this);
    }
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator) [with _InIterator = const char32_t*; _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>] (null)
;; enabled by -tree-original


{
  typedef struct _Integral _Integral;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_construct_aux<const char32_t*> ((struct basic_string *) this, __beg, __end, TARGET_EXPR <D.107706, {}>;, <<< Unknown tree: empty_class_expr >>>;) >>>>>;
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_dispose() [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>] (null)
;; enabled by -tree-original


if (<<cleanup_point !std::__cxx11::basic_string<char32_t>::_M_is_local ((struct basic_string *) this)>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_destroy ((struct basic_string *) this, ((struct basic_string *) this)->D.28330._M_allocated_capacity) >>>>>;
  }


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct _Alloc_hider _M_dataplus;
    size_type _M_string_length;
    union ._68 D.24258;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<char>::_M_local_data ((struct basic_string *) this), (struct allocator &) &TARGET_EXPR <D.107714, <<< Unknown tree: aggr_init_expr
  4
  _S_select_on_copy
  D.107714
  (const struct allocator &) std::__cxx11::basic_string<char>::_M_get_allocator ((const struct basic_string *) __str) >>>>) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_construct<char*> ((struct basic_string *) this, std::__cxx11::basic_string<char>::_M_data ((const struct basic_string *) __str), std::__cxx11::basic_string<char>::_M_data ((const struct basic_string *) __str) + (sizetype) std::__cxx11::basic_string<char>::length ((const struct basic_string *) __str)) >>>>>;
    }
  catch
    {
      std::__cxx11::basic_string<char>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
    }
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::append(const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


{
  const size_type __n;

    const size_type __n;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__n = std::char_traits<char>::length (__s)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_check_length ((struct basic_string *) this, 0, (size_type) __n, (const char *) "basic_string::append") >>>>>;
  <<cleanup_point return <retval> = std::__cxx11::basic_string<char>::_M_append ((struct basic_string *) this, __s, (size_type) __n)>>;
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct _Alloc_hider _M_dataplus;
    size_type _M_string_length;
    union ._68 D.24258;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<char>::_M_local_data ((struct basic_string *) this), (struct allocator &) std::move<std::allocator<char>&> ((struct allocator &) std::__cxx11::basic_string<char>::_M_get_allocator ((struct basic_string *) __str))) >>>>>;
    try
      {
        if (<<cleanup_point std::__cxx11::basic_string<char>::_M_is_local ((struct basic_string *) __str)>>)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::char_traits<char>::copy ((char *) &((struct basic_string *) this)->D.22945._M_local_buf, (const char_type *) &__str->D.22945._M_local_buf, 16) >>>>>;
          }
        else
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this, std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) __str)) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_capacity ((struct basic_string *) this, __str->D.22945._M_allocated_capacity) >>>>>;
          }
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_length ((struct basic_string *) this, std::__cxx11::basic_string<char>::length ((struct basic_string *) __str)) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) __str, std::__cxx11::basic_string<char>::_M_local_data ((struct basic_string *) __str)) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_set_length ((struct basic_string *) __str, 0) >>>>>;
      }
    catch
      {
        std::__cxx11::basic_string<char>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
      }
  }
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_type) ((const struct basic_string *) this)->_M_string_length
   >>>;
__builtin_unreachable ();


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::capacity() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__cxx11::basic_string<char>::_M_is_local ((const struct basic_string *) this) ? 15 : (size_type) ((const struct basic_string *) this)->D.22945._M_allocated_capacity>>
   >>>;
__builtin_unreachable ();


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__cxx11::basic_string<char>::replace ((struct basic_string *) this, __pos1, 0, (const char *) std::__cxx11::basic_string<char>::_M_data ((const struct basic_string *) __str), std::__cxx11::basic_string<char>::size ((const struct basic_string *) __str))>>;


;; Function constexpr typename std::remove_reference<_Tp>::type&& std::move(_Tp&&) [with _Tp = std::__cxx11::basic_string<char>&; typename std::remove_reference<_Tp>::type = std::__cxx11::basic_string<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (struct type &) __t
   >>>;
__builtin_unreachable ();


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::append(const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__cxx11::basic_string<char>::_M_append ((struct basic_string *) this, (const char *) std::__cxx11::basic_string<char>::_M_data ((const struct basic_string *) __str), std::__cxx11::basic_string<char>::size ((const struct basic_string *) __str))>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__cxx11::basic_string<char>::replace ((struct basic_string *) this, __pos, 0, __s, std::char_traits<char>::length (__s))>>;


;; Function constexpr std::pair<_T1, _T2>::pair(_U1&&, _U2&&) [with _U1 = bool; _U2 = long unsigned int; typename std::enable_if<(std::_PCC<true, _T1, _T2>::_MoveConstructiblePair<_U1, _U2>() && std::_PCC<true, _T1, _T2>::_ImplicitlyMoveConvertiblePair<_U1, _U2>()), bool>::type <anonymous> = 1; _T1 = bool; _T2 = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    bool first;
    long unsigned int second;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct pair *) this)->first = *std::forward<bool> ((type &) __x)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct pair *) this)->second = *std::forward<long unsigned int> ((type &) __y)) >>>>>;
}


;; Function std::_Sp_counted_base<_Lp>::~_Sp_counted_base() [with __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Sp_counted_base *) this)->_vptr._Sp_counted_base = &_ZTVSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE + 16) >>>>>;
    try
      {
        
      }
    finally
      {
        *(struct 
        {
          int (*) () * _vptr._Sp_counted_base;
          struct 
          {
          } D.81105;
          _Atomic_word _M_use_count;
          _Atomic_word _M_weak_count;
        } &) this = {CLOBBER};
      }
  }
  <D.107964>:;
   >>>;


;; Function SOA::_View<STORAGE, SKIN, FIELDS>::size_type SOA::_View<STORAGE, SKIN, FIELDS>::size() const [with STORAGE = std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >; SKIN = s_decayvertex; FIELDS = {f_vertex}; SOA::_View<STORAGE, SKIN, FIELDS>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> >::size ((const struct __tuple_element_t *) std::get<0, std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > > ((const struct tuple &) &((const struct _View *) this)->m_storage))>>
   >>>;
__builtin_unreachable ();


;; Function std::allocator< <template-parameter-1-1> >::allocator() [with _Tp = short unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<short unsigned int>::new_allocator ((struct new_allocator *) this) >>>>>;
    try
      {
        
      }
    catch
      {
        __gnu_cxx::new_allocator<short unsigned int>::~new_allocator ((struct new_allocator *) this);
      }
  }
   >>>;


;; Function std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = short unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        
      }
    finally
      {
        __gnu_cxx::new_allocator<short unsigned int>::~new_allocator ((struct new_allocator *) this);
      }
  }
  <D.107977>:;
   >>>;


;; Function std::vector<_Tp, _Alloc>::vector(std::vector<_Tp, _Alloc>::size_type, const allocator_type&) [with _Tp = short unsigned int; _Alloc = std::allocator<short unsigned int>; std::vector<_Tp, _Alloc>::size_type = long unsigned int; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<short unsigned int>] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      struct _Vector_impl _M_impl;
    } D.90159;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::_Vector_base<short unsigned int, std::allocator<short unsigned int> >::_Vector_base (&((struct vector *) this)->D.90158, __n, (const struct allocator_type &) __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::vector<short unsigned int, std::allocator<short unsigned int> >::_M_default_initialize ((struct vector *) this, __n) >>>>>;
    }
  catch
    {
      std::_Vector_base<short unsigned int, std::allocator<short unsigned int> >::~_Vector_base (&((struct vector *) this)->D.90158);
    }
}


;; Function std::vector<_Tp, _Alloc>::iterator std::vector<_Tp, _Alloc>::begin() [with _Tp = short unsigned int; _Alloc = std::allocator<short unsigned int>; std::vector<_Tp, _Alloc>::iterator = __gnu_cxx::__normal_iterator<short unsigned int*, std::vector<short unsigned int, std::allocator<short unsigned int> > >; typename std::_Vector_base<_Tp, _Alloc>::pointer = short unsigned int*] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.108005, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.108005
  (struct __normal_iterator *) <<< Unknown tree: void_cst >>>
  (short unsigned int * const &) &((struct vector *) this)->D.90158._M_impl._M_start >>>>;, D.108005>>
   >>>;
__builtin_unreachable ();


;; Function std::vector<_Tp, _Alloc>::iterator std::vector<_Tp, _Alloc>::end() [with _Tp = short unsigned int; _Alloc = std::allocator<short unsigned int>; std::vector<_Tp, _Alloc>::iterator = __gnu_cxx::__normal_iterator<short unsigned int*, std::vector<short unsigned int, std::allocator<short unsigned int> > >; typename std::_Vector_base<_Tp, _Alloc>::pointer = short unsigned int*] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.108007, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.108007
  (struct __normal_iterator *) <<< Unknown tree: void_cst >>>
  (short unsigned int * const &) &((struct vector *) this)->D.90158._M_impl._M_finish >>>>;, D.108007>>
   >>>;
__builtin_unreachable ();


;; Function void std::iota(_ForwardIterator, _ForwardIterator, _Tp) [with _ForwardIterator = __gnu_cxx::__normal_iterator<short unsigned int*, std::vector<short unsigned int, std::allocator<short unsigned int> > >; _Tp = int] (null)
;; enabled by -tree-original


while (1)
  {
    if (<<cleanup_point __gnu_cxx::operator!=<short unsigned int*, std::vector<short unsigned int, std::allocator<short unsigned int> > > ((const struct __normal_iterator &) &__first, (const struct __normal_iterator &) &__last)>>) (void) 0; else goto <D.108023>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__gnu_cxx::__normal_iterator<short unsigned int*, std::vector<short unsigned int, std::allocator<short unsigned int> > >::operator* (&__first) = (short unsigned int) __value) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++__value >>>>>;
    <<cleanup_point (void) __gnu_cxx::__normal_iterator<short unsigned int*, std::vector<short unsigned int, std::allocator<short unsigned int> > >::operator++ (&__first)>>;
  }
<D.108023>:;


;; Function std::_Vector_base<short unsigned int, std::allocator<short unsigned int> >::_Vector_impl::~_Vector_impl() (null)
;; enabled by -tree-original


{
  try
    {
      try
        {
          
        }
      finally
        {
          std::allocator<short unsigned int>::~allocator ((struct allocator *) this);
        }
    }
  finally
    {
      *(struct 
      {
        struct 
        {
          struct 
          {
          } D.89232;
        } D.89449;
        short unsigned int * _M_start;
        short unsigned int * _M_finish;
        short unsigned int * _M_end_of_storage;
      } &) this = {CLOBBER};
    }
}
<D.108028>:;


;; Function std::_Vector_base<_Tp, _Alloc>::~_Vector_base() [with _Tp = short unsigned int; _Alloc = std::allocator<short unsigned int>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        try
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  std::_Vector_base<short unsigned int, std::allocator<short unsigned int> >::_M_deallocate ((struct _Vector_base *) this, ((struct _Vector_base *) this)->_M_impl._M_start, (size_t) ((((struct _Vector_base *) this)->_M_impl._M_end_of_storage - ((struct _Vector_base *) this)->_M_impl._M_start) /[ex] 2)) >>>>>;
          }
        finally
          {
            std::_Vector_base<short unsigned int, std::allocator<short unsigned int> >::_Vector_impl::~_Vector_impl (&((struct _Vector_base *) this)->_M_impl);
          }
      }
    finally
      {
        *(struct 
        {
          struct _Vector_impl _M_impl;
        } &) this = {CLOBBER};
      }
  }
  <D.108026>:;
   >>>;


;; Function std::_Vector_base<_Tp, _Alloc>::_Tp_alloc_type& std::_Vector_base<_Tp, _Alloc>::_M_get_Tp_allocator() [with _Tp = short unsigned int; _Alloc = std::allocator<short unsigned int>; std::_Vector_base<_Tp, _Alloc>::_Tp_alloc_type = std::allocator<short unsigned int>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (struct _Tp_alloc_type &) &((struct _Vector_base *) this)->_M_impl
   >>>;
__builtin_unreachable ();


;; Function void std::_Destroy(_ForwardIterator, _ForwardIterator, std::allocator<_T2>&) [with _ForwardIterator = short unsigned int*; _Tp = short unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::_Destroy<short unsigned int*> (__first, __last) >>>>>;


;; Function std::vector<_Tp, _Alloc>::vector() [with _Tp = short unsigned int; _Alloc = std::allocator<short unsigned int>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      struct _Vector_impl _M_impl;
    } D.90159;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::_Vector_base<short unsigned int, std::allocator<short unsigned int> >::_Vector_base (&((struct vector *) this)->D.90158) >>>>>;
    try
      {
        
      }
    catch
      {
        std::_Vector_base<short unsigned int, std::allocator<short unsigned int> >::~_Vector_base (&((struct vector *) this)->D.90158);
      }
  }
   >>>;


;; Function std::vector<_Tp, _Alloc>::const_iterator std::vector<_Tp, _Alloc>::begin() const [with _Tp = short unsigned int; _Alloc = std::allocator<short unsigned int>; std::vector<_Tp, _Alloc>::const_iterator = __gnu_cxx::__normal_iterator<const short unsigned int*, std::vector<short unsigned int, std::allocator<short unsigned int> > >; typename __gnu_cxx::__alloc_traits<typename std::_Vector_base<_Tp, _Alloc>::_Tp_alloc_type>::const_pointer = const short unsigned int*] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.108067, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.108067
  (struct __normal_iterator *) <<< Unknown tree: void_cst >>>
  (const short unsigned int * const &) &TARGET_EXPR <D.108066, (const short unsigned int *) ((const struct vector *) this)->D.90158._M_impl._M_start> >>>>;, D.108067>>
   >>>;
__builtin_unreachable ();


;; Function std::vector<_Tp, _Alloc>::const_iterator std::vector<_Tp, _Alloc>::end() const [with _Tp = short unsigned int; _Alloc = std::allocator<short unsigned int>; std::vector<_Tp, _Alloc>::const_iterator = __gnu_cxx::__normal_iterator<const short unsigned int*, std::vector<short unsigned int, std::allocator<short unsigned int> > >; typename __gnu_cxx::__alloc_traits<typename std::_Vector_base<_Tp, _Alloc>::_Tp_alloc_type>::const_pointer = const short unsigned int*] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.108070, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.108070
  (struct __normal_iterator *) <<< Unknown tree: void_cst >>>
  (const short unsigned int * const &) &TARGET_EXPR <D.108069, (const short unsigned int *) ((const struct vector *) this)->D.90158._M_impl._M_finish> >>>>;, D.108070>>
   >>>;
__builtin_unreachable ();


;; Function std::back_insert_iterator<_Container> std::back_inserter(_Container&) [with _Container = std::vector<short unsigned int, std::allocator<short unsigned int> >] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.108090, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.108090
  (struct back_insert_iterator *) <<< Unknown tree: void_cst >>>
  __x >>>>;, D.108090>>;


;; Function constexpr SOA::_View<STORAGE, SKIN, FIELDS>::position::position(SOA::_View<STORAGE, SKIN, FIELDS>::SOAStorage*, SOA::_View<STORAGE, SKIN, FIELDS>::size_type) [with STORAGE = std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >; SKIN = s_decayvertex; FIELDS = {f_vertex}; SOA::_View<STORAGE, SKIN, FIELDS>::SOAStorage = std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >; SOA::_View<STORAGE, SKIN, FIELDS>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct SOAStorage * m_stor = <<< Unknown tree: void_cst >>>;
    size_type m_idx = <<< Unknown tree: void_cst >>>;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct position *) this)->m_stor = stor) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct position *) this)->m_idx = idx) >>>>>;
  }
   >>>;


;; Function constexpr SOA::ObjectProxy<SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::position>::ObjectProxy(SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::SOAStorage*, SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::size_type) [inherited from SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::position] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      struct SOAStorage * m_stor = <<< Unknown tree: void_cst >>>;
      size_type m_idx = <<< Unknown tree: void_cst >>>;
    } D.101626;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::position::position (&((struct ObjectProxy *) this)->D.101625, *(struct SOAStorage * &) &D.101571, *(size_type &) &D.101572) >>>>>;
}


;; Function constexpr SOA::PrintableNullSkin<SOA::ObjectProxy<SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::position> >::PrintableNullSkin(SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::SOAStorage*, SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::size_type) [inherited from SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::position] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      struct 
      {
        struct SOAStorage * m_stor = <<< Unknown tree: void_cst >>>;
        size_type m_idx = <<< Unknown tree: void_cst >>>;
      } D.101626;
    } D.101687;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  SOA::ObjectProxy<SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::position>::ObjectProxy (&((struct PrintableNullSkin *) this)->D.101686, *(struct SOAStorage * &) &D.101633, *(size_type &) &D.101634) >>>>>;
}


;; Function constexpr SOA::impl::SkinBase<SOA::PrintableNullSkin<SOA::ObjectProxy<SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::position> >, f_vertex>::SkinBase(SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::SOAStorage*, SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::size_type) [inherited from SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::position] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      struct 
      {
        struct 
        {
        } D.101737;
      } D.101740;
    } D.101955;
    struct 
    {
      struct 
      {
        struct 
        {
          struct SOAStorage * m_stor = <<< Unknown tree: void_cst >>>;
          size_type m_idx = <<< Unknown tree: void_cst >>>;
        } D.101626;
      } D.101687;
    } D.101956;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  SOA::PrintableNullSkin<SOA::ObjectProxy<SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::position> >::PrintableNullSkin (&((struct SkinBase *) this)->D.101954, *(struct SOAStorage * &) &D.101894, *(size_type &) &D.101895) >>>>>;
}


;; Function constexpr s_decayvertex<SOA::ObjectProxy<SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::position> >::s_decayvertex(SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::SOAStorage*, SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::size_type) [inherited from SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::position] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      struct 
      {
        struct 
        {
          struct 
          {
          } D.101737;
        } D.101740;
      } D.101955;
      struct 
      {
        struct 
        {
          struct 
          {
            struct SOAStorage * m_stor = <<< Unknown tree: void_cst >>>;
            size_type m_idx = <<< Unknown tree: void_cst >>>;
          } D.101626;
        } D.101687;
      } D.101956;
    } D.102304;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  SOA::impl::SkinBase<SOA::PrintableNullSkin<SOA::ObjectProxy<SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::position> >, f_vertex>::SkinBase (&((struct s_decayvertex *) this)->D.102303, *(struct SOAStorage * &) &D.102210, *(size_type &) &D.102211) >>>>>;
}


;; Function constexpr SOA::_View<STORAGE, SKIN, FIELDS>::const_reference SOA::_View<STORAGE, SKIN, FIELDS>::operator[](SOA::_View<STORAGE, SKIN, FIELDS>::size_type) const [with STORAGE = std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >; SKIN = s_decayvertex; FIELDS = {f_vertex}; SOA::_View<STORAGE, SKIN, FIELDS>::const_reference = const s_decayvertex<SOA::ObjectProxy<SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::position> >; SOA::_View<STORAGE, SKIN, FIELDS>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.108182, <<< Unknown tree: aggr_init_expr
  6
  __ct_comp 
  D.108182
  (struct s_decayvertex *) <<< Unknown tree: void_cst >>>
  (struct SOAStorage *) &((const struct _View *) this)->m_storage
  idx >>>>;, D.108182>>
   >>>;
__builtin_unreachable ();


;; Function foo(const SOA::Container<std::vector, s_decayvertex>&)::<lambda(auto:2)> [with auto:2 = s_decayvertex<SOA::ObjectProxy<SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::position> >] (null)
;; enabled by -tree-original


{
  <<cleanup_point return <retval> = f_vertex::accessors<SOA::impl::SkinBase<SOA::PrintableNullSkin<SOA::ObjectProxy<SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::position> >, f_vertex>, SOA::Typelist::typelist<f_vertex>, SOA::PrintableNullSkin<SOA::ObjectProxy<SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::position> > >::vertex ((struct accessors *) &decayvertexskin)->k > 3.0e+0>>;
}


;; Function SelectionView<CONTAINER, IndexSize>::SelectionView(const SelectionView<CONTAINER, IndexSize>&, Predicate_t&&) [with Predicate_t = foo(const SOA::Container<std::vector, s_decayvertex>&)::<lambda(auto:2)>; CONTAINER = const SOA::Container<std::vector, s_decayvertex>&; IndexSize = short unsigned int]::<lambda(auto:1)> [with auto:1 = short unsigned int] (null)
;; enabled by -tree-original


{
  struct SelectionView * const this [value-expr: ((const struct __lambda10 *) this)->__this];
  struct __lambda9 & predicate_i [value-expr: ((const struct __lambda10 *) this)->__predicate_i];

    struct SelectionView * const this [value-expr: ((const struct __lambda10 *) this)->__this];
    struct __lambda9 & predicate_i [value-expr: ((const struct __lambda10 *) this)->__predicate_i];
  {
    <<cleanup_point return <retval> = foo(const SOA::Container<std::vector, s_decayvertex>&)::<lambda(auto:2)>::operator()<s_decayvertex<SOA::ObjectProxy<SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::position> > > ((struct __lambda9 *) predicate_i, TARGET_EXPR <D.108113, SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::operator[] (&((const struct container_t *) ((struct SelectionView *) this)->m_container)->D.104277.D.104204.D.103696, (size_type) i)>)>>;
  }
}


;; Function _OIter std::copy_if(_IIter, _IIter, _OIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<const short unsigned int*, std::vector<short unsigned int, std::allocator<short unsigned int> > >; _OIter = std::back_insert_iterator<std::vector<short unsigned int, std::allocator<short unsigned int> > >; _Predicate = SelectionView<CONTAINER, IndexSize>::SelectionView(const SelectionView<CONTAINER, IndexSize>&, Predicate_t&&) [with Predicate_t = foo(const SOA::Container<std::vector, s_decayvertex>&)::<lambda(auto:2)>; CONTAINER = const SOA::Container<std::vector, s_decayvertex>&; IndexSize = short unsigned int]::<lambda(auto:1)>] (null)
;; enabled by -tree-original


while (1)
  {
    if (<<cleanup_point __gnu_cxx::operator!=<const short unsigned int*, std::vector<short unsigned int, std::allocator<short unsigned int> > > ((const struct __normal_iterator &) &__first, (const struct __normal_iterator &) &__last)>>) (void) 0; else goto <D.108192>;
    if (<<cleanup_point SelectionView<CONTAINER, IndexSize>::SelectionView(const SelectionView<CONTAINER, IndexSize>&, Predicate_t&&) [with Predicate_t = foo(const SOA::Container<std::vector, s_decayvertex>&)::<lambda(auto:2)>; CONTAINER = const SOA::Container<std::vector, s_decayvertex>&; IndexSize = short unsigned int]::<lambda(auto:1)>::operator()<short unsigned int> (&__pred, (int) *__gnu_cxx::__normal_iterator<const short unsigned int*, std::vector<short unsigned int, std::allocator<short unsigned int> > >::operator* (&__first))>>)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::back_insert_iterator<std::vector<short unsigned int, std::allocator<short unsigned int> > >::operator= ((struct back_insert_iterator *) std::back_insert_iterator<std::vector<short unsigned int, std::allocator<short unsigned int> > >::operator* (&__result), (const value_type &) __gnu_cxx::__normal_iterator<const short unsigned int*, std::vector<short unsigned int, std::allocator<short unsigned int> > >::operator* (&__first)) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::back_insert_iterator<std::vector<short unsigned int, std::allocator<short unsigned int> > >::operator++ (&__result) >>>>>;
      }
    <<cleanup_point (void) __gnu_cxx::__normal_iterator<const short unsigned int*, std::vector<short unsigned int, std::allocator<short unsigned int> > >::operator++ (&__first)>>;
  }
<D.108192>:;
<<cleanup_point return <retval> = TARGET_EXPR <D.108191, *(struct back_insert_iterator &) &__result>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator) [with _InIterator = char*; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


{
  typedef struct _Integral _Integral;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_construct_aux<char*> ((struct basic_string *) this, __beg, __end, TARGET_EXPR <D.108202, {}>;, <<< Unknown tree: empty_class_expr >>>;) >>>>>;
}


;; Function bool std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_is_local() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (const char *) std::__cxx11::basic_string<char>::_M_data ((const struct basic_string *) this) == std::__cxx11::basic_string<char>::_M_local_data ((const struct basic_string *) this)>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_destroy(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator_traits<std::allocator<char> >::deallocate ((struct allocator_type &) std::__cxx11::basic_string<char>::_M_get_allocator ((struct basic_string *) this), std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this), __size + 1) >>>>>
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator) [with _InIterator = wchar_t*; _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


{
  typedef struct _Integral _Integral;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_construct_aux<wchar_t*> ((struct basic_string *) this, __beg, __end, TARGET_EXPR <D.108218, {}>;, <<< Unknown tree: empty_class_expr >>>;) >>>>>;
}


;; Function bool std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_is_local() const [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (const wchar_t *) std::__cxx11::basic_string<wchar_t>::_M_data ((const struct basic_string *) this) == std::__cxx11::basic_string<wchar_t>::_M_local_data ((const struct basic_string *) this)>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_destroy(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator_traits<std::allocator<wchar_t> >::deallocate ((struct allocator_type &) std::__cxx11::basic_string<wchar_t>::_M_get_allocator ((struct basic_string *) this), std::__cxx11::basic_string<wchar_t>::_M_data ((struct basic_string *) this), __size + 1) >>>>>
   >>>;


;; Function constexpr _Tp* std::__addressof(_Tp&) [with _Tp = char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (char *) __r
   >>>;
__builtin_unreachable ();


;; Function constexpr _Tp* std::addressof(_Tp&) [with _Tp = char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__addressof<char> (__r)>>
   >>>;
__builtin_unreachable ();


;; Function static _Tp* std::pointer_traits<_Tp*>::pointer_to(std::__make_not_void<_Tp>&) [with _Tp = char; std::pointer_traits<_Tp*>::pointer = char*; std::__make_not_void<_Tp> = char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (char *) std::addressof<char> ((char &) __r)>>
   >>>;
__builtin_unreachable ();


;; Function std::allocator< <template-parameter-1-1> >::allocator(const std::allocator< <template-parameter-1-1> >&) [with _Tp = char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<char>::new_allocator ((struct new_allocator *) this, (const struct new_allocator &) __a) >>>>>;
    try
      {
        
      }
    catch
      {
        __gnu_cxx::new_allocator<char>::~new_allocator ((struct new_allocator *) this);
      }
  }
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct_aux(_InIterator, _InIterator, std::__false_type) [with _InIterator = const char*; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


{
  typedef struct _Tag _Tag;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_construct<const char*> ((struct basic_string *) this, __beg, __end, TARGET_EXPR <D.108359, *(struct forward_iterator_tag &) &TARGET_EXPR <D.108339, {.D.9788={.D.9784={.D.9780={}}}}>>;, <<< Unknown tree: empty_class_expr >>>;) >>>>>;
}


;; Function constexpr _Tp* std::__addressof(_Tp&) [with _Tp = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (wchar_t *) __r
   >>>;
__builtin_unreachable ();


;; Function constexpr _Tp* std::addressof(_Tp&) [with _Tp = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__addressof<wchar_t> (__r)>>
   >>>;
__builtin_unreachable ();


;; Function static _Tp* std::pointer_traits<_Tp*>::pointer_to(std::__make_not_void<_Tp>&) [with _Tp = wchar_t; std::pointer_traits<_Tp*>::pointer = wchar_t*; std::__make_not_void<_Tp> = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (wchar_t *) std::addressof<wchar_t> ((wchar_t &) __r)>>
   >>>;
__builtin_unreachable ();


;; Function std::allocator< <template-parameter-1-1> >::allocator(const std::allocator< <template-parameter-1-1> >&) [with _Tp = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<wchar_t>::new_allocator ((struct new_allocator *) this, (const struct new_allocator &) __a) >>>>>;
    try
      {
        
      }
    catch
      {
        __gnu_cxx::new_allocator<wchar_t>::~new_allocator ((struct new_allocator *) this);
      }
  }
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct_aux(_InIterator, _InIterator, std::__false_type) [with _InIterator = const wchar_t*; _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


{
  typedef struct _Tag _Tag;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_construct<const wchar_t*> ((struct basic_string *) this, __beg, __end, TARGET_EXPR <D.108403, *(struct forward_iterator_tag &) &TARGET_EXPR <D.108392, {.D.9788={.D.9784={.D.9780={}}}}>>;, <<< Unknown tree: empty_class_expr >>>;) >>>>>;
}


;; Function constexpr _Tp* std::__addressof(_Tp&) [with _Tp = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (char16_t *) __r
   >>>;
__builtin_unreachable ();


;; Function constexpr _Tp* std::addressof(_Tp&) [with _Tp = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__addressof<char16_t> (__r)>>
   >>>;
__builtin_unreachable ();


;; Function static _Tp* std::pointer_traits<_Tp*>::pointer_to(std::__make_not_void<_Tp>&) [with _Tp = char16_t; std::pointer_traits<_Tp*>::pointer = char16_t*; std::__make_not_void<_Tp> = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (char16_t *) std::addressof<char16_t> ((char16_t &) __r)>>
   >>>;
__builtin_unreachable ();


;; Function std::allocator< <template-parameter-1-1> >::allocator(const std::allocator< <template-parameter-1-1> >&) [with _Tp = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<char16_t>::new_allocator ((struct new_allocator *) this, (const struct new_allocator &) __a) >>>>>;
    try
      {
        
      }
    catch
      {
        __gnu_cxx::new_allocator<char16_t>::~new_allocator ((struct new_allocator *) this);
      }
  }
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct_aux(_InIterator, _InIterator, std::__false_type) [with _InIterator = const char16_t*; _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>] (null)
;; enabled by -tree-original


{
  typedef struct _Tag _Tag;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_construct<const char16_t*> ((struct basic_string *) this, __beg, __end, TARGET_EXPR <D.108447, *(struct forward_iterator_tag &) &TARGET_EXPR <D.108436, {.D.9788={.D.9784={.D.9780={}}}}>>;, <<< Unknown tree: empty_class_expr >>>;) >>>>>;
}


;; Function bool std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_is_local() const [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (const char16_t *) std::__cxx11::basic_string<char16_t>::_M_data ((const struct basic_string *) this) == std::__cxx11::basic_string<char16_t>::_M_local_data ((const struct basic_string *) this)>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_destroy(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator_traits<std::allocator<char16_t> >::deallocate ((struct allocator_type &) std::__cxx11::basic_string<char16_t>::_M_get_allocator ((struct basic_string *) this), std::__cxx11::basic_string<char16_t>::_M_data ((struct basic_string *) this), __size + 1) >>>>>
   >>>;


;; Function constexpr _Tp* std::__addressof(_Tp&) [with _Tp = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (char32_t *) __r
   >>>;
__builtin_unreachable ();


;; Function constexpr _Tp* std::addressof(_Tp&) [with _Tp = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__addressof<char32_t> (__r)>>
   >>>;
__builtin_unreachable ();


;; Function static _Tp* std::pointer_traits<_Tp*>::pointer_to(std::__make_not_void<_Tp>&) [with _Tp = char32_t; std::pointer_traits<_Tp*>::pointer = char32_t*; std::__make_not_void<_Tp> = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (char32_t *) std::addressof<char32_t> ((char32_t &) __r)>>
   >>>;
__builtin_unreachable ();


;; Function std::allocator< <template-parameter-1-1> >::allocator(const std::allocator< <template-parameter-1-1> >&) [with _Tp = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<char32_t>::new_allocator ((struct new_allocator *) this, (const struct new_allocator &) __a) >>>>>;
    try
      {
        
      }
    catch
      {
        __gnu_cxx::new_allocator<char32_t>::~new_allocator ((struct new_allocator *) this);
      }
  }
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct_aux(_InIterator, _InIterator, std::__false_type) [with _InIterator = const char32_t*; _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>] (null)
;; enabled by -tree-original


{
  typedef struct _Tag _Tag;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_construct<const char32_t*> ((struct basic_string *) this, __beg, __end, TARGET_EXPR <D.108493, *(struct forward_iterator_tag &) &TARGET_EXPR <D.108482, {.D.9788={.D.9784={.D.9780={}}}}>>;, <<< Unknown tree: empty_class_expr >>>;) >>>>>;
}


;; Function bool std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_is_local() const [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (const char32_t *) std::__cxx11::basic_string<char32_t>::_M_data ((const struct basic_string *) this) == std::__cxx11::basic_string<char32_t>::_M_local_data ((const struct basic_string *) this)>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_destroy(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator_traits<std::allocator<char32_t> >::deallocate ((struct allocator_type &) std::__cxx11::basic_string<char32_t>::_M_get_allocator ((struct basic_string *) this), std::__cxx11::basic_string<char32_t>::_M_data ((struct basic_string *) this), __size + 1) >>>>>
   >>>;


;; Function static _Alloc __gnu_cxx::__alloc_traits<_Alloc, <template-parameter-1-2> >::_S_select_on_copy(const _Alloc&) [with _Alloc = std::allocator<char>; <template-parameter-1-2> = char] (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.108498, <<< Unknown tree: aggr_init_expr
  4
  select_on_container_copy_construction
  D.108498
  (const struct allocator_type &) __a >>>>>>;


;; Function const allocator_type& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_get_allocator() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type = std::allocator<char>] (null)
;; enabled by -tree-original


return <retval> = (const struct allocator_type &) &((const struct basic_string *) this)->_M_dataplus;


;; Function constexpr typename std::remove_reference<_Tp>::type&& std::move(_Tp&&) [with _Tp = std::allocator<char>&; typename std::remove_reference<_Tp>::type = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (struct type &) __t
   >>>;
__builtin_unreachable ();


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_Alloc_hider::_Alloc_hider(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer, _Alloc&&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      struct 
      {
      } D.14825;
    } D.22939;
    char * _M_p;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator<char>::allocator ((struct allocator *) this, (const struct allocator &) std::move<std::allocator<char>&> ((struct allocator &) __a)) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Alloc_hider *) this)->_M_p = __dat) >>>>>;
    }
  catch
    {
      std::allocator<char>::~allocator ((struct allocator *) this);
    }
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_check_length(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const char*) const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


if (<<cleanup_point std::__cxx11::basic_string<char>::max_size ((const struct basic_string *) this) + (__n1 - std::__cxx11::basic_string<char>::size ((const struct basic_string *) this)) < __n2>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_length_error (__s) >>>>>;
  }


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Allocator>& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_append(const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


{
  const size_type __len;

    const size_type __len;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__len = std::__cxx11::basic_string<char>::size ((struct basic_string *) this) + __n) >>>>>;
  if (<<cleanup_point std::__cxx11::basic_string<char>::capacity ((struct basic_string *) this) >= (long unsigned int) __len>>)
    {
      if (__n != 0)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_S_copy (std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this) + (sizetype) std::__cxx11::basic_string<char>::size ((struct basic_string *) this), __s, __n) >>>>>;
        }
    }
  else
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_mutate ((struct basic_string *) this, std::__cxx11::basic_string<char>::size ((struct basic_string *) this), 0, __s, __n) >>>>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_set_length ((struct basic_string *) this, (size_type) __len) >>>>>;
  return <retval> = (struct basic_string &) this;
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_get_allocator() [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type = std::allocator<char>] (null)
;; enabled by -tree-original


return <retval> = (struct allocator_type &) &((struct basic_string *) this)->_M_dataplus;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_data(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->_M_dataplus._M_p = __p) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_capacity(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->D.22945._M_allocated_capacity = __capacity) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_length(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->_M_string_length = __length) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_set_length(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_length ((struct basic_string *) this, __n) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<char>::assign ((char_type &) (std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this) + (sizetype) NON_LVALUE_EXPR <__n>), (const char_type &) &TARGET_EXPR <D.108512, 0>) >>>>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__cxx11::basic_string<char>::_M_replace ((struct basic_string *) this, std::__cxx11::basic_string<char>::_M_check ((struct basic_string *) this, __pos, (const char *) "basic_string::replace"), std::__cxx11::basic_string<char>::_M_limit ((struct basic_string *) this, __pos, __n1), __s, __n2)>>;


;; Function std::vector<_Tp, _Alloc>::size_type std::vector<_Tp, _Alloc>::size() const [with _Tp = vertex_t; _Alloc = SOA::AlignedAllocator<vertex_t, 64>; std::vector<_Tp, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_type) (((struct vertex_t *) ((const struct vector *) this)->D.92757._M_impl._M_finish - (struct vertex_t *) ((const struct vector *) this)->D.92757._M_impl._M_start) /[ex] 4)
   >>>;
__builtin_unreachable ();


;; Function __gnu_cxx::new_allocator<_Tp>::new_allocator() [with _Tp = short unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function __gnu_cxx::new_allocator<_Tp>::~new_allocator() [with _Tp = short unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
  <D.108519>:;
   >>>;


;; Function std::_Vector_base<_Tp, _Alloc>::_Vector_base(std::size_t, const allocator_type&) [with _Tp = short unsigned int; _Alloc = std::allocator<short unsigned int>; std::size_t = long unsigned int; std::_Vector_base<_Tp, _Alloc>::allocator_type = std::allocator<short unsigned int>] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct _Vector_impl _M_impl;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::_Vector_base<short unsigned int, std::allocator<short unsigned int> >::_Vector_impl::_Vector_impl (&((struct _Vector_base *) this)->_M_impl, (const struct _Tp_alloc_type &) __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::_Vector_base<short unsigned int, std::allocator<short unsigned int> >::_M_create_storage ((struct _Vector_base *) this, __n) >>>>>;
    }
  catch
    {
      std::_Vector_base<short unsigned int, std::allocator<short unsigned int> >::_Vector_impl::~_Vector_impl (&((struct _Vector_base *) this)->_M_impl);
    }
}


;; Function void std::vector<_Tp, _Alloc>::_M_default_initialize(std::vector<_Tp, _Alloc>::size_type) [with _Tp = short unsigned int; _Alloc = std::allocator<short unsigned int>; std::vector<_Tp, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct vector *) this)->D.90158._M_impl._M_finish = std::__uninitialized_default_n_a<short unsigned int*, long unsigned int, short unsigned int> (((struct vector *) this)->D.90158._M_impl._M_start, __n, (struct allocator &) std::_Vector_base<short unsigned int, std::allocator<short unsigned int> >::_M_get_Tp_allocator (&((struct vector *) this)->D.90158))) >>>>>;


;; Function __gnu_cxx::__normal_iterator<_Iterator, _Container>::__normal_iterator(const _Iterator&) [with _Iterator = short unsigned int*; _Container = std::vector<short unsigned int, std::allocator<short unsigned int> >] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    short unsigned int * _M_current;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __normal_iterator *) this)->_M_current = (short unsigned int *) *__i) >>>>>;
  }
   >>>;


;; Function bool __gnu_cxx::operator!=(const __gnu_cxx::__normal_iterator<_Iterator, _Container>&, const __gnu_cxx::__normal_iterator<_Iterator, _Container>&) [with _Iterator = short unsigned int*; _Container = std::vector<short unsigned int, std::allocator<short unsigned int> >] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (short unsigned int *) *__gnu_cxx::__normal_iterator<short unsigned int*, std::vector<short unsigned int, std::allocator<short unsigned int> > >::base ((const struct __normal_iterator *) __lhs) != (short unsigned int *) *__gnu_cxx::__normal_iterator<short unsigned int*, std::vector<short unsigned int, std::allocator<short unsigned int> > >::base ((const struct __normal_iterator *) __rhs)>>
   >>>;
__builtin_unreachable ();


;; Function __gnu_cxx::__normal_iterator<_Iterator, _Container>& __gnu_cxx::__normal_iterator<_Iterator, _Container>::operator++() [with _Iterator = short unsigned int*; _Container = std::vector<short unsigned int, std::allocator<short unsigned int> >] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++((struct __normal_iterator *) this)->_M_current >>>>>;
  return <retval> = (struct __normal_iterator &) this;
   >>>;
__builtin_unreachable ();


;; Function __gnu_cxx::__normal_iterator<_Iterator, _Container>::reference __gnu_cxx::__normal_iterator<_Iterator, _Container>::operator*() const [with _Iterator = short unsigned int*; _Container = std::vector<short unsigned int, std::allocator<short unsigned int> >; __gnu_cxx::__normal_iterator<_Iterator, _Container>::reference = short unsigned int&] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (short unsigned int &) ((const struct __normal_iterator *) this)->_M_current
   >>>;
__builtin_unreachable ();


;; Function void std::_Vector_base<_Tp, _Alloc>::_M_deallocate(std::_Vector_base<_Tp, _Alloc>::pointer, std::size_t) [with _Tp = short unsigned int; _Alloc = std::allocator<short unsigned int>; std::_Vector_base<_Tp, _Alloc>::pointer = short unsigned int*; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


{
  typedef struct _Tr _Tr;

  if (__p != 0B)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator_traits<std::allocator<short unsigned int> >::deallocate ((struct allocator_type &) &((struct _Vector_base *) this)->_M_impl, __p, __n) >>>>>;
    }
}


;; Function void std::_Destroy(_ForwardIterator, _ForwardIterator) [with _ForwardIterator = short unsigned int*] (null)
;; enabled by -tree-original


{
  typedef _Value_type _Value_type;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::_Destroy_aux<true>::__destroy<short unsigned int*> (__first, __last) >>>>>;
}


;; Function std::_Vector_base<_Tp, _Alloc>::_Vector_base() [with _Tp = short unsigned int; _Alloc = std::allocator<short unsigned int>] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct _Vector_impl _M_impl;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Vector_base *) this)->_M_impl = <<< Unknown tree: aggr_init_expr
  4
  __ct_comp 
  D.108662
  (struct _Vector_impl *) <<< Unknown tree: void_cst >>> >>>) >>>>>;
  try
    {
      
    }
  catch
    {
      std::_Vector_base<short unsigned int, std::allocator<short unsigned int> >::_Vector_impl::~_Vector_impl (&((struct _Vector_base *) this)->_M_impl);
    }
}


;; Function __gnu_cxx::__normal_iterator<_Iterator, _Container>::__normal_iterator(const _Iterator&) [with _Iterator = const short unsigned int*; _Container = std::vector<short unsigned int, std::allocator<short unsigned int> >] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    const short unsigned int * _M_current;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __normal_iterator *) this)->_M_current = (const short unsigned int *) *__i) >>>>>;
  }
   >>>;


;; Function constexpr _Tp* std::__addressof(_Tp&) [with _Tp = std::vector<short unsigned int, std::allocator<short unsigned int> >] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (struct vector *) __r
   >>>;
__builtin_unreachable ();


;; Function std::back_insert_iterator<_Container>::back_insert_iterator(_Container&) [with _Container = std::vector<short unsigned int, std::allocator<short unsigned int> >] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
    } D.107315;
    struct vector * container;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct back_insert_iterator *) this)->container = std::__addressof<std::vector<short unsigned int, std::allocator<short unsigned int> > > (__x)) >>>>>;
}


;; Function bool __gnu_cxx::operator!=(const __gnu_cxx::__normal_iterator<_Iterator, _Container>&, const __gnu_cxx::__normal_iterator<_Iterator, _Container>&) [with _Iterator = const short unsigned int*; _Container = std::vector<short unsigned int, std::allocator<short unsigned int> >] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const short unsigned int *) *__gnu_cxx::__normal_iterator<const short unsigned int*, std::vector<short unsigned int, std::allocator<short unsigned int> > >::base ((const struct __normal_iterator *) __lhs) != (const short unsigned int *) *__gnu_cxx::__normal_iterator<const short unsigned int*, std::vector<short unsigned int, std::allocator<short unsigned int> > >::base ((const struct __normal_iterator *) __rhs)>>
   >>>;
__builtin_unreachable ();


;; Function __gnu_cxx::__normal_iterator<_Iterator, _Container>& __gnu_cxx::__normal_iterator<_Iterator, _Container>::operator++() [with _Iterator = const short unsigned int*; _Container = std::vector<short unsigned int, std::allocator<short unsigned int> >] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++((struct __normal_iterator *) this)->_M_current >>>>>;
  return <retval> = (struct __normal_iterator &) this;
   >>>;
__builtin_unreachable ();


;; Function __gnu_cxx::__normal_iterator<_Iterator, _Container>::reference __gnu_cxx::__normal_iterator<_Iterator, _Container>::operator*() const [with _Iterator = const short unsigned int*; _Container = std::vector<short unsigned int, std::allocator<short unsigned int> >; __gnu_cxx::__normal_iterator<_Iterator, _Container>::reference = const short unsigned int&] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const short unsigned int &) ((const struct __normal_iterator *) this)->_M_current
   >>>;
__builtin_unreachable ();


;; Function decltype (declval<f_vertex::accessors<SKIN, TL, BASE>&>()._get()) f_vertex::accessors<SKIN, TL, BASE>::vertex() [with SKIN = SOA::impl::SkinBase<SOA::PrintableNullSkin<SOA::ObjectProxy<SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::position> >, f_vertex>; TL = SOA::Typelist::typelist<f_vertex>; BASE = SOA::PrintableNullSkin<SOA::ObjectProxy<SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::position> >; decltype (declval<f_vertex::accessors<SKIN, TL, BASE>&>()._get()) = vertex_t&] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = SOA::impl::FieldBase<vertex_t, f_vertex>::AccessorBase<SOA::impl::SkinBase<SOA::PrintableNullSkin<SOA::ObjectProxy<SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::position> >, f_vertex>, 0, SOA::PrintableNullSkin<SOA::ObjectProxy<SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::position> > >::_get ((struct AccessorBase *) this)>>
   >>>;
__builtin_unreachable ();


;; Function std::back_insert_iterator<_Container>& std::back_insert_iterator<_Container>::operator*() [with _Container = std::vector<short unsigned int, std::allocator<short unsigned int> >] (null)
;; enabled by -tree-original


return <retval> = (struct back_insert_iterator &) this;


;; Function std::back_insert_iterator<_Container>& std::back_insert_iterator<_Container>::operator=(const typename _Container::value_type&) [with _Container = std::vector<short unsigned int, std::allocator<short unsigned int> >; typename _Container::value_type = short unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::vector<short unsigned int, std::allocator<short unsigned int> >::push_back (NON_LVALUE_EXPR <((struct back_insert_iterator *) this)->container>, __value) >>>>>;
return <retval> = (struct back_insert_iterator &) this;


;; Function std::back_insert_iterator<_Container>& std::back_insert_iterator<_Container>::operator++() [with _Container = std::vector<short unsigned int, std::allocator<short unsigned int> >] (null)
;; enabled by -tree-original


return <retval> = (struct back_insert_iterator &) this;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct_aux(_InIterator, _InIterator, std::__false_type) [with _InIterator = char*; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


{
  typedef struct _Tag _Tag;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_construct<char*> ((struct basic_string *) this, __beg, __end, TARGET_EXPR <D.108695, *(struct forward_iterator_tag &) &TARGET_EXPR <D.108684, {.D.9788={.D.9784={.D.9780={}}}}>>;, <<< Unknown tree: empty_class_expr >>>;) >>>>>;
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_local_data() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_pointer = const char*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (const char *) std::pointer_traits<const char*>::pointer_to ((const __make_not_void &) &((const struct basic_string *) this)->D.22945._M_local_buf)>>;


;; Function static void std::allocator_traits<std::allocator<_CharT> >::deallocate(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, std::allocator_traits<std::allocator<_CharT> >::pointer, std::allocator_traits<std::allocator<_CharT> >::size_type) [with _Tp = char; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<char>; std::allocator_traits<std::allocator<_CharT> >::pointer = char*; std::allocator_traits<std::allocator<_CharT> >::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<char>::deallocate ((struct new_allocator *) __a, __p, __n) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct_aux(_InIterator, _InIterator, std::__false_type) [with _InIterator = wchar_t*; _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


{
  typedef struct _Tag _Tag;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_construct<wchar_t*> ((struct basic_string *) this, __beg, __end, TARGET_EXPR <D.108747, *(struct forward_iterator_tag &) &TARGET_EXPR <D.108736, {.D.9788={.D.9784={.D.9780={}}}}>>;, <<< Unknown tree: empty_class_expr >>>;) >>>>>;
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_local_data() const [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_pointer = const wchar_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (const wchar_t *) std::pointer_traits<const wchar_t*>::pointer_to ((const __make_not_void &) &((const struct basic_string *) this)->D.24708._M_local_buf)>>;


;; Function static void std::allocator_traits<std::allocator<_CharT> >::deallocate(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, std::allocator_traits<std::allocator<_CharT> >::pointer, std::allocator_traits<std::allocator<_CharT> >::size_type) [with _Tp = wchar_t; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<wchar_t>; std::allocator_traits<std::allocator<_CharT> >::pointer = wchar_t*; std::allocator_traits<std::allocator<_CharT> >::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<wchar_t>::deallocate ((struct new_allocator *) __a, __p, __n) >>>>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_get_allocator() [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


return <retval> = (struct allocator_type &) &((struct basic_string *) this)->_M_dataplus;


;; Function __gnu_cxx::new_allocator<_Tp>::new_allocator(const __gnu_cxx::new_allocator<_Tp>&) [with _Tp = char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function constexpr typename std::iterator_traits<_Iterator>::iterator_category std::__iterator_category(const _Iter&) [with _Iter = const char*; typename std::iterator_traits<_Iterator>::iterator_category = std::random_access_iterator_tag] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.108812, {.D.9788={.D.9784={.D.9780={}}}}>>>;


;; Function constexpr typename std::iterator_traits<_Iterator>::difference_type std::__distance(_RandomAccessIterator, _RandomAccessIterator, std::random_access_iterator_tag) [with _RandomAccessIterator = const char*; typename std::iterator_traits<_Iterator>::difference_type = long int] (null)
;; enabled by -tree-original


return <retval> = __last - __first;


;; Function constexpr typename std::iterator_traits<_Iterator>::difference_type std::distance(_InputIterator, _InputIterator) [with _InputIterator = const char*; typename std::iterator_traits<_Iterator>::difference_type = long int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__distance<const char*> (__first, __last, TARGET_EXPR <D.108802, TARGET_EXPR <D.108815, {.D.9788={.D.9784={.D.9780={}}}}>>;, <<< Unknown tree: empty_class_expr >>>;)>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag) [with _FwdIterator = const char*; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


{
  size_type __dnew;

  if (<<cleanup_point __gnu_cxx::__is_null_pointer<const char> (__beg) && __beg != __end>>)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_logic_error ((const char *) "basic_string::_M_construct null not valid") >>>>>;
    }
    size_type __dnew;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__dnew = (size_type) std::distance<const char*> (__beg, __end)) >>>>>;
  if (__dnew > 15)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this, std::__cxx11::basic_string<char>::_M_create ((struct basic_string *) this, (size_type &) &__dnew, 0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_capacity ((struct basic_string *) this, __dnew) >>>>>;
    }
  <<< Unknown tree: try_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_S_copy_chars (std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this), __beg, __end) >>>>>
  <<< Unknown tree: handler
  
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __cxa_begin_catch (__builtin_eh_pointer (0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_dispose ((struct basic_string *) this) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  <<< Unknown tree: throw_expr
  __cxa_rethrow () >>> >>>>>;
    }
  finally
    {
      __cxa_end_catch ();
    } >>> >>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_set_length ((struct basic_string *) this, __dnew) >>>>>;
}


;; Function __gnu_cxx::new_allocator<_Tp>::new_allocator(const __gnu_cxx::new_allocator<_Tp>&) [with _Tp = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function constexpr typename std::iterator_traits<_Iterator>::iterator_category std::__iterator_category(const _Iter&) [with _Iter = const wchar_t*; typename std::iterator_traits<_Iterator>::iterator_category = std::random_access_iterator_tag] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.108846, {.D.9788={.D.9784={.D.9780={}}}}>>>;


;; Function constexpr typename std::iterator_traits<_Iterator>::difference_type std::__distance(_RandomAccessIterator, _RandomAccessIterator, std::random_access_iterator_tag) [with _RandomAccessIterator = const wchar_t*; typename std::iterator_traits<_Iterator>::difference_type = long int] (null)
;; enabled by -tree-original


return <retval> = (__last - __first) /[ex] 4;


;; Function constexpr typename std::iterator_traits<_Iterator>::difference_type std::distance(_InputIterator, _InputIterator) [with _InputIterator = const wchar_t*; typename std::iterator_traits<_Iterator>::difference_type = long int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__distance<const wchar_t*> (__first, __last, TARGET_EXPR <D.108836, TARGET_EXPR <D.108849, {.D.9788={.D.9784={.D.9780={}}}}>>;, <<< Unknown tree: empty_class_expr >>>;)>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag) [with _FwdIterator = const wchar_t*; _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


{
  size_type __dnew;

  if (<<cleanup_point __gnu_cxx::__is_null_pointer<const wchar_t> (__beg) && __beg != __end>>)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_logic_error ((const char *) "basic_string::_M_construct null not valid") >>>>>;
    }
    size_type __dnew;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__dnew = (size_type) std::distance<const wchar_t*> (__beg, __end)) >>>>>;
  if (__dnew > 3)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_data ((struct basic_string *) this, std::__cxx11::basic_string<wchar_t>::_M_create ((struct basic_string *) this, (size_type &) &__dnew, 0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_capacity ((struct basic_string *) this, __dnew) >>>>>;
    }
  <<< Unknown tree: try_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_S_copy_chars (std::__cxx11::basic_string<wchar_t>::_M_data ((struct basic_string *) this), __beg, __end) >>>>>
  <<< Unknown tree: handler
  
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __cxa_begin_catch (__builtin_eh_pointer (0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_dispose ((struct basic_string *) this) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  <<< Unknown tree: throw_expr
  __cxa_rethrow () >>> >>>>>;
    }
  finally
    {
      __cxa_end_catch ();
    } >>> >>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_set_length ((struct basic_string *) this, __dnew) >>>>>;
}


;; Function __gnu_cxx::new_allocator<_Tp>::new_allocator(const __gnu_cxx::new_allocator<_Tp>&) [with _Tp = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function constexpr typename std::iterator_traits<_Iterator>::iterator_category std::__iterator_category(const _Iter&) [with _Iter = const char16_t*; typename std::iterator_traits<_Iterator>::iterator_category = std::random_access_iterator_tag] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.109081, {.D.9788={.D.9784={.D.9780={}}}}>>>;


;; Function constexpr typename std::iterator_traits<_Iterator>::difference_type std::__distance(_RandomAccessIterator, _RandomAccessIterator, std::random_access_iterator_tag) [with _RandomAccessIterator = const char16_t*; typename std::iterator_traits<_Iterator>::difference_type = long int] (null)
;; enabled by -tree-original


return <retval> = (__last - __first) /[ex] 2;


;; Function constexpr typename std::iterator_traits<_Iterator>::difference_type std::distance(_InputIterator, _InputIterator) [with _InputIterator = const char16_t*; typename std::iterator_traits<_Iterator>::difference_type = long int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__distance<const char16_t*> (__first, __last, TARGET_EXPR <D.109071, TARGET_EXPR <D.109084, {.D.9788={.D.9784={.D.9780={}}}}>>;, <<< Unknown tree: empty_class_expr >>>;)>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag) [with _FwdIterator = const char16_t*; _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>] (null)
;; enabled by -tree-original


{
  size_type __dnew;

  if (<<cleanup_point __gnu_cxx::__is_null_pointer<const char16_t> (__beg) && __beg != __end>>)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_logic_error ((const char *) "basic_string::_M_construct null not valid") >>>>>;
    }
    size_type __dnew;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__dnew = (size_type) std::distance<const char16_t*> (__beg, __end)) >>>>>;
  if (__dnew > 7)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_data ((struct basic_string *) this, std::__cxx11::basic_string<char16_t>::_M_create ((struct basic_string *) this, (size_type &) &__dnew, 0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_capacity ((struct basic_string *) this, __dnew) >>>>>;
    }
  <<< Unknown tree: try_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_S_copy_chars (std::__cxx11::basic_string<char16_t>::_M_data ((struct basic_string *) this), __beg, __end) >>>>>
  <<< Unknown tree: handler
  
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __cxa_begin_catch (__builtin_eh_pointer (0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_dispose ((struct basic_string *) this) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  <<< Unknown tree: throw_expr
  __cxa_rethrow () >>> >>>>>;
    }
  finally
    {
      __cxa_end_catch ();
    } >>> >>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_set_length ((struct basic_string *) this, __dnew) >>>>>;
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_local_data() const [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_pointer = const char16_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (const char16_t *) std::pointer_traits<const char16_t*>::pointer_to ((const __make_not_void &) &((const struct basic_string *) this)->D.26596._M_local_buf)>>;


;; Function static void std::allocator_traits<std::allocator<_CharT> >::deallocate(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, std::allocator_traits<std::allocator<_CharT> >::pointer, std::allocator_traits<std::allocator<_CharT> >::size_type) [with _Tp = char16_t; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<char16_t>; std::allocator_traits<std::allocator<_CharT> >::pointer = char16_t*; std::allocator_traits<std::allocator<_CharT> >::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<char16_t>::deallocate ((struct new_allocator *) __a, __p, __n) >>>>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_get_allocator() [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type = std::allocator<char16_t>] (null)
;; enabled by -tree-original


return <retval> = (struct allocator_type &) &((struct basic_string *) this)->_M_dataplus;


;; Function __gnu_cxx::new_allocator<_Tp>::new_allocator(const __gnu_cxx::new_allocator<_Tp>&) [with _Tp = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function constexpr typename std::iterator_traits<_Iterator>::iterator_category std::__iterator_category(const _Iter&) [with _Iter = const char32_t*; typename std::iterator_traits<_Iterator>::iterator_category = std::random_access_iterator_tag] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.109362, {.D.9788={.D.9784={.D.9780={}}}}>>>;


;; Function constexpr typename std::iterator_traits<_Iterator>::difference_type std::__distance(_RandomAccessIterator, _RandomAccessIterator, std::random_access_iterator_tag) [with _RandomAccessIterator = const char32_t*; typename std::iterator_traits<_Iterator>::difference_type = long int] (null)
;; enabled by -tree-original


return <retval> = (__last - __first) /[ex] 4;


;; Function constexpr typename std::iterator_traits<_Iterator>::difference_type std::distance(_InputIterator, _InputIterator) [with _InputIterator = const char32_t*; typename std::iterator_traits<_Iterator>::difference_type = long int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__distance<const char32_t*> (__first, __last, TARGET_EXPR <D.109352, TARGET_EXPR <D.109365, {.D.9788={.D.9784={.D.9780={}}}}>>;, <<< Unknown tree: empty_class_expr >>>;)>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag) [with _FwdIterator = const char32_t*; _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>] (null)
;; enabled by -tree-original


{
  size_type __dnew;

  if (<<cleanup_point __gnu_cxx::__is_null_pointer<const char32_t> (__beg) && __beg != __end>>)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_logic_error ((const char *) "basic_string::_M_construct null not valid") >>>>>;
    }
    size_type __dnew;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__dnew = (size_type) std::distance<const char32_t*> (__beg, __end)) >>>>>;
  if (__dnew > 3)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_data ((struct basic_string *) this, std::__cxx11::basic_string<char32_t>::_M_create ((struct basic_string *) this, (size_type &) &__dnew, 0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_capacity ((struct basic_string *) this, __dnew) >>>>>;
    }
  <<< Unknown tree: try_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_S_copy_chars (std::__cxx11::basic_string<char32_t>::_M_data ((struct basic_string *) this), __beg, __end) >>>>>
  <<< Unknown tree: handler
  
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __cxa_begin_catch (__builtin_eh_pointer (0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_dispose ((struct basic_string *) this) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  <<< Unknown tree: throw_expr
  __cxa_rethrow () >>> >>>>>;
    }
  finally
    {
      __cxa_end_catch ();
    } >>> >>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_set_length ((struct basic_string *) this, __dnew) >>>>>;
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_local_data() const [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_pointer = const char32_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (const char32_t *) std::pointer_traits<const char32_t*>::pointer_to ((const __make_not_void &) &((const struct basic_string *) this)->D.28330._M_local_buf)>>;


;; Function static void std::allocator_traits<std::allocator<_CharT> >::deallocate(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, std::allocator_traits<std::allocator<_CharT> >::pointer, std::allocator_traits<std::allocator<_CharT> >::size_type) [with _Tp = char32_t; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<char32_t>; std::allocator_traits<std::allocator<_CharT> >::pointer = char32_t*; std::allocator_traits<std::allocator<_CharT> >::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<char32_t>::deallocate ((struct new_allocator *) __a, __p, __n) >>>>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_get_allocator() [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type = std::allocator<char32_t>] (null)
;; enabled by -tree-original


return <retval> = (struct allocator_type &) &((struct basic_string *) this)->_M_dataplus;


;; Function static std::allocator_traits<std::allocator<_CharT> >::allocator_type std::allocator_traits<std::allocator<_CharT> >::select_on_container_copy_construction(const allocator_type&) [with _Tp = char; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<char>] (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.109619, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.109619
  (struct allocator *) <<< Unknown tree: void_cst >>>
  (const struct allocator &) __rhs >>>>>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::max_size() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (std::allocator_traits<std::allocator<char> >::max_size ((const struct allocator_type &) std::__cxx11::basic_string<char>::_M_get_allocator ((const struct basic_string *) this)) + 18446744073709551615) / 2>>
   >>>;
__builtin_unreachable ();


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy(_CharT*, const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


if (__n == 1)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<char>::assign ((char_type &) NON_LVALUE_EXPR <__d>, (const char_type &) NON_LVALUE_EXPR <__s>) >>>>>;
  }
else
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::char_traits<char>::copy (__d, __s, __n) >>>>>;
  }


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_mutate(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


{
  const size_type __how_much;
  size_type __new_capacity;
  char * __r;

    const size_type __how_much;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__how_much = (std::__cxx11::basic_string<char>::length ((struct basic_string *) this) - __pos) - __len1) >>>>>;
    size_type __new_capacity;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__new_capacity = (std::__cxx11::basic_string<char>::length ((struct basic_string *) this) + __len2) - __len1) >>>>>;
    char * __r;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__r = std::__cxx11::basic_string<char>::_M_create ((struct basic_string *) this, (size_type &) &__new_capacity, std::__cxx11::basic_string<char>::capacity ((struct basic_string *) this))) >>>>>;
  if (__pos != 0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_S_copy (__r, (const char *) std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this), __pos) >>>>>;
    }
  if (__s != 0B && __len2 != 0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_S_copy (__r + (sizetype) NON_LVALUE_EXPR <__pos>, __s, __len2) >>>>>;
    }
  if (__how_much != 0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_S_copy (__r + ((sizetype) NON_LVALUE_EXPR <__pos> + (sizetype) NON_LVALUE_EXPR <__len2>), (const char *) (std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this) + ((sizetype) NON_LVALUE_EXPR <__pos> + (sizetype) NON_LVALUE_EXPR <__len1>)), (size_type) __how_much) >>>>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_dispose ((struct basic_string *) this) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this, __r) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_capacity ((struct basic_string *) this, __new_capacity) >>>>>;
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Allocator>& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_replace(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


{
  const size_type __old_size;
  const size_type __new_size = ((long unsigned int) __old_size + (long unsigned int) __len2) - __len1;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_check_length ((struct basic_string *) this, __len1, (size_type) __len2, (const char *) "basic_string::_M_replace") >>>>>;
    const size_type __old_size;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__old_size = std::__cxx11::basic_string<char>::size ((struct basic_string *) this)) >>>>>;
    const size_type __new_size = ((long unsigned int) __old_size + (long unsigned int) __len2) - __len1;
  {
    if (<<cleanup_point std::__cxx11::basic_string<char>::capacity ((struct basic_string *) this) >= (long unsigned int) __new_size>>)
      {
        {
          char * __p;
          const size_type __how_much = ((long unsigned int) __old_size - __pos) - __len1;

                    char * __p;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__p = std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this) + (sizetype) NON_LVALUE_EXPR <__pos>) >>>>>;
                    const size_type __how_much = ((long unsigned int) __old_size - __pos) - __len1;
          {
            if (<<cleanup_point std::__cxx11::basic_string<char>::_M_disjunct ((struct basic_string *) this, __s)>>)
              {
                if (__how_much != 0 && __len1 != (long unsigned int) __len2)
                  {
                    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_S_move (__p + (sizetype) __len2, (const char *) (__p + (sizetype) NON_LVALUE_EXPR <__len1>), (size_type) __how_much) >>>>>;
                  }
                if (__len2 != 0)
                  {
                    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_S_copy (__p, __s, (size_type) __len2) >>>>>;
                  }
              }
            else
              {
                {
                  if (__len2 != 0 && (long unsigned int) __len2 <= __len1)
                    {
                      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_S_move (__p, __s, (size_type) __len2) >>>>>;
                    }
                  if (__how_much != 0 && __len1 != (long unsigned int) __len2)
                    {
                      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_S_move (__p + (sizetype) __len2, (const char *) (__p + (sizetype) NON_LVALUE_EXPR <__len1>), (size_type) __how_much) >>>>>;
                    }
                  {
                    if ((long unsigned int) __len2 > __len1)
                      {
                        {
                          {
                            if (__s + (sizetype) __len2 <= (const char *) (__p + (sizetype) NON_LVALUE_EXPR <__len1>))
                              {
                                <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_S_move (__p, __s, (size_type) __len2) >>>>>;
                              }
                            else
                              {
                                {
                                  {
                                    if ((const char *) (__p + (sizetype) NON_LVALUE_EXPR <__len1>) <= __s)
                                      {
                                        <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_S_copy (__p, __s + ((sizetype) __len2 - (sizetype) NON_LVALUE_EXPR <__len1>), (size_type) __len2) >>>>>;
                                      }
                                    else
                                      {
                                        {
                                          const size_type __nleft = (size_type) ((__p + (sizetype) NON_LVALUE_EXPR <__len1>) - __s);

                                                                                    const size_type __nleft = (size_type) ((__p + (sizetype) NON_LVALUE_EXPR <__len1>) - __s);
                                          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_S_move (__p, __s, (size_type) __nleft) >>>>>;
                                          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_S_copy (__p + (sizetype) __nleft, (const char *) (__p + (sizetype) __len2), (long unsigned int) __len2 - (long unsigned int) __nleft) >>>>>;
                                        }
                                      }
                                  }
                                }
                              }
                          }
                        }
                      }
                  }
                }
              }
          }
        }
      }
    else
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_mutate ((struct basic_string *) this, __pos, __len1, __s, (size_type) __len2) >>>>>;
      }
  }
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_set_length ((struct basic_string *) this, (size_type) __new_size) >>>>>;
  return <retval> = (struct basic_string &) this;
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_check(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const char*) const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


if (<<cleanup_point std::__cxx11::basic_string<char>::size ((const struct basic_string *) this) < __pos>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range_fmt ((const char *) "%s: __pos (which is %zu) > this->size() (which is %zu)", __s, __pos, std::__cxx11::basic_string<char>::size ((const struct basic_string *) this)) >>>>>;
  }
return <retval> = __pos;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_limit(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    const bool __testoff;

        const bool __testoff;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__testoff = std::__cxx11::basic_string<char>::size ((const struct basic_string *) this) - __pos > __off) >>>>>;
    <<cleanup_point return <retval> = (bool) __testoff ? __off : std::__cxx11::basic_string<char>::size ((const struct basic_string *) this) - __pos>>;
  }
   >>>;
__builtin_unreachable ();


;; Function std::_Vector_base<_Tp, _Alloc>::_Vector_impl::_Vector_impl(const _Tp_alloc_type&) [with _Tp = short unsigned int; _Alloc = std::allocator<short unsigned int>; std::_Vector_base<_Tp, _Alloc>::_Tp_alloc_type = std::allocator<short unsigned int>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      struct 
      {
      } D.89232;
    } D.89449;
    short unsigned int * _M_start;
    short unsigned int * _M_finish;
    short unsigned int * _M_end_of_storage;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator<short unsigned int>::allocator ((struct allocator *) this, (const struct allocator &) __a) >>>>>;
    try
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Vector_impl *) this)->_M_start = 0B) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Vector_impl *) this)->_M_finish = 0B) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Vector_impl *) this)->_M_end_of_storage = 0B) >>>>>;
      }
    catch
      {
        std::allocator<short unsigned int>::~allocator ((struct allocator *) this);
      }
  }
   >>>;


;; Function void std::_Vector_base<_Tp, _Alloc>::_M_create_storage(std::size_t) [with _Tp = short unsigned int; _Alloc = std::allocator<short unsigned int>; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Vector_base *) this)->_M_impl._M_start = std::_Vector_base<short unsigned int, std::allocator<short unsigned int> >::_M_allocate ((struct _Vector_base *) this, __n)) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Vector_base *) this)->_M_impl._M_finish = ((struct _Vector_base *) this)->_M_impl._M_start) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Vector_base *) this)->_M_impl._M_end_of_storage = ((struct _Vector_base *) this)->_M_impl._M_start + (sizetype) (__n * 2)) >>>>>;


;; Function _ForwardIterator std::__uninitialized_default_n_a(_ForwardIterator, _Size, std::allocator<_Tp>&) [with _ForwardIterator = short unsigned int*; _Size = long unsigned int; _Tp = short unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__uninitialized_default_n<short unsigned int*, long unsigned int> (__first, __n)>>;


;; Function const _Iterator& __gnu_cxx::__normal_iterator<_Iterator, _Container>::base() const [with _Iterator = short unsigned int*; _Container = std::vector<short unsigned int, std::allocator<short unsigned int> >] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (short unsigned int * const &) &((const struct __normal_iterator *) this)->_M_current
   >>>;
__builtin_unreachable ();


;; Function static void std::allocator_traits<std::allocator<_CharT> >::deallocate(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, std::allocator_traits<std::allocator<_CharT> >::pointer, std::allocator_traits<std::allocator<_CharT> >::size_type) [with _Tp = short unsigned int; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<short unsigned int>; std::allocator_traits<std::allocator<_CharT> >::pointer = short unsigned int*; std::allocator_traits<std::allocator<_CharT> >::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<short unsigned int>::deallocate ((struct new_allocator *) __a, __p, __n) >>>>>;


;; Function static void std::_Destroy_aux<true>::__destroy(_ForwardIterator, _ForwardIterator) [with _ForwardIterator = short unsigned int*] (null)
;; enabled by -tree-original





;; Function std::_Vector_base<_Tp, _Alloc>::_Vector_impl::_Vector_impl() [with _Tp = short unsigned int; _Alloc = std::allocator<short unsigned int>] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      struct 
      {
      } D.89232;
    } D.89449;
    short unsigned int * _M_start;
    short unsigned int * _M_finish;
    short unsigned int * _M_end_of_storage;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator<short unsigned int>::allocator ((struct allocator *) this) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Vector_impl *) this)->_M_start = 0B) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Vector_impl *) this)->_M_finish = 0B) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Vector_impl *) this)->_M_end_of_storage = 0B) >>>>>;
    }
  catch
    {
      std::allocator<short unsigned int>::~allocator ((struct allocator *) this);
    }
}


;; Function const _Iterator& __gnu_cxx::__normal_iterator<_Iterator, _Container>::base() const [with _Iterator = const short unsigned int*; _Container = std::vector<short unsigned int, std::allocator<short unsigned int> >] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const short unsigned int * const &) &((const struct __normal_iterator *) this)->_M_current
   >>>;
__builtin_unreachable ();


;; Function decltype (declval<BASE&>().get<IDX>()) SOA::impl::FieldBase<T, FIELD>::AccessorBase<SKIN, IDX, BASE>::_get() [with SKIN = SOA::impl::SkinBase<SOA::PrintableNullSkin<SOA::ObjectProxy<SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::position> >, f_vertex>; long unsigned int IDX = 0; BASE = SOA::PrintableNullSkin<SOA::ObjectProxy<SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::position> >; T = vertex_t; FIELD = f_vertex; decltype (declval<BASE&>().get<IDX>()) = vertex_t&] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = SOA::ObjectProxy<SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::position>::get<0> (&((struct SkinBase *) this)->D.101954.D.101686)>>
   >>>;
__builtin_unreachable ();


;; Function void std::vector<_Tp, _Alloc>::push_back(const value_type&) [with _Tp = short unsigned int; _Alloc = std::allocator<short unsigned int>; std::vector<_Tp, _Alloc>::value_type = short unsigned int] (null)
;; enabled by -tree-original


if (((struct vector *) this)->D.90158._M_impl._M_finish != ((struct vector *) this)->D.90158._M_impl._M_end_of_storage)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator_traits<std::allocator<short unsigned int> >::construct<short unsigned int, const short unsigned int&> ((struct allocator_type &) &((struct vector *) this)->D.90158._M_impl, ((struct vector *) this)->D.90158._M_impl._M_finish, (const short unsigned int &) __x) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++((struct vector *) this)->D.90158._M_impl._M_finish >>>>>;
  }
else
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::vector<short unsigned int, std::allocator<short unsigned int> >::_M_realloc_insert<const short unsigned int&> ((struct vector *) this, TARGET_EXPR <D.109698, std::vector<short unsigned int, std::allocator<short unsigned int> >::end ((struct vector *) this)>, (const short unsigned int &) __x) >>>>>;
  }


;; Function constexpr typename std::iterator_traits<_Iterator>::iterator_category std::__iterator_category(const _Iter&) [with _Iter = char*; typename std::iterator_traits<_Iterator>::iterator_category = std::random_access_iterator_tag] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.109725, {.D.9788={.D.9784={.D.9780={}}}}>>>;


;; Function constexpr typename std::iterator_traits<_Iterator>::difference_type std::__distance(_RandomAccessIterator, _RandomAccessIterator, std::random_access_iterator_tag) [with _RandomAccessIterator = char*; typename std::iterator_traits<_Iterator>::difference_type = long int] (null)
;; enabled by -tree-original


return <retval> = __last - __first;


;; Function constexpr typename std::iterator_traits<_Iterator>::difference_type std::distance(_InputIterator, _InputIterator) [with _InputIterator = char*; typename std::iterator_traits<_Iterator>::difference_type = long int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__distance<char*> (__first, __last, TARGET_EXPR <D.109715, TARGET_EXPR <D.109728, {.D.9788={.D.9784={.D.9780={}}}}>>;, <<< Unknown tree: empty_class_expr >>>;)>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag) [with _FwdIterator = char*; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


{
  size_type __dnew;

  if (<<cleanup_point __gnu_cxx::__is_null_pointer<char> (__beg) && __beg != __end>>)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_logic_error ((const char *) "basic_string::_M_construct null not valid") >>>>>;
    }
    size_type __dnew;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__dnew = (size_type) std::distance<char*> (__beg, __end)) >>>>>;
  if (__dnew > 15)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this, std::__cxx11::basic_string<char>::_M_create ((struct basic_string *) this, (size_type &) &__dnew, 0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_capacity ((struct basic_string *) this, __dnew) >>>>>;
    }
  <<< Unknown tree: try_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_S_copy_chars (std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this), __beg, __end) >>>>>
  <<< Unknown tree: handler
  
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __cxa_begin_catch (__builtin_eh_pointer (0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_dispose ((struct basic_string *) this) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  <<< Unknown tree: throw_expr
  __cxa_rethrow () >>> >>>>>;
    }
  finally
    {
      __cxa_end_catch ();
    } >>> >>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_set_length ((struct basic_string *) this, __dnew) >>>>>;
}


;; Function constexpr _Tp* std::__addressof(_Tp&) [with _Tp = const char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const char *) __r
   >>>;
__builtin_unreachable ();


;; Function constexpr _Tp* std::addressof(_Tp&) [with _Tp = const char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__addressof<const char> (__r)>>
   >>>;
__builtin_unreachable ();


;; Function static _Tp* std::pointer_traits<_Tp*>::pointer_to(std::__make_not_void<_Tp>&) [with _Tp = const char; std::pointer_traits<_Tp*>::pointer = const char*; std::__make_not_void<_Tp> = const char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const char *) std::addressof<const char> ((const char &) __r)>>
   >>>;
__builtin_unreachable ();


;; Function void __gnu_cxx::new_allocator<_Tp>::deallocate(__gnu_cxx::new_allocator<_Tp>::pointer, __gnu_cxx::new_allocator<_Tp>::size_type) [with _Tp = char; __gnu_cxx::new_allocator<_Tp>::pointer = char*; __gnu_cxx::new_allocator<_Tp>::size_type = long unsigned int] (null)
;; enabled by -tree-original


if (0)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  operator delete ((void *) __p, 1) >>>>>;
    return;
  }
<<cleanup_point <<< Unknown tree: expr_stmt
  operator delete ((void *) __p) >>>>>;


;; Function constexpr typename std::iterator_traits<_Iterator>::iterator_category std::__iterator_category(const _Iter&) [with _Iter = wchar_t*; typename std::iterator_traits<_Iterator>::iterator_category = std::random_access_iterator_tag] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.109763, {.D.9788={.D.9784={.D.9780={}}}}>>>;


;; Function constexpr typename std::iterator_traits<_Iterator>::difference_type std::__distance(_RandomAccessIterator, _RandomAccessIterator, std::random_access_iterator_tag) [with _RandomAccessIterator = wchar_t*; typename std::iterator_traits<_Iterator>::difference_type = long int] (null)
;; enabled by -tree-original


return <retval> = (__last - __first) /[ex] 4;


;; Function constexpr typename std::iterator_traits<_Iterator>::difference_type std::distance(_InputIterator, _InputIterator) [with _InputIterator = wchar_t*; typename std::iterator_traits<_Iterator>::difference_type = long int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__distance<wchar_t*> (__first, __last, TARGET_EXPR <D.109753, TARGET_EXPR <D.109766, {.D.9788={.D.9784={.D.9780={}}}}>>;, <<< Unknown tree: empty_class_expr >>>;)>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag) [with _FwdIterator = wchar_t*; _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


{
  size_type __dnew;

  if (<<cleanup_point __gnu_cxx::__is_null_pointer<wchar_t> (__beg) && __beg != __end>>)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_logic_error ((const char *) "basic_string::_M_construct null not valid") >>>>>;
    }
    size_type __dnew;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__dnew = (size_type) std::distance<wchar_t*> (__beg, __end)) >>>>>;
  if (__dnew > 3)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_data ((struct basic_string *) this, std::__cxx11::basic_string<wchar_t>::_M_create ((struct basic_string *) this, (size_type &) &__dnew, 0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_capacity ((struct basic_string *) this, __dnew) >>>>>;
    }
  <<< Unknown tree: try_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_S_copy_chars (std::__cxx11::basic_string<wchar_t>::_M_data ((struct basic_string *) this), __beg, __end) >>>>>
  <<< Unknown tree: handler
  
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __cxa_begin_catch (__builtin_eh_pointer (0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_dispose ((struct basic_string *) this) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  <<< Unknown tree: throw_expr
  __cxa_rethrow () >>> >>>>>;
    }
  finally
    {
      __cxa_end_catch ();
    } >>> >>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_set_length ((struct basic_string *) this, __dnew) >>>>>;
}


;; Function constexpr _Tp* std::__addressof(_Tp&) [with _Tp = const wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const wchar_t *) __r
   >>>;
__builtin_unreachable ();


;; Function constexpr _Tp* std::addressof(_Tp&) [with _Tp = const wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__addressof<const wchar_t> (__r)>>
   >>>;
__builtin_unreachable ();


;; Function static _Tp* std::pointer_traits<_Tp*>::pointer_to(std::__make_not_void<_Tp>&) [with _Tp = const wchar_t; std::pointer_traits<_Tp*>::pointer = const wchar_t*; std::__make_not_void<_Tp> = const wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const wchar_t *) std::addressof<const wchar_t> ((const wchar_t &) __r)>>
   >>>;
__builtin_unreachable ();


;; Function void __gnu_cxx::new_allocator<_Tp>::deallocate(__gnu_cxx::new_allocator<_Tp>::pointer, __gnu_cxx::new_allocator<_Tp>::size_type) [with _Tp = wchar_t; __gnu_cxx::new_allocator<_Tp>::pointer = wchar_t*; __gnu_cxx::new_allocator<_Tp>::size_type = long unsigned int] (null)
;; enabled by -tree-original


if (0)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  operator delete ((void *) __p, 4) >>>>>;
    return;
  }
<<cleanup_point <<< Unknown tree: expr_stmt
  operator delete ((void *) __p) >>>>>;


;; Function bool __gnu_cxx::__is_null_pointer(_Type*) [with _Type = const char] (null)
;; enabled by -tree-original


return <retval> = __ptr == 0B;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_create(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type&, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


if (<<cleanup_point *__capacity > std::__cxx11::basic_string<char>::max_size ((struct basic_string *) this)>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_length_error ((const char *) "basic_string::_M_create") >>>>>;
  }
if (*__capacity > __old_capacity && *__capacity < __old_capacity * 2)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__capacity = __old_capacity * 2) >>>>>;
    if (<<cleanup_point *__capacity > std::__cxx11::basic_string<char>::max_size ((struct basic_string *) this)>>)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__capacity = std::__cxx11::basic_string<char>::max_size ((struct basic_string *) this)) >>>>>;
      }
  }
<<cleanup_point return <retval> = (char *) std::allocator_traits<std::allocator<char> >::allocate ((struct allocator_type &) std::__cxx11::basic_string<char>::_M_get_allocator ((struct basic_string *) this), *__capacity + 1)>>;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy_chars(_CharT*, const _CharT*, const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_S_copy (__p, __k1, (size_type) (__k2 - __k1)) >>>>>
   >>>;


;; Function bool __gnu_cxx::__is_null_pointer(_Type*) [with _Type = const wchar_t] (null)
;; enabled by -tree-original


return <retval> = __ptr == 0B;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_create(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type&, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = wchar_t*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


if (<<cleanup_point *__capacity > std::__cxx11::basic_string<wchar_t>::max_size ((struct basic_string *) this)>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_length_error ((const char *) "basic_string::_M_create") >>>>>;
  }
if (*__capacity > __old_capacity && *__capacity < __old_capacity * 2)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__capacity = __old_capacity * 2) >>>>>;
    if (<<cleanup_point *__capacity > std::__cxx11::basic_string<wchar_t>::max_size ((struct basic_string *) this)>>)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__capacity = std::__cxx11::basic_string<wchar_t>::max_size ((struct basic_string *) this)) >>>>>;
      }
  }
<<cleanup_point return <retval> = (wchar_t *) std::allocator_traits<std::allocator<wchar_t> >::allocate ((struct allocator_type &) std::__cxx11::basic_string<wchar_t>::_M_get_allocator ((struct basic_string *) this), *__capacity + 1)>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_data(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = wchar_t*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->_M_dataplus._M_p = __p) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_capacity(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->D.24708._M_allocated_capacity = __capacity) >>>>>;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy_chars(_CharT*, const _CharT*, const _CharT*) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_S_copy (__p, __k1, (size_type) ((__k2 - __k1) /[ex] 4)) >>>>>
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_set_length(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_length ((struct basic_string *) this, __n) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<wchar_t>::assign ((char_type &) (std::__cxx11::basic_string<wchar_t>::_M_data ((struct basic_string *) this) + (sizetype) (__n * 4)), (const char_type &) &TARGET_EXPR <D.109788, 0>) >>>>>;


;; Function bool __gnu_cxx::__is_null_pointer(_Type*) [with _Type = const char16_t] (null)
;; enabled by -tree-original


return <retval> = __ptr == 0B;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_create(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type&, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char16_t*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


if (<<cleanup_point *__capacity > std::__cxx11::basic_string<char16_t>::max_size ((struct basic_string *) this)>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_length_error ((const char *) "basic_string::_M_create") >>>>>;
  }
if (*__capacity > __old_capacity && *__capacity < __old_capacity * 2)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__capacity = __old_capacity * 2) >>>>>;
    if (<<cleanup_point *__capacity > std::__cxx11::basic_string<char16_t>::max_size ((struct basic_string *) this)>>)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__capacity = std::__cxx11::basic_string<char16_t>::max_size ((struct basic_string *) this)) >>>>>;
      }
  }
<<cleanup_point return <retval> = (char16_t *) std::allocator_traits<std::allocator<char16_t> >::allocate ((struct allocator_type &) std::__cxx11::basic_string<char16_t>::_M_get_allocator ((struct basic_string *) this), *__capacity + 1)>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_data(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char16_t*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->_M_dataplus._M_p = __p) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_capacity(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->D.26596._M_allocated_capacity = __capacity) >>>>>;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy_chars(_CharT*, const _CharT*, const _CharT*) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_S_copy (__p, __k1, (size_type) ((__k2 - __k1) /[ex] 2)) >>>>>
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_set_length(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_length ((struct basic_string *) this, __n) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<char16_t>::assign ((char_type &) (std::__cxx11::basic_string<char16_t>::_M_data ((struct basic_string *) this) + (sizetype) (__n * 2)), (const char_type &) &TARGET_EXPR <D.109795, 0>) >>>>>;


;; Function constexpr _Tp* std::__addressof(_Tp&) [with _Tp = const char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const char16_t *) __r
   >>>;
__builtin_unreachable ();


;; Function constexpr _Tp* std::addressof(_Tp&) [with _Tp = const char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__addressof<const char16_t> (__r)>>
   >>>;
__builtin_unreachable ();


;; Function static _Tp* std::pointer_traits<_Tp*>::pointer_to(std::__make_not_void<_Tp>&) [with _Tp = const char16_t; std::pointer_traits<_Tp*>::pointer = const char16_t*; std::__make_not_void<_Tp> = const char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const char16_t *) std::addressof<const char16_t> ((const char16_t &) __r)>>
   >>>;
__builtin_unreachable ();


;; Function void __gnu_cxx::new_allocator<_Tp>::deallocate(__gnu_cxx::new_allocator<_Tp>::pointer, __gnu_cxx::new_allocator<_Tp>::size_type) [with _Tp = char16_t; __gnu_cxx::new_allocator<_Tp>::pointer = char16_t*; __gnu_cxx::new_allocator<_Tp>::size_type = long unsigned int] (null)
;; enabled by -tree-original


if (0)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  operator delete ((void *) __p, 2) >>>>>;
    return;
  }
<<cleanup_point <<< Unknown tree: expr_stmt
  operator delete ((void *) __p) >>>>>;


;; Function bool __gnu_cxx::__is_null_pointer(_Type*) [with _Type = const char32_t] (null)
;; enabled by -tree-original


return <retval> = __ptr == 0B;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_create(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type&, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char32_t*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


if (<<cleanup_point *__capacity > std::__cxx11::basic_string<char32_t>::max_size ((struct basic_string *) this)>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_length_error ((const char *) "basic_string::_M_create") >>>>>;
  }
if (*__capacity > __old_capacity && *__capacity < __old_capacity * 2)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__capacity = __old_capacity * 2) >>>>>;
    if (<<cleanup_point *__capacity > std::__cxx11::basic_string<char32_t>::max_size ((struct basic_string *) this)>>)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__capacity = std::__cxx11::basic_string<char32_t>::max_size ((struct basic_string *) this)) >>>>>;
      }
  }
<<cleanup_point return <retval> = (char32_t *) std::allocator_traits<std::allocator<char32_t> >::allocate ((struct allocator_type &) std::__cxx11::basic_string<char32_t>::_M_get_allocator ((struct basic_string *) this), *__capacity + 1)>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_data(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char32_t*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->_M_dataplus._M_p = __p) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_capacity(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->D.28330._M_allocated_capacity = __capacity) >>>>>;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy_chars(_CharT*, const _CharT*, const _CharT*) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_S_copy (__p, __k1, (size_type) ((__k2 - __k1) /[ex] 4)) >>>>>
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_set_length(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_length ((struct basic_string *) this, __n) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<char32_t>::assign ((char_type &) (std::__cxx11::basic_string<char32_t>::_M_data ((struct basic_string *) this) + (sizetype) (__n * 4)), (const char_type &) &TARGET_EXPR <D.109810, 0>) >>>>>;


;; Function constexpr _Tp* std::__addressof(_Tp&) [with _Tp = const char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const char32_t *) __r
   >>>;
__builtin_unreachable ();


;; Function constexpr _Tp* std::addressof(_Tp&) [with _Tp = const char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__addressof<const char32_t> (__r)>>
   >>>;
__builtin_unreachable ();


;; Function static _Tp* std::pointer_traits<_Tp*>::pointer_to(std::__make_not_void<_Tp>&) [with _Tp = const char32_t; std::pointer_traits<_Tp*>::pointer = const char32_t*; std::__make_not_void<_Tp> = const char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const char32_t *) std::addressof<const char32_t> ((const char32_t &) __r)>>
   >>>;
__builtin_unreachable ();


;; Function void __gnu_cxx::new_allocator<_Tp>::deallocate(__gnu_cxx::new_allocator<_Tp>::pointer, __gnu_cxx::new_allocator<_Tp>::size_type) [with _Tp = char32_t; __gnu_cxx::new_allocator<_Tp>::pointer = char32_t*; __gnu_cxx::new_allocator<_Tp>::size_type = long unsigned int] (null)
;; enabled by -tree-original


if (0)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  operator delete ((void *) __p, 4) >>>>>;
    return;
  }
<<cleanup_point <<< Unknown tree: expr_stmt
  operator delete ((void *) __p) >>>>>;


;; Function static std::allocator_traits<std::allocator<_CharT> >::size_type std::allocator_traits<std::allocator<_CharT> >::max_size(const allocator_type&) [with _Tp = char; std::allocator_traits<std::allocator<_CharT> >::size_type = long unsigned int; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __gnu_cxx::new_allocator<char>::max_size ((const struct new_allocator *) __a)>>
   >>>;
__builtin_unreachable ();


;; Function bool std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_disjunct(const _CharT*) const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::less<const char*>::operator() (&TARGET_EXPR <D.109892, {.D.109833={}}>, __s, (const char *) std::__cxx11::basic_string<char>::_M_data ((const struct basic_string *) this)) || std::less<const char*>::operator() (&TARGET_EXPR <D.109902, {.D.109833={}}>, (const char *) (std::__cxx11::basic_string<char>::_M_data ((const struct basic_string *) this) + (sizetype) std::__cxx11::basic_string<char>::size ((const struct basic_string *) this)), __s)>>
   >>>;
__builtin_unreachable ();


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_move(_CharT*, const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


if (__n == 1)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<char>::assign ((char_type &) NON_LVALUE_EXPR <__d>, (const char_type &) NON_LVALUE_EXPR <__s>) >>>>>;
  }
else
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::char_traits<char>::move (__d, __s, __n) >>>>>;
  }


;; Function std::allocator< <template-parameter-1-1> >::allocator(const std::allocator< <template-parameter-1-1> >&) [with _Tp = short unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<short unsigned int>::new_allocator ((struct new_allocator *) this, (const struct new_allocator &) __a) >>>>>;
    try
      {
        
      }
    catch
      {
        __gnu_cxx::new_allocator<short unsigned int>::~new_allocator ((struct new_allocator *) this);
      }
  }
   >>>;


;; Function std::_Vector_base<_Tp, _Alloc>::pointer std::_Vector_base<_Tp, _Alloc>::_M_allocate(std::size_t) [with _Tp = short unsigned int; _Alloc = std::allocator<short unsigned int>; std::_Vector_base<_Tp, _Alloc>::pointer = short unsigned int*; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


{
  typedef struct _Tr _Tr;

  <<cleanup_point return <retval> = __n != 0 ? (short unsigned int *) std::allocator_traits<std::allocator<short unsigned int> >::allocate ((struct allocator_type &) &((struct _Vector_base *) this)->_M_impl, __n) : 0B>>;
}


;; Function _ForwardIterator std::__uninitialized_default_n(_ForwardIterator, _Size) [with _ForwardIterator = short unsigned int*; _Size = long unsigned int] (null)
;; enabled by -tree-original


{
  typedef _ValueType _ValueType;
  const bool __assignable = 1;

  <<cleanup_point   const bool __assignable = 1;>>;
  <<cleanup_point return <retval> = std::__uninitialized_default_n_1<true>::__uninit_default_n<short unsigned int*, long unsigned int> (__first, __n)>>;
}


;; Function void __gnu_cxx::new_allocator<_Tp>::deallocate(__gnu_cxx::new_allocator<_Tp>::pointer, __gnu_cxx::new_allocator<_Tp>::size_type) [with _Tp = short unsigned int; __gnu_cxx::new_allocator<_Tp>::pointer = short unsigned int*; __gnu_cxx::new_allocator<_Tp>::size_type = long unsigned int] (null)
;; enabled by -tree-original


if (0)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  operator delete ((void *) __p, 2) >>>>>;
    return;
  }
<<cleanup_point <<< Unknown tree: expr_stmt
  operator delete ((void *) __p) >>>>>;


;; Function decltype (get<MEMBERNO>((* declval<POSITION&>().stor()))[declval<POSITION&>().idx()]) SOA::ObjectProxy<POSITION>::get() [with typename POSITION::parent_type::size_type MEMBERNO = 0; POSITION = SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::position; decltype (get<MEMBERNO>((* declval<POSITION&>().stor()))[declval<POSITION&>().idx()]) = vertex_t&] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (struct value_type &) std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> >::operator[] ((struct __tuple_element_t *) std::get<0, std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > > ((struct tuple &) NON_LVALUE_EXPR <*SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::position::stor (&((struct ObjectProxy *) this)->D.101625)>), *SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::position::idx (&((struct ObjectProxy *) this)->D.101625))>>
   >>>;
__builtin_unreachable ();


;; Function constexpr _Tp&& std::forward(typename std::remove_reference<_Tp>::type&) [with _Tp = const short unsigned int&; typename std::remove_reference<_Tp>::type = const short unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const short unsigned int &) __t
   >>>;
__builtin_unreachable ();


;; Function static void std::allocator_traits<std::allocator<_CharT> >::construct(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, _Up*, _Args&& ...) [with _Up = short unsigned int; _Args = {const short unsigned int&}; _Tp = short unsigned int; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<short unsigned int>] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<short unsigned int>::construct<short unsigned int, const short unsigned int&> ((struct new_allocator *) __a, __p, std::forward<const short unsigned int&> ((const type &) __args#0)) >>>>>;


;; Function void std::vector<_Tp, _Alloc>::_M_realloc_insert(std::vector<_Tp, _Alloc>::iterator, _Args&& ...) [with _Args = {const short unsigned int&}; _Tp = short unsigned int; _Alloc = std::allocator<short unsigned int>; std::vector<_Tp, _Alloc>::iterator = __gnu_cxx::__normal_iterator<short unsigned int*, std::vector<short unsigned int, std::allocator<short unsigned int> > >; typename std::_Vector_base<_Tp, _Alloc>::pointer = short unsigned int*] (null)
;; enabled by -tree-original


{
  const size_type __len;
  short unsigned int * __old_start = ((struct vector *) this)->D.90158._M_impl._M_start;
  short unsigned int * __old_finish = ((struct vector *) this)->D.90158._M_impl._M_finish;
  const size_type __elems_before;
  short unsigned int * __new_start;
  short unsigned int * __new_finish = __new_start;

    const size_type __len;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__len = std::vector<short unsigned int, std::allocator<short unsigned int> >::_M_check_len ((struct vector *) this, 1, (const char *) "vector::_M_realloc_insert")) >>>>>;
    short unsigned int * __old_start = ((struct vector *) this)->D.90158._M_impl._M_start;
    short unsigned int * __old_finish = ((struct vector *) this)->D.90158._M_impl._M_finish;
    const size_type __elems_before;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__elems_before = (size_type) __gnu_cxx::operator-<short unsigned int*, std::vector<short unsigned int, std::allocator<short unsigned int> > > ((const struct __normal_iterator &) &__position, (const struct __normal_iterator &) &TARGET_EXPR <D.109991, std::vector<short unsigned int, std::allocator<short unsigned int> >::begin ((struct vector *) this)>)) >>>>>;
    short unsigned int * __new_start;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__new_start = std::_Vector_base<short unsigned int, std::allocator<short unsigned int> >::_M_allocate (&((struct vector *) this)->D.90158, (size_type) __len)) >>>>>;
    short unsigned int * __new_finish = __new_start;
  <<< Unknown tree: try_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator_traits<std::allocator<short unsigned int> >::construct<short unsigned int, const short unsigned int&> ((struct allocator_type &) &((struct vector *) this)->D.90158._M_impl, __new_start + (sizetype) ((long unsigned int) __elems_before * 2), std::forward<const short unsigned int&> ((const type &) __args#0)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__new_finish = 0B) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__new_finish = std::__uninitialized_move_if_noexcept_a<short unsigned int*, short unsigned int*, std::allocator<short unsigned int> > (__old_start, (short unsigned int *) *__gnu_cxx::__normal_iterator<short unsigned int*, std::vector<short unsigned int, std::allocator<short unsigned int> > >::base (&__position), __new_start, (struct allocator &) std::_Vector_base<short unsigned int, std::allocator<short unsigned int> >::_M_get_Tp_allocator (&((struct vector *) this)->D.90158))) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++__new_finish >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__new_finish = std::__uninitialized_move_if_noexcept_a<short unsigned int*, short unsigned int*, std::allocator<short unsigned int> > ((short unsigned int *) *__gnu_cxx::__normal_iterator<short unsigned int*, std::vector<short unsigned int, std::allocator<short unsigned int> > >::base (&__position), __old_finish, __new_finish, (struct allocator &) std::_Vector_base<short unsigned int, std::allocator<short unsigned int> >::_M_get_Tp_allocator (&((struct vector *) this)->D.90158))) >>>>>;
  <<< Unknown tree: handler
  
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __cxa_begin_catch (__builtin_eh_pointer (0)) >>>>>;
      if (__new_finish == 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator_traits<std::allocator<short unsigned int> >::destroy<short unsigned int> ((struct allocator_type &) &((struct vector *) this)->D.90158._M_impl, __new_start + (sizetype) ((long unsigned int) __elems_before * 2)) >>>>>;
        }
      else
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::_Destroy<short unsigned int*, short unsigned int> (__new_start, __new_finish, (struct allocator &) std::_Vector_base<short unsigned int, std::allocator<short unsigned int> >::_M_get_Tp_allocator (&((struct vector *) this)->D.90158)) >>>>>;
        }
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::_Vector_base<short unsigned int, std::allocator<short unsigned int> >::_M_deallocate (&((struct vector *) this)->D.90158, __new_start, (size_type) __len) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  <<< Unknown tree: throw_expr
  __cxa_rethrow () >>> >>>>>;
    }
  finally
    {
      __cxa_end_catch ();
    } >>> >>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::_Destroy<short unsigned int*, short unsigned int> (__old_start, __old_finish, (struct allocator &) std::_Vector_base<short unsigned int, std::allocator<short unsigned int> >::_M_get_Tp_allocator (&((struct vector *) this)->D.90158)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::_Vector_base<short unsigned int, std::allocator<short unsigned int> >::_M_deallocate (&((struct vector *) this)->D.90158, __old_start, (size_t) ((((struct vector *) this)->D.90158._M_impl._M_end_of_storage - __old_start) /[ex] 2)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct vector *) this)->D.90158._M_impl._M_start = __new_start) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct vector *) this)->D.90158._M_impl._M_finish = __new_finish) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct vector *) this)->D.90158._M_impl._M_end_of_storage = __new_start + (sizetype) ((long unsigned int) __len * 2)) >>>>>;
}


;; Function bool __gnu_cxx::__is_null_pointer(_Type*) [with _Type = char] (null)
;; enabled by -tree-original


return <retval> = __ptr == 0B;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy_chars(_CharT*, _CharT*, _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_S_copy (__p, (const char *) __k1, (size_type) (__k2 - __k1)) >>>>>
   >>>;


;; Function bool __gnu_cxx::__is_null_pointer(_Type*) [with _Type = wchar_t] (null)
;; enabled by -tree-original


return <retval> = __ptr == 0B;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy_chars(_CharT*, _CharT*, _CharT*) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_S_copy (__p, (const wchar_t *) __k1, (size_type) ((__k2 - __k1) /[ex] 4)) >>>>>
   >>>;


;; Function static _Tp* std::allocator_traits<std::allocator<_CharT> >::allocate(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, std::allocator_traits<std::allocator<_CharT> >::size_type) [with _Tp = char; std::allocator_traits<std::allocator<_CharT> >::pointer = char*; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<char>; std::allocator_traits<std::allocator<_CharT> >::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (char *) __gnu_cxx::new_allocator<char>::allocate ((struct new_allocator *) __a, __n, 0B)>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::max_size() const [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (std::allocator_traits<std::allocator<wchar_t> >::max_size ((const struct allocator_type &) std::__cxx11::basic_string<wchar_t>::_M_get_allocator ((const struct basic_string *) this)) + 18446744073709551615) / 2>>
   >>>;
__builtin_unreachable ();


;; Function static _Tp* std::allocator_traits<std::allocator<_CharT> >::allocate(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, std::allocator_traits<std::allocator<_CharT> >::size_type) [with _Tp = wchar_t; std::allocator_traits<std::allocator<_CharT> >::pointer = wchar_t*; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<wchar_t>; std::allocator_traits<std::allocator<_CharT> >::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (wchar_t *) __gnu_cxx::new_allocator<wchar_t>::allocate ((struct new_allocator *) __a, __n, 0B)>>;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy(_CharT*, const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


if (__n == 1)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<wchar_t>::assign ((char_type &) NON_LVALUE_EXPR <__d>, (const char_type &) NON_LVALUE_EXPR <__s>) >>>>>;
  }
else
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::char_traits<wchar_t>::copy (__d, __s, __n) >>>>>;
  }


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_length(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->_M_string_length = __length) >>>>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::max_size() const [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (std::allocator_traits<std::allocator<char16_t> >::max_size ((const struct allocator_type &) std::__cxx11::basic_string<char16_t>::_M_get_allocator ((const struct basic_string *) this)) + 18446744073709551615) / 2>>
   >>>;
__builtin_unreachable ();


;; Function static _Tp* std::allocator_traits<std::allocator<_CharT> >::allocate(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, std::allocator_traits<std::allocator<_CharT> >::size_type) [with _Tp = char16_t; std::allocator_traits<std::allocator<_CharT> >::pointer = char16_t*; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<char16_t>; std::allocator_traits<std::allocator<_CharT> >::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (char16_t *) __gnu_cxx::new_allocator<char16_t>::allocate ((struct new_allocator *) __a, __n, 0B)>>;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy(_CharT*, const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


if (__n == 1)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<char16_t>::assign ((char_type &) NON_LVALUE_EXPR <__d>, (const char_type &) NON_LVALUE_EXPR <__s>) >>>>>;
  }
else
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::char_traits<char16_t>::copy (__d, __s, __n) >>>>>;
  }


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_length(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->_M_string_length = __length) >>>>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::max_size() const [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (std::allocator_traits<std::allocator<char32_t> >::max_size ((const struct allocator_type &) std::__cxx11::basic_string<char32_t>::_M_get_allocator ((const struct basic_string *) this)) + 18446744073709551615) / 2>>
   >>>;
__builtin_unreachable ();


;; Function static _Tp* std::allocator_traits<std::allocator<_CharT> >::allocate(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, std::allocator_traits<std::allocator<_CharT> >::size_type) [with _Tp = char32_t; std::allocator_traits<std::allocator<_CharT> >::pointer = char32_t*; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<char32_t>; std::allocator_traits<std::allocator<_CharT> >::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (char32_t *) __gnu_cxx::new_allocator<char32_t>::allocate ((struct new_allocator *) __a, __n, 0B)>>;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy(_CharT*, const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


if (__n == 1)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<char32_t>::assign ((char_type &) NON_LVALUE_EXPR <__d>, (const char_type &) NON_LVALUE_EXPR <__s>) >>>>>;
  }
else
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::char_traits<char32_t>::copy (__d, __s, __n) >>>>>;
  }


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_length(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->_M_string_length = __length) >>>>>;


;; Function __gnu_cxx::new_allocator<_Tp>::size_type __gnu_cxx::new_allocator<_Tp>::max_size() const [with _Tp = char; __gnu_cxx::new_allocator<_Tp>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 18446744073709551615
   >>>;
__builtin_unreachable ();


;; Function constexpr bool std::less<_Tp*>::operator()(_Tp*, _Tp*) const [with _Tp = const char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  if (__builtin_constant_p (__x < __y) != 0)
    {
      return <retval> = __x < __y;
    }
  return <retval> = (long unsigned int) __x < (long unsigned int) __y;
   >>>;
__builtin_unreachable ();


;; Function __gnu_cxx::new_allocator<_Tp>::new_allocator(const __gnu_cxx::new_allocator<_Tp>&) [with _Tp = short unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function static _Tp* std::allocator_traits<std::allocator<_CharT> >::allocate(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, std::allocator_traits<std::allocator<_CharT> >::size_type) [with _Tp = short unsigned int; std::allocator_traits<std::allocator<_CharT> >::pointer = short unsigned int*; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<short unsigned int>; std::allocator_traits<std::allocator<_CharT> >::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (short unsigned int *) __gnu_cxx::new_allocator<short unsigned int>::allocate ((struct new_allocator *) __a, __n, 0B)>>;


;; Function static _ForwardIterator std::__uninitialized_default_n_1<true>::__uninit_default_n(_ForwardIterator, _Size) [with _ForwardIterator = short unsigned int*; _Size = long unsigned int] (null)
;; enabled by -tree-original


{
  typedef _ValueType _ValueType;

  <<cleanup_point return <retval> = std::fill_n<short unsigned int*, long unsigned int, short unsigned int> (__first, __n, (const short unsigned int &) &TARGET_EXPR <D.110039, 0>)>>;
}


;; Function SOA::_View<STORAGE, SKIN, FIELDS>::SOAStorage*& SOA::_View<STORAGE, SKIN, FIELDS>::position::stor() [with STORAGE = std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >; SKIN = s_decayvertex; FIELDS = {f_vertex}; SOA::_View<STORAGE, SKIN, FIELDS>::SOAStorage = std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (struct SOAStorage * &) &((struct position *) this)->m_stor
   >>>;
__builtin_unreachable ();


;; Function SOA::_View<STORAGE, SKIN, FIELDS>::size_type& SOA::_View<STORAGE, SKIN, FIELDS>::position::idx() [with STORAGE = std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >; SKIN = s_decayvertex; FIELDS = {f_vertex}; SOA::_View<STORAGE, SKIN, FIELDS>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_type &) &((struct position *) this)->m_idx
   >>>;
__builtin_unreachable ();


;; Function void __gnu_cxx::new_allocator<_Tp>::construct(_Up*, _Args&& ...) [with _Up = short unsigned int; _Args = {const short unsigned int&}; _Tp = short unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (TARGET_EXPR <D.110045, (short unsigned int) *std::forward<const short unsigned int&> ((const type &) __args#0)>;, TARGET_EXPR <D.110043, (void *) __p>;, TARGET_EXPR <D.110044, operator new (2, NON_LVALUE_EXPR <D.110043>)>;;, try
    {
      *(short unsigned int *) D.110044 = NON_LVALUE_EXPR <D.110045>;
    }
  catch
    {
      operator delete (D.110044, NON_LVALUE_EXPR <D.110043>);
    }, (short unsigned int *) D.110044;) >>>>>;


;; Function std::vector<_Tp, _Alloc>::size_type std::vector<_Tp, _Alloc>::_M_check_len(std::vector<_Tp, _Alloc>::size_type, const char*) const [with _Tp = short unsigned int; _Alloc = std::allocator<short unsigned int>; std::vector<_Tp, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


{
  const size_type __len;

  if (<<cleanup_point std::vector<short unsigned int, std::allocator<short unsigned int> >::max_size ((const struct vector *) this) - std::vector<short unsigned int, std::allocator<short unsigned int> >::size ((const struct vector *) this) < __n>>)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_length_error (__s) >>>>>;
    }
    const size_type __len;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__len = std::vector<short unsigned int, std::allocator<short unsigned int> >::size ((const struct vector *) this) + (long unsigned int) *std::max<long unsigned int> ((const long unsigned int &) &TARGET_EXPR <D.110048, std::vector<short unsigned int, std::allocator<short unsigned int> >::size ((const struct vector *) this)>, (const long unsigned int &) &__n)) >>>>>;
  <<cleanup_point return <retval> = std::vector<short unsigned int, std::allocator<short unsigned int> >::size ((const struct vector *) this) > (long unsigned int) __len || std::vector<short unsigned int, std::allocator<short unsigned int> >::max_size ((const struct vector *) this) < (long unsigned int) __len ? std::vector<short unsigned int, std::allocator<short unsigned int> >::max_size ((const struct vector *) this) : (size_type) __len>>;
}


;; Function typename __gnu_cxx::__normal_iterator<_Iterator, _Container>::difference_type __gnu_cxx::operator-(const __gnu_cxx::__normal_iterator<_Iterator, _Container>&, const __gnu_cxx::__normal_iterator<_Iterator, _Container>&) [with _Iterator = short unsigned int*; _Container = std::vector<short unsigned int, std::allocator<short unsigned int> >; typename __gnu_cxx::__normal_iterator<_Iterator, _Container>::difference_type = long int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = ((short unsigned int *) *__gnu_cxx::__normal_iterator<short unsigned int*, std::vector<short unsigned int, std::allocator<short unsigned int> > >::base ((const struct __normal_iterator *) __lhs) - (short unsigned int *) *__gnu_cxx::__normal_iterator<short unsigned int*, std::vector<short unsigned int, std::allocator<short unsigned int> > >::base ((const struct __normal_iterator *) __rhs)) /[ex] 2>>
   >>>;
__builtin_unreachable ();


;; Function constexpr _ReturnType std::__make_move_if_noexcept_iterator(_Tp*) [with _Tp = short unsigned int; _ReturnType = std::move_iterator<short unsigned int*>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.110259, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.110259
  (struct move_iterator *) <<< Unknown tree: void_cst >>>
  __i >>>>;, D.110259>>;


;; Function _ForwardIterator std::__uninitialized_move_if_noexcept_a(_InputIterator, _InputIterator, _ForwardIterator, _Allocator&) [with _InputIterator = short unsigned int*; _ForwardIterator = short unsigned int*; _Allocator = std::allocator<short unsigned int>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__uninitialized_copy_a<std::move_iterator<short unsigned int*>, short unsigned int*, short unsigned int> (TARGET_EXPR <D.110219, std::__make_move_if_noexcept_iterator<short unsigned int> (__first)>, TARGET_EXPR <D.110229, std::__make_move_if_noexcept_iterator<short unsigned int> (__last)>, __result, __alloc)>>;


;; Function static void std::allocator_traits<std::allocator<_CharT> >::destroy(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, _Up*) [with _Up = short unsigned int; _Tp = short unsigned int; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<short unsigned int>] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<short unsigned int>::destroy<short unsigned int> ((struct new_allocator *) __a, __p) >>>>>;


;; Function _Tp* __gnu_cxx::new_allocator<_Tp>::allocate(__gnu_cxx::new_allocator<_Tp>::size_type, const void*) [with _Tp = char; __gnu_cxx::new_allocator<_Tp>::pointer = char*; __gnu_cxx::new_allocator<_Tp>::size_type = long unsigned int] (null)
;; enabled by -tree-original


{
  if (<<cleanup_point __gnu_cxx::new_allocator<char>::max_size ((struct new_allocator *) this) < __n>>)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_bad_alloc () >>>>>;
    }
  {
    if (0)
      {
        {
          align_val_t __al = 1;

          <<cleanup_point           align_val_t __al = 1;>>;
          <<cleanup_point return <retval> = (char *) operator new (NON_LVALUE_EXPR <__n>, __al)>>;
        }
      }
  }
  <<cleanup_point return <retval> = (char *) operator new (NON_LVALUE_EXPR <__n>)>>;
}


;; Function static std::allocator_traits<std::allocator<_CharT> >::size_type std::allocator_traits<std::allocator<_CharT> >::max_size(const allocator_type&) [with _Tp = wchar_t; std::allocator_traits<std::allocator<_CharT> >::size_type = long unsigned int; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __gnu_cxx::new_allocator<wchar_t>::max_size ((const struct new_allocator *) __a)>>
   >>>;
__builtin_unreachable ();


;; Function const allocator_type& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_get_allocator() const [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


return <retval> = (const struct allocator_type &) &((const struct basic_string *) this)->_M_dataplus;


;; Function _Tp* __gnu_cxx::new_allocator<_Tp>::allocate(__gnu_cxx::new_allocator<_Tp>::size_type, const void*) [with _Tp = wchar_t; __gnu_cxx::new_allocator<_Tp>::pointer = wchar_t*; __gnu_cxx::new_allocator<_Tp>::size_type = long unsigned int] (null)
;; enabled by -tree-original


{
  if (<<cleanup_point __gnu_cxx::new_allocator<wchar_t>::max_size ((struct new_allocator *) this) < __n>>)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_bad_alloc () >>>>>;
    }
  {
    if (0)
      {
        {
          align_val_t __al = 4;

          <<cleanup_point           align_val_t __al = 4;>>;
          <<cleanup_point return <retval> = (wchar_t *) operator new (__n * 4, __al)>>;
        }
      }
  }
  <<cleanup_point return <retval> = (wchar_t *) operator new (__n * 4)>>;
}


;; Function static std::allocator_traits<std::allocator<_CharT> >::size_type std::allocator_traits<std::allocator<_CharT> >::max_size(const allocator_type&) [with _Tp = char16_t; std::allocator_traits<std::allocator<_CharT> >::size_type = long unsigned int; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<char16_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __gnu_cxx::new_allocator<char16_t>::max_size ((const struct new_allocator *) __a)>>
   >>>;
__builtin_unreachable ();


;; Function const allocator_type& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_get_allocator() const [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type = std::allocator<char16_t>] (null)
;; enabled by -tree-original


return <retval> = (const struct allocator_type &) &((const struct basic_string *) this)->_M_dataplus;


;; Function _Tp* __gnu_cxx::new_allocator<_Tp>::allocate(__gnu_cxx::new_allocator<_Tp>::size_type, const void*) [with _Tp = char16_t; __gnu_cxx::new_allocator<_Tp>::pointer = char16_t*; __gnu_cxx::new_allocator<_Tp>::size_type = long unsigned int] (null)
;; enabled by -tree-original


{
  if (<<cleanup_point __gnu_cxx::new_allocator<char16_t>::max_size ((struct new_allocator *) this) < __n>>)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_bad_alloc () >>>>>;
    }
  {
    if (0)
      {
        {
          align_val_t __al = 2;

          <<cleanup_point           align_val_t __al = 2;>>;
          <<cleanup_point return <retval> = (char16_t *) operator new (__n * 2, __al)>>;
        }
      }
  }
  <<cleanup_point return <retval> = (char16_t *) operator new (__n * 2)>>;
}


;; Function static std::allocator_traits<std::allocator<_CharT> >::size_type std::allocator_traits<std::allocator<_CharT> >::max_size(const allocator_type&) [with _Tp = char32_t; std::allocator_traits<std::allocator<_CharT> >::size_type = long unsigned int; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<char32_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __gnu_cxx::new_allocator<char32_t>::max_size ((const struct new_allocator *) __a)>>
   >>>;
__builtin_unreachable ();


;; Function const allocator_type& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_get_allocator() const [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type = std::allocator<char32_t>] (null)
;; enabled by -tree-original


return <retval> = (const struct allocator_type &) &((const struct basic_string *) this)->_M_dataplus;


;; Function _Tp* __gnu_cxx::new_allocator<_Tp>::allocate(__gnu_cxx::new_allocator<_Tp>::size_type, const void*) [with _Tp = char32_t; __gnu_cxx::new_allocator<_Tp>::pointer = char32_t*; __gnu_cxx::new_allocator<_Tp>::size_type = long unsigned int] (null)
;; enabled by -tree-original


{
  if (<<cleanup_point __gnu_cxx::new_allocator<char32_t>::max_size ((struct new_allocator *) this) < __n>>)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_bad_alloc () >>>>>;
    }
  {
    if (0)
      {
        {
          align_val_t __al = 4;

          <<cleanup_point           align_val_t __al = 4;>>;
          <<cleanup_point return <retval> = (char32_t *) operator new (__n * 4, __al)>>;
        }
      }
  }
  <<cleanup_point return <retval> = (char32_t *) operator new (__n * 4)>>;
}


;; Function _Tp* __gnu_cxx::new_allocator<_Tp>::allocate(__gnu_cxx::new_allocator<_Tp>::size_type, const void*) [with _Tp = short unsigned int; __gnu_cxx::new_allocator<_Tp>::pointer = short unsigned int*; __gnu_cxx::new_allocator<_Tp>::size_type = long unsigned int] (null)
;; enabled by -tree-original


{
  if (<<cleanup_point __gnu_cxx::new_allocator<short unsigned int>::max_size ((struct new_allocator *) this) < __n>>)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_bad_alloc () >>>>>;
    }
  {
    if (0)
      {
        {
          align_val_t __al = 2;

          <<cleanup_point           align_val_t __al = 2;>>;
          <<cleanup_point return <retval> = (short unsigned int *) operator new (__n * 2, __al)>>;
        }
      }
  }
  <<cleanup_point return <retval> = (short unsigned int *) operator new (__n * 2)>>;
}


;; Function _OI std::fill_n(_OI, _Size, const _Tp&) [with _OI = short unsigned int*; _Size = long unsigned int; _Tp = short unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (short unsigned int *) std::__fill_n_a<short unsigned int*, long unsigned int, short unsigned int> (std::__niter_base<short unsigned int*> (__first), __n, __value)>>;


;; Function std::vector<_Tp, _Alloc>::size_type std::vector<_Tp, _Alloc>::max_size() const [with _Tp = short unsigned int; _Alloc = std::allocator<short unsigned int>; std::vector<_Tp, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::allocator_traits<std::allocator<short unsigned int> >::max_size ((const struct allocator_type &) std::_Vector_base<short unsigned int, std::allocator<short unsigned int> >::_M_get_Tp_allocator (&((const struct vector *) this)->D.90158))>>
   >>>;
__builtin_unreachable ();


;; Function std::vector<_Tp, _Alloc>::size_type std::vector<_Tp, _Alloc>::size() const [with _Tp = short unsigned int; _Alloc = std::allocator<short unsigned int>; std::vector<_Tp, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_type) (((short unsigned int *) ((const struct vector *) this)->D.90158._M_impl._M_finish - (short unsigned int *) ((const struct vector *) this)->D.90158._M_impl._M_start) /[ex] 2)
   >>>;
__builtin_unreachable ();


;; Function constexpr std::move_iterator<_Iterator>::move_iterator(std::move_iterator<_Iterator>::iterator_type) [with _Iterator = short unsigned int*; std::move_iterator<_Iterator>::iterator_type = short unsigned int*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    short unsigned int * _M_current;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct move_iterator *) this)->_M_current = __i) >>>>>;
}


;; Function _ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator, std::allocator<_Tp>&) [with _InputIterator = std::move_iterator<short unsigned int*>; _ForwardIterator = short unsigned int*; _Tp = short unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::uninitialized_copy<std::move_iterator<short unsigned int*>, short unsigned int*> (TARGET_EXPR <D.110351, __first>, TARGET_EXPR <D.110352, __last>, __result)>>;


;; Function void __gnu_cxx::new_allocator<_Tp>::destroy(_Up*) [with _Up = short unsigned int; _Tp = short unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) *__p >>>>>;


;; Function __gnu_cxx::new_allocator<_Tp>::size_type __gnu_cxx::new_allocator<_Tp>::max_size() const [with _Tp = wchar_t; __gnu_cxx::new_allocator<_Tp>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 4611686018427387903
   >>>;
__builtin_unreachable ();


;; Function __gnu_cxx::new_allocator<_Tp>::size_type __gnu_cxx::new_allocator<_Tp>::max_size() const [with _Tp = char16_t; __gnu_cxx::new_allocator<_Tp>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 9223372036854775807
   >>>;
__builtin_unreachable ();


;; Function __gnu_cxx::new_allocator<_Tp>::size_type __gnu_cxx::new_allocator<_Tp>::max_size() const [with _Tp = char32_t; __gnu_cxx::new_allocator<_Tp>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 4611686018427387903
   >>>;
__builtin_unreachable ();


;; Function __gnu_cxx::new_allocator<_Tp>::size_type __gnu_cxx::new_allocator<_Tp>::max_size() const [with _Tp = short unsigned int; __gnu_cxx::new_allocator<_Tp>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 9223372036854775807
   >>>;
__builtin_unreachable ();


;; Function _Iterator std::__niter_base(_Iterator) [with _Iterator = short unsigned int*] (null)
;; enabled by -tree-original


return <retval> = __it;


;; Function typename __gnu_cxx::__enable_if<std::__is_scalar<_Tp>::__value, _OutputIterator>::__type std::__fill_n_a(_OutputIterator, _Size, const _Tp&) [with _OutputIterator = short unsigned int*; _Size = long unsigned int; _Tp = short unsigned int; typename __gnu_cxx::__enable_if<std::__is_scalar<_Tp>::__value, _OutputIterator>::__type = short unsigned int*] (null)
;; enabled by -tree-original


{
  const short unsigned int __tmp = (short unsigned int) *__value;

    const short unsigned int __tmp = (short unsigned int) *__value;
  {
    long unsigned int __niter = __n;

        long unsigned int __niter = __n;
    while (1)
      {
        if (__niter == 0) goto <D.110362>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__first = (short unsigned int) __tmp) >>>>>;
        <<cleanup_point (void)  --__niter;, (void)  ++__first;>>;
      }
    <D.110362>:;
  }
  return <retval> = (short unsigned int *) __first;
}


;; Function static std::allocator_traits<std::allocator<_CharT> >::size_type std::allocator_traits<std::allocator<_CharT> >::max_size(const allocator_type&) [with _Tp = short unsigned int; std::allocator_traits<std::allocator<_CharT> >::size_type = long unsigned int; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<short unsigned int>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __gnu_cxx::new_allocator<short unsigned int>::max_size ((const struct new_allocator *) __a)>>
   >>>;
__builtin_unreachable ();


;; Function const _Tp_alloc_type& std::_Vector_base<_Tp, _Alloc>::_M_get_Tp_allocator() const [with _Tp = short unsigned int; _Alloc = std::allocator<short unsigned int>; std::_Vector_base<_Tp, _Alloc>::_Tp_alloc_type = std::allocator<short unsigned int>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const struct _Tp_alloc_type &) &((const struct _Vector_base *) this)->_M_impl
   >>>;
__builtin_unreachable ();


;; Function _ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = std::move_iterator<short unsigned int*>; _ForwardIterator = short unsigned int*] (null)
;; enabled by -tree-original


{
  typedef _ValueType1 _ValueType1;
  typedef _ValueType2 _ValueType2;
  typedef short unsigned int & _RefType1;
  typedef short unsigned int & _RefType2;
  const bool __assignable = 1;

  <<cleanup_point   const bool __assignable = 1;>>;
  <<cleanup_point return <retval> = std::__uninitialized_copy<true>::__uninit_copy<std::move_iterator<short unsigned int*>, short unsigned int*> (TARGET_EXPR <D.110393, __first>, TARGET_EXPR <D.110394, __last>, __result)>>;
}


;; Function static _ForwardIterator std::__uninitialized_copy<true>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = std::move_iterator<short unsigned int*>; _ForwardIterator = short unsigned int*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::copy<std::move_iterator<short unsigned int*>, short unsigned int*> (TARGET_EXPR <D.110400, __first>, TARGET_EXPR <D.110401, __last>, __result)>>;


;; Function constexpr std::move_iterator<_Iterator>::iterator_type std::move_iterator<_Iterator>::base() const [with _Iterator = short unsigned int*; std::move_iterator<_Iterator>::iterator_type = short unsigned int*] (null)
;; enabled by -tree-original


return <retval> = (short unsigned int *) ((const struct move_iterator *) this)->_M_current;


;; Function _OI std::copy(_II, _II, _OI) [with _II = std::move_iterator<short unsigned int*>; _OI = short unsigned int*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__copy_move_a2<true, short unsigned int*, short unsigned int*> (std::__miter_base<short unsigned int*> (TARGET_EXPR <D.110417, __first>), std::__miter_base<short unsigned int*> (TARGET_EXPR <D.110418, __last>), __result)>>;


;; Function decltype (std::__miter_base(__it.base())) std::__miter_base(std::move_iterator<_IteratorL>) [with _Iterator = short unsigned int*; decltype (std::__miter_base(__it.base())) = short unsigned int*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__miter_base<short unsigned int*> (std::move_iterator<short unsigned int*>::base (&__it))>>;


;; Function _OI std::__copy_move_a2(_II, _II, _OI) [with bool _IsMove = true; _II = short unsigned int*; _OI = short unsigned int*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__copy_move_a<true, short unsigned int*, short unsigned int*> (std::__niter_base<short unsigned int*> (__first), std::__niter_base<short unsigned int*> (__last), std::__niter_base<short unsigned int*> (__result))>>;


;; Function _Iterator std::__miter_base(_Iterator) [with _Iterator = short unsigned int*] (null)
;; enabled by -tree-original


return <retval> = __it;


;; Function _OI std::__copy_move_a(_II, _II, _OI) [with bool _IsMove = true; _II = short unsigned int*; _OI = short unsigned int*] (null)
;; enabled by -tree-original


{
  typedef _ValueTypeI _ValueTypeI;
  typedef _ValueTypeO _ValueTypeO;
  typedef struct _Category _Category;
  const bool __simple = 1;

  <<cleanup_point   const bool __simple = 1;>>;
  <<cleanup_point return <retval> = std::__copy_move<true, true, std::random_access_iterator_tag>::__copy_m<short unsigned int> ((const short unsigned int *) __first, (const short unsigned int *) __last, __result)>>;
}


;; Function static _Tp* std::__copy_move<_IsMove, true, std::random_access_iterator_tag>::__copy_m(const _Tp*, const _Tp*, _Tp*) [with _Tp = short unsigned int; bool _IsMove = true] (null)
;; enabled by -tree-original


{
  typedef struct __assignable __assignable;
  const ptrdiff_t _Num = (__last - __first) /[ex] 2;

    const ptrdiff_t _Num = (__last - __first) /[ex] 2;
  if (_Num != 0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __builtin_memmove ((void *) __result, (const void *) __first, (long unsigned int) _Num * 2) >>>>>;
    }
  return <retval> = __result + (sizetype) ((long unsigned int) _Num * 2);
}


;; Function virtual __gnu_cxx::__concurrence_wait_error::~__concurrence_wait_error() (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __concurrence_wait_error *) this)->D.79779._vptr.exception = &_ZTVN9__gnu_cxx24__concurrence_wait_errorE + 16) >>>>>;
  try
    {
      try
        {
          
        }
      finally
        {
          std::exception::~exception (&((struct __concurrence_wait_error *) this)->D.79779);
        }
    }
  finally
    {
      *(struct 
      {
        struct 
        {
          int (*) () * _vptr.exception;
        } D.79780;
      } &) this = {CLOBBER};
    }
}
<D.110485>:;


;; Function virtual __gnu_cxx::__concurrence_broadcast_error::~__concurrence_broadcast_error() (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __concurrence_broadcast_error *) this)->D.79758._vptr.exception = &_ZTVN9__gnu_cxx29__concurrence_broadcast_errorE + 16) >>>>>;
  try
    {
      try
        {
          
        }
      finally
        {
          std::exception::~exception (&((struct __concurrence_broadcast_error *) this)->D.79758);
        }
    }
  finally
    {
      *(struct 
      {
        struct 
        {
          int (*) () * _vptr.exception;
        } D.79759;
      } &) this = {CLOBBER};
    }
}
<D.110494>:;


;; Function virtual __gnu_cxx::__concurrence_unlock_error::~__concurrence_unlock_error() (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __concurrence_unlock_error *) this)->D.79737._vptr.exception = &_ZTVN9__gnu_cxx26__concurrence_unlock_errorE + 16) >>>>>;
  try
    {
      try
        {
          
        }
      finally
        {
          std::exception::~exception (&((struct __concurrence_unlock_error *) this)->D.79737);
        }
    }
  finally
    {
      *(struct 
      {
        struct 
        {
          int (*) () * _vptr.exception;
        } D.79738;
      } &) this = {CLOBBER};
    }
}
<D.110503>:;


;; Function virtual __gnu_cxx::__concurrence_lock_error::~__concurrence_lock_error() (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __concurrence_lock_error *) this)->D.79716._vptr.exception = &_ZTVN9__gnu_cxx24__concurrence_lock_errorE + 16) >>>>>;
  try
    {
      try
        {
          
        }
      finally
        {
          std::exception::~exception (&((struct __concurrence_lock_error *) this)->D.79716);
        }
    }
  finally
    {
      *(struct 
      {
        struct 
        {
          int (*) () * _vptr.exception;
        } D.79717;
      } &) this = {CLOBBER};
    }
}
<D.110512>:;


;; Function virtual std::bad_optional_access::~bad_optional_access() (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct bad_optional_access *) this)->D.59291._vptr.exception = &_ZTVSt19bad_optional_access + 16) >>>>>;
  try
    {
      try
        {
          
        }
      finally
        {
          std::exception::~exception (&((struct bad_optional_access *) this)->D.59291);
        }
    }
  finally
    {
      *(struct 
      {
        struct 
        {
          int (*) () * _vptr.exception;
        } D.59292;
      } &) this = {CLOBBER};
    }
}
<D.110521>:;

