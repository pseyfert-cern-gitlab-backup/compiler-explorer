foo (const struct Container & v)
{
  struct __lambda9 D.104305;
  struct SelectionView S;
  struct SelectionView SS;
  typedef struct __lambda9 __lambda9;

  try
    {
      # DEBUG BEGIN_STMT
      SelectionView<const SOA::Container<std::vector, s_decayvertex>&>::SelectionView (&S, v);
      try
        {
          # DEBUG BEGIN_STMT
          try
            {
              try
                {
                  SelectionView<const SOA::Container<std::vector, s_decayvertex>&>::SelectionView<foo(const SOA::Container<std::vector, s_decayvertex>&)::<lambda(auto:2)> > (&SS, &S, &D.104305);
                }
              finally
                {
                  try
                    {

                    }
                  catch
                    {
                      SelectionView<const SOA::Container<std::vector, s_decayvertex>&>::~SelectionView (&SS);
                    }
                }
            }
          finally
            {
              D.104305 = {CLOBBER};
            }
          try
            {

            }
          finally
            {
              SelectionView<const SOA::Container<std::vector, s_decayvertex>&>::~SelectionView (&SS);
            }
        }
      finally
        {
          SelectionView<const SOA::Container<std::vector, s_decayvertex>&>::~SelectionView (&S);
        }
    }
  finally
    {
      S = {CLOBBER};
      SS = {CLOBBER};
    }
}


SelectionView<const SOA::Container<std::vector, s_decayvertex>&>::SelectionView (struct SelectionView * const this, const struct container_t & container)
{
  struct allocator_type D.107088;
  struct __normal_iterator D.110545;
  struct __normal_iterator D.110546;

  MEM[(struct  &)this] = {CLOBBER};
  {
    this->m_container = container;
    _1 = &this->m_indices;
    std::allocator<short unsigned int>::allocator (&D.107088);
    try
      {
        try
          {
            _2 = this->m_container;
            _3 = &_2->D.104277.D.104204.D.103696;
            _4 = SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::size (_3);
            std::vector<short unsigned int, std::allocator<short unsigned int> >::vector (_1, _4, &D.107088);
          }
        finally
          {
            std::allocator<short unsigned int>::~allocator (&D.107088);
          }
      }
    finally
      {
        D.107088 = {CLOBBER};
      }
    try
      {
        _5 = &this->m_indices;
        D.110545 = std::vector<short unsigned int, std::allocator<short unsigned int> >::end (_5);
        _6 = &this->m_indices;
        D.110546 = std::vector<short unsigned int, std::allocator<short unsigned int> >::begin (_6);
        std::iota<__gnu_cxx::__normal_iterator<short unsigned int*, std::vector<short unsigned int, std::allocator<short unsigned int> > >, int> (D.110546, D.110545, 0);
      }
    catch
      {
        _7 = &this->m_indices;
        std::vector<short unsigned int, std::allocator<short unsigned int> >::~vector (_7);
      }
  }
}


std::allocator<short unsigned int>::allocator (struct allocator * const this)
{
  try
    {
      {
        __gnu_cxx::new_allocator<short unsigned int>::new_allocator (this);
        try
          {

          }
        catch
          {
            __gnu_cxx::new_allocator<short unsigned int>::~new_allocator (this);
          }
      }
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


__gnu_cxx::new_allocator<short unsigned int>::new_allocator (struct new_allocator * const this)
{
  try
    {
      {

      }
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::size (const struct _View * const this)
{
  size_type D.110549;

  try
    {
      _1 = &this->m_storage;
      _2 = std::get<0, std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > > (_1);
      D.110549 = std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> >::size (_2);
      return D.110549;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


std::get<0, std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > > (const struct tuple & __t)
{
  const struct __tuple_element_t & D.110551;

  try
    {
      _1 = &__t->D.94746;
      D.110551 = std::__get_helper<0, std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > > (_1);
      return D.110551;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


std::__get_helper<0, std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > > (const struct _Tuple_impl & __t)
{
  const struct vector & D.110553;

  try
    {
      D.110553 = std::_Tuple_impl<0, std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >::_M_head (__t);
      return D.110553;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


std::_Tuple_impl<0, std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >::_M_head (const struct _Tuple_impl & __t)
{
  const struct vector & D.110555;

  try
    {
      _1 = &__t->D.93464;
      D.110555 = std::_Head_base<0, std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> >, false>::_M_head (_1);
      return D.110555;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


std::_Head_base<0, std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> >, false>::_M_head (const struct _Head_base & __b)
{
  const struct vector & D.110557;

  try
    {
      D.110557 = &__b->_M_head_impl;
      return D.110557;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> >::size (const struct vector * const this)
{
  size_type D.110559;

  try
    {
      _1 = this->D.92757._M_impl._M_finish;
      _2 = this->D.92757._M_impl._M_start;
      _3 = _1 - _2;
      _4 = _3 /[ex] 4;
      D.110559 = (size_type) _4;
      return D.110559;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


std::vector<short unsigned int, std::allocator<short unsigned int> >::vector (struct vector * const this, size_type __n, const struct allocator_type & __a)
{
  MEM[(struct  &)this] = {CLOBBER};
  {
    _1 = &this->D.90158;
    std::_Vector_base<short unsigned int, std::allocator<short unsigned int> >::_Vector_base (_1, __n, __a);
    try
      {
        std::vector<short unsigned int, std::allocator<short unsigned int> >::_M_default_initialize (this, __n);
      }
    catch
      {
        _2 = &this->D.90158;
        std::_Vector_base<short unsigned int, std::allocator<short unsigned int> >::~_Vector_base (_2);
      }
  }
}


std::_Vector_base<short unsigned int, std::allocator<short unsigned int> >::_Vector_base (struct _Vector_base * const this, size_t __n, const struct allocator_type & __a)
{
  MEM[(struct  &)this] = {CLOBBER};
  {
    _1 = &this->_M_impl;
    std::_Vector_base<short unsigned int, std::allocator<short unsigned int> >::_Vector_impl::_Vector_impl (_1, __a);
    try
      {
        std::_Vector_base<short unsigned int, std::allocator<short unsigned int> >::_M_create_storage (this, __n);
      }
    catch
      {
        _2 = &this->_M_impl;
        std::_Vector_base<short unsigned int, std::allocator<short unsigned int> >::_Vector_impl::~_Vector_impl (_2);
      }
  }
}


std::_Vector_base<short unsigned int, std::allocator<short unsigned int> >::_Vector_impl::_Vector_impl (struct _Vector_impl * const this, const struct _Tp_alloc_type & __a)
{
  try
    {
      MEM[(struct  &)this] = {CLOBBER};
      {
        std::allocator<short unsigned int>::allocator (this, __a);
        try
          {
            this->_M_start = 0B;
            this->_M_finish = 0B;
            this->_M_end_of_storage = 0B;
          }
        catch
          {
            std::allocator<short unsigned int>::~allocator (this);
          }
      }
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


std::allocator<short unsigned int>::allocator (struct allocator * const this, const struct allocator & __a)
{
  try
    {
      {
        __gnu_cxx::new_allocator<short unsigned int>::new_allocator (this, __a);
        try
          {

          }
        catch
          {
            __gnu_cxx::new_allocator<short unsigned int>::~new_allocator (this);
          }
      }
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


__gnu_cxx::new_allocator<short unsigned int>::new_allocator (struct new_allocator * const this, const struct new_allocator & D.89155)
{
  try
    {
      {

      }
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


std::_Vector_base<short unsigned int, std::allocator<short unsigned int> >::_M_create_storage (struct _Vector_base * const this, size_t __n)
{
  _1 = std::_Vector_base<short unsigned int, std::allocator<short unsigned int> >::_M_allocate (this, __n);
  this->_M_impl._M_start = _1;
  _2 = this->_M_impl._M_start;
  this->_M_impl._M_finish = _2;
  _3 = this->_M_impl._M_start;
  _4 = __n * 2;
  _5 = _3 + _4;
  this->_M_impl._M_end_of_storage = _5;
}


std::_Vector_base<short unsigned int, std::allocator<short unsigned int> >::_M_allocate (struct _Vector_base * const this, size_t __n)
{
  short unsigned int * D.110564;
  short unsigned int * iftmp.0;
  typedef struct _Tr _Tr;

  if (__n != 0) goto <D.110566>; else goto <D.110567>;
  <D.110566>:
  _1 = &this->_M_impl;
  iftmp.0 = std::allocator_traits<std::allocator<short unsigned int> >::allocate (_1, __n);
  goto <D.110568>;
  <D.110567>:
  iftmp.0 = 0B;
  <D.110568>:
  D.110564 = iftmp.0;
  return D.110564;
}


std::allocator_traits<std::allocator<short unsigned int> >::allocate (struct allocator_type & __a, size_type __n)
{
  short unsigned int * D.110571;

  D.110571 = __gnu_cxx::new_allocator<short unsigned int>::allocate (__a, __n, 0B);
  return D.110571;
}


__gnu_cxx::new_allocator<short unsigned int>::allocate (struct new_allocator * const this, size_type __n, const void * D.89111)
{
  bool retval.1;
  short unsigned int * D.110579;

  _1 = __gnu_cxx::new_allocator<short unsigned int>::max_size (this);
  retval.1 = __n > _1;
  if (retval.1 != 0) goto <D.110575>; else goto <D.110576>;
  <D.110575>:
  std::__throw_bad_alloc ();
  <D.110576>:
  {
    if (0 != 0) goto <D.110577>; else goto <D.110578>;
    <D.110577>:
    {
      align_val_t __al;

      __al = 2;
      _2 = __n * 2;
      D.110579 = operator new (_2, __al);
      return D.110579;
    }
    <D.110578>:
  }
  _3 = __n * 2;
  D.110579 = operator new (_3);
  return D.110579;
}


__gnu_cxx::new_allocator<short unsigned int>::max_size (const struct new_allocator * const this)
{
  size_type D.110583;

  try
    {
      D.110583 = 9223372036854775807;
      return D.110583;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


std::_Vector_base<short unsigned int, std::allocator<short unsigned int> >::_Vector_impl::~_Vector_impl (struct _Vector_impl * const this)
{
  {
    try
      {
        try
          {

          }
        finally
          {
            std::allocator<short unsigned int>::~allocator (this);
          }
      }
    finally
      {
        MEM[(struct  &)this] = {CLOBBER};
      }
  }
  <D.108031>:
}


std::allocator<short unsigned int>::~allocator (struct allocator * const this)
{
  try
    {
      {
        try
          {

          }
        finally
          {
            __gnu_cxx::new_allocator<short unsigned int>::~new_allocator (this);
          }
      }
      <D.107980>:
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


__gnu_cxx::new_allocator<short unsigned int>::~new_allocator (struct new_allocator * const this)
{
  try
    {
      {

      }
      <D.108522>:
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


std::vector<short unsigned int, std::allocator<short unsigned int> >::_M_default_initialize (struct vector * const this, size_type __n)
{
  _1 = &this->D.90158;
  _2 = std::_Vector_base<short unsigned int, std::allocator<short unsigned int> >::_M_get_Tp_allocator (_1);
  _3 = this->D.90158._M_impl._M_start;
  _4 = std::__uninitialized_default_n_a<short unsigned int*, long unsigned int, short unsigned int> (_3, __n, _2);
  this->D.90158._M_impl._M_finish = _4;
}


std::_Vector_base<short unsigned int, std::allocator<short unsigned int> >::_M_get_Tp_allocator (struct _Vector_base * const this)
{
  struct _Tp_alloc_type & D.110586;

  try
    {
      D.110586 = &this->_M_impl;
      return D.110586;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


std::__uninitialized_default_n_a<short unsigned int*, long unsigned int, short unsigned int> (short unsigned int * __first, long unsigned int __n, struct allocator & D.108532)
{
  short unsigned int * D.110588;

  D.110588 = std::__uninitialized_default_n<short unsigned int*, long unsigned int> (__first, __n);
  return D.110588;
}


std::__uninitialized_default_n<short unsigned int*, long unsigned int> (short unsigned int * __first, long unsigned int __n)
{
  short unsigned int * D.110591;
  typedef _ValueType _ValueType;
  const bool __assignable;

  __assignable = 1;
  D.110591 = std::__uninitialized_default_n_1<true>::__uninit_default_n<short unsigned int*, long unsigned int> (__first, __n);
  return D.110591;
}


std::__uninitialized_default_n_1<true>::__uninit_default_n<short unsigned int*, long unsigned int> (short unsigned int * __first, long unsigned int __n)
{
  short unsigned int * D.110594;
  const short unsigned int D.110039;
  typedef _ValueType _ValueType;

  D.110039 = 0;
  try
    {
      D.110594 = std::fill_n<short unsigned int*, long unsigned int, short unsigned int> (__first, __n, &D.110039);
      return D.110594;
    }
  finally
    {
      D.110039 = {CLOBBER};
    }
}


std::fill_n<short unsigned int*, long unsigned int, short unsigned int> (short unsigned int * __first, long unsigned int __n, const short unsigned int & __value)
{
  short unsigned int * D.110599;

  _1 = std::__niter_base<short unsigned int*> (__first);
  D.110599 = std::__fill_n_a<short unsigned int*, long unsigned int, short unsigned int> (_1, __n, __value);
  return D.110599;
}


std::__niter_base<short unsigned int*> (short unsigned int * __it)
{
  short unsigned int * D.110601;

  D.110601 = __it;
  return D.110601;
}


std::__fill_n_a<short unsigned int*, long unsigned int, short unsigned int> (short unsigned int * __first, long unsigned int __n, const short unsigned int & __value)
{
  short unsigned int * D.110605;
  const short unsigned int __tmp;

  __tmp = *__value;
  {
    long unsigned int __niter;

    __niter = __n;
    <D.110603>:
    if (__niter == 0) goto <D.110362>; else goto <D.110604>;
    <D.110604>:
    *__first = __tmp;
    __niter = __niter + 18446744073709551615;
    __first = __first + 2;
    goto <D.110603>;
    <D.110362>:
  }
  D.110605 = __first;
  return D.110605;
}


std::_Vector_base<short unsigned int, std::allocator<short unsigned int> >::~_Vector_base (struct _Vector_base * const this)
{
  try
    {
      {
        try
          {
            try
              {
                _1 = this->_M_impl._M_end_of_storage;
                _2 = this->_M_impl._M_start;
                _3 = _1 - _2;
                _4 = _3 /[ex] 2;
                _5 = (long unsigned int) _4;
                _6 = this->_M_impl._M_start;
                std::_Vector_base<short unsigned int, std::allocator<short unsigned int> >::_M_deallocate (this, _6, _5);
              }
            finally
              {
                _7 = &this->_M_impl;
                std::_Vector_base<short unsigned int, std::allocator<short unsigned int> >::_Vector_impl::~_Vector_impl (_7);
              }
          }
        finally
          {
            MEM[(struct  &)this] = {CLOBBER};
          }
      }
      <D.108036>:
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


std::_Vector_base<short unsigned int, std::allocator<short unsigned int> >::_M_deallocate (struct _Vector_base * const this, short unsigned int * __p, size_t __n)
{
  typedef struct _Tr _Tr;

  if (__p != 0B) goto <D.110607>; else goto <D.110608>;
  <D.110607>:
  _1 = &this->_M_impl;
  std::allocator_traits<std::allocator<short unsigned int> >::deallocate (_1, __p, __n);
  goto <D.110609>;
  <D.110608>:
  <D.110609>:
}


std::allocator_traits<std::allocator<short unsigned int> >::deallocate (struct allocator_type & __a, short unsigned int * __p, size_type __n)
{
  __gnu_cxx::new_allocator<short unsigned int>::deallocate (__a, __p, __n);
}


__gnu_cxx::new_allocator<short unsigned int>::deallocate (struct new_allocator * const this, short unsigned int * __p, size_type D.89115)
{
  if (0 != 0) goto <D.110610>; else goto <D.110611>;
  <D.110610>:
  operator delete (__p, 2);
  // predicted unlikely by early return (on trees) predictor.
  return;
  <D.110611>:
  operator delete (__p);
}


std::vector<short unsigned int, std::allocator<short unsigned int> >::end (struct vector * const this)
{
  struct iterator D.110613;
  struct iterator D.108007;

  try
    {
      _1 = &this->D.90158._M_impl._M_finish;
      __gnu_cxx::__normal_iterator<short unsigned int*, std::vector<short unsigned int, std::allocator<short unsigned int> > >::__normal_iterator (&D.108007, _1);
      try
        {
          D.110613 = D.108007;
          return D.110613;
        }
      finally
        {
          D.108007 = {CLOBBER};
        }
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


__gnu_cxx::__normal_iterator<short unsigned int*, std::vector<short unsigned int, std::allocator<short unsigned int> > >::__normal_iterator (struct __normal_iterator * const this, short unsigned int * const & __i)
{
  try
    {
      MEM[(struct  &)this] = {CLOBBER};
      {
        _1 = *__i;
        this->_M_current = _1;
      }
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


std::vector<short unsigned int, std::allocator<short unsigned int> >::begin (struct vector * const this)
{
  struct iterator D.110616;
  struct iterator D.108005;

  try
    {
      _1 = &this->D.90158._M_impl._M_start;
      __gnu_cxx::__normal_iterator<short unsigned int*, std::vector<short unsigned int, std::allocator<short unsigned int> > >::__normal_iterator (&D.108005, _1);
      try
        {
          D.110616 = D.108005;
          return D.110616;
        }
      finally
        {
          D.108005 = {CLOBBER};
        }
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


std::iota<__gnu_cxx::__normal_iterator<short unsigned int*, std::vector<short unsigned int, std::allocator<short unsigned int> > >, int> (struct __normal_iterator __first, struct __normal_iterator __last, int __value)
{
  bool retval.2;

  <D.110619>:
  retval.2 = __gnu_cxx::operator!=<short unsigned int*, std::vector<short unsigned int, std::allocator<short unsigned int> > > (&__first, &__last);
  if (retval.2 != 0) goto <D.110621>; else goto <D.108023>;
  <D.110621>:
  _1 = (short unsigned int) __value;
  _2 = __gnu_cxx::__normal_iterator<short unsigned int*, std::vector<short unsigned int, std::allocator<short unsigned int> > >::operator* (&__first);
  *_2 = _1;
  __value = __value + 1;
  __gnu_cxx::__normal_iterator<short unsigned int*, std::vector<short unsigned int, std::allocator<short unsigned int> > >::operator++ (&__first);
  goto <D.110619>;
  <D.108023>:
}


__gnu_cxx::operator!=<short unsigned int*, std::vector<short unsigned int, std::allocator<short unsigned int> > > (const struct __normal_iterator & __lhs, const struct __normal_iterator & __rhs)
{
  bool D.110622;

  try
    {
      _1 = __gnu_cxx::__normal_iterator<short unsigned int*, std::vector<short unsigned int, std::allocator<short unsigned int> > >::base (__lhs);
      _2 = *_1;
      _3 = __gnu_cxx::__normal_iterator<short unsigned int*, std::vector<short unsigned int, std::allocator<short unsigned int> > >::base (__rhs);
      _4 = *_3;
      D.110622 = _2 != _4;
      return D.110622;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


__gnu_cxx::__normal_iterator<short unsigned int*, std::vector<short unsigned int, std::allocator<short unsigned int> > >::base (const struct __normal_iterator * const this)
{
  short unsigned int * const & D.110624;

  try
    {
      D.110624 = &this->_M_current;
      return D.110624;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


__gnu_cxx::__normal_iterator<short unsigned int*, std::vector<short unsigned int, std::allocator<short unsigned int> > >::operator* (const struct __normal_iterator * const this)
{
  short unsigned int & D.110626;

  try
    {
      D.110626 = this->_M_current;
      return D.110626;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


__gnu_cxx::__normal_iterator<short unsigned int*, std::vector<short unsigned int, std::allocator<short unsigned int> > >::operator++ (struct __normal_iterator * const this)
{
  struct __normal_iterator & D.110628;

  try
    {
      _1 = this->_M_current;
      _2 = _1 + 2;
      this->_M_current = _2;
      D.110628 = this;
      return D.110628;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


SelectionView<const SOA::Container<std::vector, s_decayvertex>&>::SelectionView<foo(const SOA::Container<std::vector, s_decayvertex>&)::<lambda(auto:2)> > (struct SelectionView * const this, const struct SelectionView & old_selection, struct __lambda9 & predicate_i)
{
  struct back_insert_iterator D.107396;
  struct __lambda10 D.110630;
  struct back_insert_iterator D.110631;
  struct __normal_iterator D.110632;
  struct __normal_iterator D.110633;

  MEM[(struct  &)this] = {CLOBBER};
  {
    _1 = old_selection->m_container;
    this->m_container = _1;
    _2 = &this->m_indices;
    std::vector<short unsigned int, std::allocator<short unsigned int> >::vector (_2);
    try
      {
        {
          typedef struct __lambda10 __lambda10;

          D.110630.__this = this;
          D.110630.__predicate_i = predicate_i;
          _3 = &this->m_indices;
          D.110631 = std::back_inserter<std::vector<short unsigned int, std::allocator<short unsigned int> > > (_3);
          _4 = &old_selection->m_indices;
          D.110632 = std::vector<short unsigned int, std::allocator<short unsigned int> >::end (_4);
          _5 = &old_selection->m_indices;
          D.110633 = std::vector<short unsigned int, std::allocator<short unsigned int> >::begin (_5);
          D.107396 = std::copy_if<__gnu_cxx::__normal_iterator<const short unsigned int*, std::vector<short unsigned int, std::allocator<short unsigned int> > >, std::back_insert_iterator<std::vector<short unsigned int, std::allocator<short unsigned int> > >, SelectionView<CONTAINER, IndexSize>::SelectionView(const SelectionView<CONTAINER, IndexSize>&, Predicate_t&&) [with Predicate_t = foo(const SOA::Container<std::vector, s_decayvertex>&)::<lambda(auto:2)>; CONTAINER = const SOA::Container<std::vector, s_decayvertex>&; IndexSize = short unsigned int]::<lambda(auto:1)> > (D.110633, D.110632, D.110631, D.110630);
        }
      }
    catch
      {
        _6 = &this->m_indices;
        std::vector<short unsigned int, std::allocator<short unsigned int> >::~vector (_6);
      }
  }
}


std::vector<short unsigned int, std::allocator<short unsigned int> >::vector (struct vector * const this)
{
  try
    {
      MEM[(struct  &)this] = {CLOBBER};
      {
        _1 = &this->D.90158;
        std::_Vector_base<short unsigned int, std::allocator<short unsigned int> >::_Vector_base (_1);
        try
          {

          }
        catch
          {
            _2 = &this->D.90158;
            std::_Vector_base<short unsigned int, std::allocator<short unsigned int> >::~_Vector_base (_2);
          }
      }
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


std::_Vector_base<short unsigned int, std::allocator<short unsigned int> >::_Vector_base (struct _Vector_base * const this)
{
  MEM[(struct  &)this] = {CLOBBER};
  {
    _1 = &this->_M_impl;
    std::_Vector_base<short unsigned int, std::allocator<short unsigned int> >::_Vector_impl::_Vector_impl (_1);
    try
      {

      }
    catch
      {
        _2 = &this->_M_impl;
        std::_Vector_base<short unsigned int, std::allocator<short unsigned int> >::_Vector_impl::~_Vector_impl (_2);
      }
  }
}


std::_Vector_base<short unsigned int, std::allocator<short unsigned int> >::_Vector_impl::_Vector_impl (struct _Vector_impl * const this)
{
  MEM[(struct  &)this] = {CLOBBER};
  {
    std::allocator<short unsigned int>::allocator (this);
    try
      {
        this->_M_start = 0B;
        this->_M_finish = 0B;
        this->_M_end_of_storage = 0B;
      }
    catch
      {
        std::allocator<short unsigned int>::~allocator (this);
      }
  }
}


std::back_inserter<std::vector<short unsigned int, std::allocator<short unsigned int> > > (struct vector & __x)
{
  struct back_insert_iterator D.110635;
  struct back_insert_iterator D.108090;

  std::back_insert_iterator<std::vector<short unsigned int, std::allocator<short unsigned int> > >::back_insert_iterator (&D.108090, __x);
  try
    {
      D.110635 = D.108090;
      return D.110635;
    }
  finally
    {
      D.108090 = {CLOBBER};
    }
}


std::back_insert_iterator<std::vector<short unsigned int, std::allocator<short unsigned int> > >::back_insert_iterator (struct back_insert_iterator * const this, struct vector & __x)
{
  MEM[(struct  &)this] = {CLOBBER};
  {
    _1 = std::__addressof<std::vector<short unsigned int, std::allocator<short unsigned int> > > (__x);
    this->container = _1;
  }
}


std::__addressof<std::vector<short unsigned int, std::allocator<short unsigned int> > > (struct vector & __r)
{
  struct vector * D.110638;

  try
    {
      D.110638 = __r;
      return D.110638;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


std::vector<short unsigned int, std::allocator<short unsigned int> >::end (const struct vector * const this)
{
  struct const_iterator D.110640;
  struct const_iterator D.108070;
  const short unsigned int * const D.108069;

  try
    {
      _1 = this->D.90158._M_impl._M_finish;
      D.108069 = _1;
      try
        {
          __gnu_cxx::__normal_iterator<const short unsigned int*, std::vector<short unsigned int, std::allocator<short unsigned int> > >::__normal_iterator (&D.108070, &D.108069);
          try
            {
              D.110640 = D.108070;
              return D.110640;
            }
          finally
            {
              D.108070 = {CLOBBER};
            }
        }
      finally
        {
          D.108069 = {CLOBBER};
        }
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


__gnu_cxx::__normal_iterator<const short unsigned int*, std::vector<short unsigned int, std::allocator<short unsigned int> > >::__normal_iterator (struct __normal_iterator * const this, const short unsigned int * const & __i)
{
  try
    {
      MEM[(struct  &)this] = {CLOBBER};
      {
        _1 = *__i;
        this->_M_current = _1;
      }
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


std::vector<short unsigned int, std::allocator<short unsigned int> >::begin (const struct vector * const this)
{
  struct const_iterator D.110644;
  struct const_iterator D.108067;
  const short unsigned int * const D.108066;

  try
    {
      _1 = this->D.90158._M_impl._M_start;
      D.108066 = _1;
      try
        {
          __gnu_cxx::__normal_iterator<const short unsigned int*, std::vector<short unsigned int, std::allocator<short unsigned int> > >::__normal_iterator (&D.108067, &D.108066);
          try
            {
              D.110644 = D.108067;
              return D.110644;
            }
          finally
            {
              D.108067 = {CLOBBER};
            }
        }
      finally
        {
          D.108066 = {CLOBBER};
        }
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


std::copy_if<__gnu_cxx::__normal_iterator<const short unsigned int*, std::vector<short unsigned int, std::allocator<short unsigned int> > >, std::back_insert_iterator<std::vector<short unsigned int, std::allocator<short unsigned int> > >, SelectionView<CONTAINER, IndexSize>::SelectionView(const SelectionView<CONTAINER, IndexSize>&, Predicate_t&&) [with Predicate_t = foo(const SOA::Container<std::vector, s_decayvertex>&)::<lambda(auto:2)>; CONTAINER = const SOA::Container<std::vector, s_decayvertex>&; IndexSize = short unsigned int]::<lambda(auto:1)> > (struct __normal_iterator __first, struct __normal_iterator __last, struct back_insert_iterator __result, struct __lambda10 __pred)
{
  bool retval.3;
  bool retval.4;
  struct back_insert_iterator D.110655;

  <D.110648>:
  retval.3 = __gnu_cxx::operator!=<const short unsigned int*, std::vector<short unsigned int, std::allocator<short unsigned int> > > (&__first, &__last);
  if (retval.3 != 0) goto <D.110650>; else goto <D.108192>;
  <D.110650>:
  _1 = __gnu_cxx::__normal_iterator<const short unsigned int*, std::vector<short unsigned int, std::allocator<short unsigned int> > >::operator* (&__first);
  _2 = *_1;
  _3 = (int) _2;
  retval.4 = SelectionView<CONTAINER, IndexSize>::SelectionView(const SelectionView<CONTAINER, IndexSize>&, Predicate_t&&) [with Predicate_t = foo(const SOA::Container<std::vector, s_decayvertex>&)::<lambda(auto:2)>; CONTAINER = const SOA::Container<std::vector, s_decayvertex>&; IndexSize = short unsigned int]::<lambda(auto:1)>::operator()<short unsigned int> (&__pred, _3);
  if (retval.4 != 0) goto <D.110652>; else goto <D.110653>;
  <D.110652>:
  _4 = __gnu_cxx::__normal_iterator<const short unsigned int*, std::vector<short unsigned int, std::allocator<short unsigned int> > >::operator* (&__first);
  _5 = std::back_insert_iterator<std::vector<short unsigned int, std::allocator<short unsigned int> > >::operator* (&__result);
  std::back_insert_iterator<std::vector<short unsigned int, std::allocator<short unsigned int> > >::operator= (_5, _4);
  std::back_insert_iterator<std::vector<short unsigned int, std::allocator<short unsigned int> > >::operator++ (&__result);
  goto <D.110654>;
  <D.110653>:
  <D.110654>:
  __gnu_cxx::__normal_iterator<const short unsigned int*, std::vector<short unsigned int, std::allocator<short unsigned int> > >::operator++ (&__first);
  goto <D.110648>;
  <D.108192>:
  D.110655 = __result;
  return D.110655;
}


__gnu_cxx::operator!=<const short unsigned int*, std::vector<short unsigned int, std::allocator<short unsigned int> > > (const struct __normal_iterator & __lhs, const struct __normal_iterator & __rhs)
{
  bool D.110658;

  try
    {
      _1 = __gnu_cxx::__normal_iterator<const short unsigned int*, std::vector<short unsigned int, std::allocator<short unsigned int> > >::base (__lhs);
      _2 = *_1;
      _3 = __gnu_cxx::__normal_iterator<const short unsigned int*, std::vector<short unsigned int, std::allocator<short unsigned int> > >::base (__rhs);
      _4 = *_3;
      D.110658 = _2 != _4;
      return D.110658;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


__gnu_cxx::__normal_iterator<const short unsigned int*, std::vector<short unsigned int, std::allocator<short unsigned int> > >::base (const struct __normal_iterator * const this)
{
  const short unsigned int * const & D.110660;

  try
    {
      D.110660 = &this->_M_current;
      return D.110660;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


SelectionView<CONTAINER, IndexSize>::SelectionView(const SelectionView<CONTAINER, IndexSize>&, Predicate_t&&) [with Predicate_t = foo(const SOA::Container<std::vector, s_decayvertex>&)::<lambda(auto:2)>; CONTAINER = const SOA::Container<std::vector, s_decayvertex>&; IndexSize = short unsigned int]::<lambda(auto:1)>::operator()<short unsigned int> (const struct __lambda10 * const this, short unsigned int i)
{
  bool D.110662;
  struct s_decayvertex D.110663;
  struct SelectionView * const this [value-expr: ((const struct __lambda10 *) this)->__this];
  struct __lambda9 & predicate_i [value-expr: ((const struct __lambda10 *) this)->__predicate_i];

  {
    _1 = this->__predicate_i;
    _2 = this->__this;
    _3 = _2->m_container;
    _4 = &_3->D.104277.D.104204.D.103696;
    _5 = (long unsigned int) i;
    D.110663 = SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::operator[] (_4, _5);
    D.110662 = foo(const SOA::Container<std::vector, s_decayvertex>&)::<lambda(auto:2)>::operator()<s_decayvertex<SOA::ObjectProxy<SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::position> > > (_1, D.110663);
    return D.110662;
  }
}


SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::operator[] (const struct _View * const this, size_type idx)
{
  const struct const_reference D.110665;
  const struct const_reference D.108182;

  try
    {
      _1 = &this->m_storage;
      s_decayvertex<SOA::ObjectProxy<SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::position> >::s_decayvertex (&D.108182, _1, idx);
      try
        {
          D.110665 = D.108182;
          return D.110665;
        }
      finally
        {
          D.108182 = {CLOBBER};
        }
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


s_decayvertex<SOA::ObjectProxy<SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::position> >::s_decayvertex (struct s_decayvertex * const this, struct SOAStorage * D.102279, size_type D.102280)
{
  MEM[(struct  &)this] = {CLOBBER};
  {
    _1 = &this->D.102303;
    _2 = D.102280;
    _3 = D.102279;
    SOA::impl::SkinBase<SOA::PrintableNullSkin<SOA::ObjectProxy<SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::position> >, f_vertex>::SkinBase (_1, _3, _2);
  }
}


SOA::impl::SkinBase<SOA::PrintableNullSkin<SOA::ObjectProxy<SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::position> >, f_vertex>::SkinBase (struct SkinBase * const this, struct SOAStorage * D.101927, size_type D.101928)
{
  MEM[(struct  &)this] = {CLOBBER};
  {
    _1 = &this->D.101954;
    _2 = D.101928;
    _3 = D.101927;
    SOA::PrintableNullSkin<SOA::ObjectProxy<SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::position> >::PrintableNullSkin (_1, _3, _2);
  }
}


SOA::PrintableNullSkin<SOA::ObjectProxy<SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::position> >::PrintableNullSkin (struct PrintableNullSkin * const this, struct SOAStorage * D.101684, size_type D.101685)
{
  MEM[(struct  &)this] = {CLOBBER};
  {
    _1 = &this->D.101686;
    _2 = D.101685;
    _3 = D.101684;
    SOA::ObjectProxy<SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::position>::ObjectProxy (_1, _3, _2);
  }
}


SOA::ObjectProxy<SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::position>::ObjectProxy (struct ObjectProxy * const this, struct SOAStorage * D.101595, size_type D.101596)
{
  MEM[(struct  &)this] = {CLOBBER};
  {
    _1 = &this->D.101625;
    _2 = D.101596;
    _3 = D.101595;
    SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::position::position (_1, _3, _2);
  }
}


SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::position::position (struct position * const this, struct SOAStorage * stor, size_type idx)
{
  try
    {
      MEM[(struct  &)this] = {CLOBBER};
      {
        this->m_stor = stor;
        this->m_idx = idx;
      }
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


foo(const SOA::Container<std::vector, s_decayvertex>&)::<lambda(auto:2)>::operator()<s_decayvertex<SOA::ObjectProxy<SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::position> > > (const struct __lambda9 * const __closure, struct s_decayvertex decayvertexskin)
{
  bool D.110668;

  _1 = f_vertex::accessors<SOA::impl::SkinBase<SOA::PrintableNullSkin<SOA::ObjectProxy<SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::position> >, f_vertex>, SOA::Typelist::typelist<f_vertex>, SOA::PrintableNullSkin<SOA::ObjectProxy<SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::position> > >::vertex (&decayvertexskin);
  _2 = _1->k;
  D.110668 = _2 > 3.0e+0;
  return D.110668;
}


f_vertex::accessors<SOA::impl::SkinBase<SOA::PrintableNullSkin<SOA::ObjectProxy<SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::position> >, f_vertex>, SOA::Typelist::typelist<f_vertex>, SOA::PrintableNullSkin<SOA::ObjectProxy<SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::position> > >::vertex (struct accessors * const this)
{
  struct value_type & D.110670;

  try
    {
      D.110670 = SOA::impl::FieldBase<vertex_t, f_vertex>::AccessorBase<SOA::impl::SkinBase<SOA::PrintableNullSkin<SOA::ObjectProxy<SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::position> >, f_vertex>, 0, SOA::PrintableNullSkin<SOA::ObjectProxy<SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::position> > >::_get (this);
      return D.110670;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


SOA::impl::FieldBase<vertex_t, f_vertex>::AccessorBase<SOA::impl::SkinBase<SOA::PrintableNullSkin<SOA::ObjectProxy<SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::position> >, f_vertex>, 0, SOA::PrintableNullSkin<SOA::ObjectProxy<SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::position> > >::_get (struct AccessorBase * const this)
{
  struct value_type & D.110672;

  try
    {
      _1 = &MEM[(struct SkinBase *)this].D.101954.D.101686;
      D.110672 = SOA::ObjectProxy<SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::position>::get<0> (_1);
      return D.110672;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


SOA::ObjectProxy<SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::position>::get<0> (struct ObjectProxy * const this)
{
  struct value_type & D.110674;

  try
    {
      _1 = &this->D.101625;
      _2 = SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::position::stor (_1);
      _3 = *_2;
      _4 = std::get<0, std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > > (_3);
      _5 = &this->D.101625;
      _6 = SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::position::idx (_5);
      _7 = *_6;
      D.110674 = std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> >::operator[] (_4, _7);
      return D.110674;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::position::stor (struct position * const this)
{
  struct SOAStorage * & D.110676;

  try
    {
      D.110676 = &this->m_stor;
      return D.110676;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


std::get<0, std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > > (struct tuple & __t)
{
  struct __tuple_element_t & D.110678;

  try
    {
      _1 = &__t->D.94746;
      D.110678 = std::__get_helper<0, std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > > (_1);
      return D.110678;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


std::__get_helper<0, std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > > (struct _Tuple_impl & __t)
{
  struct vector & D.110680;

  try
    {
      D.110680 = std::_Tuple_impl<0, std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >::_M_head (__t);
      return D.110680;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


std::_Tuple_impl<0, std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >::_M_head (struct _Tuple_impl & __t)
{
  struct vector & D.110682;

  try
    {
      _1 = &__t->D.93464;
      D.110682 = std::_Head_base<0, std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> >, false>::_M_head (_1);
      return D.110682;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


std::_Head_base<0, std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> >, false>::_M_head (struct _Head_base & __b)
{
  struct vector & D.110684;

  try
    {
      D.110684 = &__b->_M_head_impl;
      return D.110684;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


SOA::_View<std::tuple<std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> > >, s_decayvertex, f_vertex>::position::idx (struct position * const this)
{
  size_type & D.110686;

  try
    {
      D.110686 = &this->m_idx;
      return D.110686;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


std::vector<vertex_t, SOA::AlignedAllocator<vertex_t, 64> >::operator[] (struct vector * const this, size_type __n)
{
  struct value_type & D.110688;

  try
    {
      _1 = this->D.92757._M_impl._M_start;
      _2 = __n * 4;
      D.110688 = _1 + _2;
      return D.110688;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


__gnu_cxx::__normal_iterator<const short unsigned int*, std::vector<short unsigned int, std::allocator<short unsigned int> > >::operator* (const struct __normal_iterator * const this)
{
  const short unsigned int & D.110690;

  try
    {
      D.110690 = this->_M_current;
      return D.110690;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


std::back_insert_iterator<std::vector<short unsigned int, std::allocator<short unsigned int> > >::operator* (struct back_insert_iterator * const this)
{
  struct back_insert_iterator & D.110692;

  D.110692 = this;
  return D.110692;
}


std::back_insert_iterator<std::vector<short unsigned int, std::allocator<short unsigned int> > >::operator= (struct back_insert_iterator * const this, const value_type & __value)
{
  struct back_insert_iterator & D.110694;

  _1 = this->container;
  std::vector<short unsigned int, std::allocator<short unsigned int> >::push_back (_1, __value);
  D.110694 = this;
  return D.110694;
}


std::vector<short unsigned int, std::allocator<short unsigned int> >::push_back (struct vector * const this, const value_type & __x)
{
  struct __normal_iterator D.110699;

  _1 = this->D.90158._M_impl._M_finish;
  _2 = this->D.90158._M_impl._M_end_of_storage;
  if (_1 != _2) goto <D.110696>; else goto <D.110697>;
  <D.110696>:
  _3 = this->D.90158._M_impl._M_finish;
  _4 = &this->D.90158._M_impl;
  std::allocator_traits<std::allocator<short unsigned int> >::construct<short unsigned int, const short unsigned int&> (_4, _3, __x);
  _5 = this->D.90158._M_impl._M_finish;
  _6 = _5 + 2;
  this->D.90158._M_impl._M_finish = _6;
  goto <D.110698>;
  <D.110697>:
  D.110699 = std::vector<short unsigned int, std::allocator<short unsigned int> >::end (this);
  std::vector<short unsigned int, std::allocator<short unsigned int> >::_M_realloc_insert<const short unsigned int&> (this, D.110699, __x);
  <D.110698>:
}


std::allocator_traits<std::allocator<short unsigned int> >::construct<short unsigned int, const short unsigned int&> (struct allocator_type & __a, short unsigned int * __p, const short unsigned int & __args#0)
{
  _1 = std::forward<const short unsigned int&> (__args#0);
  __gnu_cxx::new_allocator<short unsigned int>::construct<short unsigned int, const short unsigned int&> (__a, __p, _1);
}


std::forward<const short unsigned int&> (const type & __t)
{
  const short unsigned int & D.110700;

  try
    {
      D.110700 = __t;
      return D.110700;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


__gnu_cxx::new_allocator<short unsigned int>::construct<short unsigned int, const short unsigned int&> (struct new_allocator * const this, short unsigned int * __p, const short unsigned int & __args#0)
{
  short unsigned int D.110045;
  void * D.110043;
  void * D.110044;

  _1 = std::forward<const short unsigned int&> (__args#0);
  D.110045 = *_1;
  D.110043 = __p;
  D.110044 = operator new (2, D.110043);
  try
    {
      MEM[(short unsigned int *)D.110044] = D.110045;
    }
  catch
    {
      operator delete (D.110044, D.110043);
    }
}


operator new (size_t D.4545, void * __p)
{
  void * D.110702;

  try
    {
      # DEBUG BEGIN_STMT
      D.110702 = __p;
      return D.110702;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


std::vector<short unsigned int, std::allocator<short unsigned int> >::_M_realloc_insert<const short unsigned int&> (struct vector * const this, struct iterator __position, const short unsigned int & __args#0)
{
  struct iterator D.109991;
  const size_type __len;
  short unsigned int * __old_start;
  short unsigned int * __old_finish;
  const size_type __elems_before;
  short unsigned int * __new_start;
  short unsigned int * __new_finish;

  __len = std::vector<short unsigned int, std::allocator<short unsigned int> >::_M_check_len (this, 1, "vector::_M_realloc_insert");
  __old_start = this->D.90158._M_impl._M_start;
  __old_finish = this->D.90158._M_impl._M_finish;
  D.109991 = std::vector<short unsigned int, std::allocator<short unsigned int> >::begin (this);
  try
    {
      _1 = __gnu_cxx::operator-<short unsigned int*, std::vector<short unsigned int, std::allocator<short unsigned int> > > (&__position, &D.109991);
      __elems_before = (const size_type) _1;
    }
  finally
    {
      D.109991 = {CLOBBER};
    }
  _2 = &this->D.90158;
  __new_start = std::_Vector_base<short unsigned int, std::allocator<short unsigned int> >::_M_allocate (_2, __len);
  __new_finish = __new_start;
  try
    {
      _3 = std::forward<const short unsigned int&> (__args#0);
      _4 = __elems_before * 2;
      _5 = __new_start + _4;
      _6 = &this->D.90158._M_impl;
      std::allocator_traits<std::allocator<short unsigned int> >::construct<short unsigned int, const short unsigned int&> (_6, _5, _3);
      __new_finish = 0B;
      _7 = &this->D.90158;
      _8 = std::_Vector_base<short unsigned int, std::allocator<short unsigned int> >::_M_get_Tp_allocator (_7);
      _9 = __gnu_cxx::__normal_iterator<short unsigned int*, std::vector<short unsigned int, std::allocator<short unsigned int> > >::base (&__position);
      _10 = *_9;
      __new_finish = std::__uninitialized_move_if_noexcept_a<short unsigned int*, short unsigned int*, std::allocator<short unsigned int> > (__old_start, _10, __new_start, _8);
      __new_finish = __new_finish + 2;
      _11 = &this->D.90158;
      _12 = std::_Vector_base<short unsigned int, std::allocator<short unsigned int> >::_M_get_Tp_allocator (_11);
      _13 = __gnu_cxx::__normal_iterator<short unsigned int*, std::vector<short unsigned int, std::allocator<short unsigned int> > >::base (&__position);
      _14 = *_13;
      __new_finish = std::__uninitialized_move_if_noexcept_a<short unsigned int*, short unsigned int*, std::allocator<short unsigned int> > (_14, __old_finish, __new_finish, _12);
    }
  catch
    {
      catch (NULL)
        {
          try
            {
              _15 = __builtin_eh_pointer (0);
              __cxa_begin_catch (_15);
              if (__new_finish == 0B) goto <D.110704>; else goto <D.110705>;
              <D.110704>:
              _16 = __elems_before * 2;
              _17 = __new_start + _16;
              _18 = &this->D.90158._M_impl;
              std::allocator_traits<std::allocator<short unsigned int> >::destroy<short unsigned int> (_18, _17);
              goto <D.110706>;
              <D.110705>:
              _19 = &this->D.90158;
              _20 = std::_Vector_base<short unsigned int, std::allocator<short unsigned int> >::_M_get_Tp_allocator (_19);
              std::_Destroy<short unsigned int*, short unsigned int> (__new_start, __new_finish, _20);
              <D.110706>:
              _21 = &this->D.90158;
              std::_Vector_base<short unsigned int, std::allocator<short unsigned int> >::_M_deallocate (_21, __new_start, __len);
              __cxa_rethrow ();
            }
          finally
            {
              __cxa_end_catch ();
            }
        }
    }
  _22 = &this->D.90158;
  _23 = std::_Vector_base<short unsigned int, std::allocator<short unsigned int> >::_M_get_Tp_allocator (_22);
  std::_Destroy<short unsigned int*, short unsigned int> (__old_start, __old_finish, _23);
  _24 = &this->D.90158;
  _25 = this->D.90158._M_impl._M_end_of_storage;
  _26 = _25 - __old_start;
  _27 = _26 /[ex] 2;
  _28 = (long unsigned int) _27;
  std::_Vector_base<short unsigned int, std::allocator<short unsigned int> >::_M_deallocate (_24, __old_start, _28);
  this->D.90158._M_impl._M_start = __new_start;
  this->D.90158._M_impl._M_finish = __new_finish;
  _29 = __len * 2;
  _30 = __new_start + _29;
  this->D.90158._M_impl._M_end_of_storage = _30;
}


std::vector<short unsigned int, std::allocator<short unsigned int> >::_M_check_len (const struct vector * const this, size_type __n, const char * __s)
{
  bool retval.5;
  const long unsigned int D.110048;
  size_type D.110717;
  size_type iftmp.8;
  const size_type __len;

  _1 = std::vector<short unsigned int, std::allocator<short unsigned int> >::max_size (this);
  _2 = std::vector<short unsigned int, std::allocator<short unsigned int> >::size (this);
  _3 = _1 - _2;
  __n.6_4 = __n;
  retval.5 = _3 < __n.6_4;
  if (retval.5 != 0) goto <D.110715>; else goto <D.110716>;
  <D.110715>:
  __s.7_5 = __s;
  std::__throw_length_error (__s.7_5);
  <D.110716>:
  _6 = std::vector<short unsigned int, std::allocator<short unsigned int> >::size (this);
  _7 = std::vector<short unsigned int, std::allocator<short unsigned int> >::size (this);
  D.110048 = _7;
  try
    {
      _8 = std::max<long unsigned int> (&D.110048, &__n);
      _9 = *_8;
      __len = _6 + _9;
    }
  finally
    {
      D.110048 = {CLOBBER};
    }
  _10 = std::vector<short unsigned int, std::allocator<short unsigned int> >::size (this);
  if (__len < _10) goto <D.110719>; else goto <D.110722>;
  <D.110722>:
  _11 = std::vector<short unsigned int, std::allocator<short unsigned int> >::max_size (this);
  if (__len > _11) goto <D.110719>; else goto <D.110720>;
  <D.110719>:
  iftmp.8 = std::vector<short unsigned int, std::allocator<short unsigned int> >::max_size (this);
  goto <D.110721>;
  <D.110720>:
  iftmp.8 = __len;
  <D.110721>:
  D.110717 = iftmp.8;
  return D.110717;
}


std::max<long unsigned int> (const long unsigned int & __a, const long unsigned int & __b)
{
  const long unsigned int & D.110726;

  _1 = *__a;
  _2 = *__b;
  if (_1 < _2) goto <D.110724>; else goto <D.110725>;
  <D.110724>:
  D.110726 = __b;
  // predicted unlikely by early return (on trees) predictor.
  return D.110726;
  <D.110725>:
  D.110726 = __a;
  return D.110726;
}


std::vector<short unsigned int, std::allocator<short unsigned int> >::size (const struct vector * const this)
{
  size_type D.110728;

  try
    {
      _1 = this->D.90158._M_impl._M_finish;
      _2 = this->D.90158._M_impl._M_start;
      _3 = _1 - _2;
      _4 = _3 /[ex] 2;
      D.110728 = (size_type) _4;
      return D.110728;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


std::vector<short unsigned int, std::allocator<short unsigned int> >::max_size (const struct vector * const this)
{
  size_type D.110730;

  try
    {
      _1 = &this->D.90158;
      _2 = std::_Vector_base<short unsigned int, std::allocator<short unsigned int> >::_M_get_Tp_allocator (_1);
      D.110730 = std::allocator_traits<std::allocator<short unsigned int> >::max_size (_2);
      return D.110730;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


std::_Vector_base<short unsigned int, std::allocator<short unsigned int> >::_M_get_Tp_allocator (const struct _Vector_base * const this)
{
  const struct _Tp_alloc_type & D.110732;

  try
    {
      D.110732 = &this->_M_impl;
      return D.110732;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


std::allocator_traits<std::allocator<short unsigned int> >::max_size (const struct allocator_type & __a)
{
  size_type D.110734;

  try
    {
      D.110734 = __gnu_cxx::new_allocator<short unsigned int>::max_size (__a);
      return D.110734;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


__gnu_cxx::operator-<short unsigned int*, std::vector<short unsigned int, std::allocator<short unsigned int> > > (const struct __normal_iterator & __lhs, const struct __normal_iterator & __rhs)
{
  difference_type D.110736;

  try
    {
      _1 = __gnu_cxx::__normal_iterator<short unsigned int*, std::vector<short unsigned int, std::allocator<short unsigned int> > >::base (__lhs);
      _2 = *_1;
      _3 = __gnu_cxx::__normal_iterator<short unsigned int*, std::vector<short unsigned int, std::allocator<short unsigned int> > >::base (__rhs);
      _4 = *_3;
      _5 = _2 - _4;
      D.110736 = _5 /[ex] 2;
      return D.110736;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


std::__uninitialized_move_if_noexcept_a<short unsigned int*, short unsigned int*, std::allocator<short unsigned int> > (short unsigned int * __first, short unsigned int * __last, short unsigned int * __result, struct allocator & __alloc)
{
  short unsigned int * D.110738;
  struct move_iterator D.110739;
  struct move_iterator D.110740;

  D.110739 = std::__make_move_if_noexcept_iterator<short unsigned int> (__last);
  D.110740 = std::__make_move_if_noexcept_iterator<short unsigned int> (__first);
  D.110738 = std::__uninitialized_copy_a<std::move_iterator<short unsigned int*>, short unsigned int*, short unsigned int> (D.110740, D.110739, __result, __alloc);
  return D.110738;
}


std::__make_move_if_noexcept_iterator<short unsigned int> (short unsigned int * __i)
{
  struct move_iterator D.110743;
  struct move_iterator D.110259;

  std::move_iterator<short unsigned int*>::move_iterator (&D.110259, __i);
  try
    {
      D.110743 = D.110259;
      return D.110743;
    }
  finally
    {
      D.110259 = {CLOBBER};
    }
}


std::move_iterator<short unsigned int*>::move_iterator (struct move_iterator * const this, short unsigned int * __i)
{
  MEM[(struct  &)this] = {CLOBBER};
  {
    this->_M_current = __i;
  }
}


std::__uninitialized_copy_a<std::move_iterator<short unsigned int*>, short unsigned int*, short unsigned int> (struct move_iterator __first, struct move_iterator __last, short unsigned int * __result, struct allocator & D.110234)
{
  short unsigned int * D.110746;

  D.110746 = std::uninitialized_copy<std::move_iterator<short unsigned int*>, short unsigned int*> (__first, __last, __result);
  return D.110746;
}


std::uninitialized_copy<std::move_iterator<short unsigned int*>, short unsigned int*> (struct move_iterator __first, struct move_iterator __last, short unsigned int * __result)
{
  short unsigned int * D.110749;
  typedef _ValueType1 _ValueType1;
  typedef _ValueType2 _ValueType2;
  typedef short unsigned int & _RefType1;
  typedef short unsigned int & _RefType2;
  const bool __assignable;

  __assignable = 1;
  D.110749 = std::__uninitialized_copy<true>::__uninit_copy<std::move_iterator<short unsigned int*>, short unsigned int*> (__first, __last, __result);
  return D.110749;
}


std::__uninitialized_copy<true>::__uninit_copy<std::move_iterator<short unsigned int*>, short unsigned int*> (struct move_iterator __first, struct move_iterator __last, short unsigned int * __result)
{
  short unsigned int * D.110752;

  D.110752 = std::copy<std::move_iterator<short unsigned int*>, short unsigned int*> (__first, __last, __result);
  return D.110752;
}


std::copy<std::move_iterator<short unsigned int*>, short unsigned int*> (struct move_iterator __first, struct move_iterator __last, short unsigned int * __result)
{
  short unsigned int * D.110755;

  _1 = std::__miter_base<short unsigned int*> (__last);
  _2 = std::__miter_base<short unsigned int*> (__first);
  D.110755 = std::__copy_move_a2<true, short unsigned int*, short unsigned int*> (_2, _1, __result);
  return D.110755;
}


std::__miter_base<short unsigned int*> (struct move_iterator __it)
{
  short unsigned int * D.110760;

  _1 = std::move_iterator<short unsigned int*>::base (&__it);
  D.110760 = std::__miter_base<short unsigned int*> (_1);
  return D.110760;
}


std::move_iterator<short unsigned int*>::base (const struct move_iterator * const this)
{
  short unsigned int * D.110762;

  D.110762 = this->_M_current;
  return D.110762;
}


std::__miter_base<short unsigned int*> (short unsigned int * __it)
{
  short unsigned int * D.110764;

  D.110764 = __it;
  return D.110764;
}


std::__copy_move_a2<true, short unsigned int*, short unsigned int*> (short unsigned int * __first, short unsigned int * __last, short unsigned int * __result)
{
  short unsigned int * D.110766;

  _1 = std::__niter_base<short unsigned int*> (__result);
  _2 = std::__niter_base<short unsigned int*> (__last);
  _3 = std::__niter_base<short unsigned int*> (__first);
  D.110766 = std::__copy_move_a<true, short unsigned int*, short unsigned int*> (_3, _2, _1);
  return D.110766;
}


std::__copy_move_a<true, short unsigned int*, short unsigned int*> (short unsigned int * __first, short unsigned int * __last, short unsigned int * __result)
{
  short unsigned int * D.110769;
  typedef _ValueTypeI _ValueTypeI;
  typedef _ValueTypeO _ValueTypeO;
  typedef struct _Category _Category;
  const bool __simple;

  __simple = 1;
  D.110769 = std::__copy_move<true, true, std::random_access_iterator_tag>::__copy_m<short unsigned int> (__first, __last, __result);
  return D.110769;
}


std::__copy_move<true, true, std::random_access_iterator_tag>::__copy_m<short unsigned int> (const short unsigned int * __first, const short unsigned int * __last, short unsigned int * __result)
{
  short unsigned int * D.110774;
  typedef struct __assignable __assignable;
  const ptrdiff_t _Num;

  _1 = __last - __first;
  _Num = _1 /[ex] 2;
  if (_Num != 0) goto <D.110771>; else goto <D.110772>;
  <D.110771>:
  _Num.9_2 = (long unsigned int) _Num;
  _3 = _Num.9_2 * 2;
  __builtin_memmove (__result, __first, _3);
  goto <D.110773>;
  <D.110772>:
  <D.110773>:
  _Num.10_4 = (long unsigned int) _Num;
  _5 = _Num.10_4 * 2;
  D.110774 = __result + _5;
  return D.110774;
}


std::allocator_traits<std::allocator<short unsigned int> >::destroy<short unsigned int> (struct allocator_type & __a, short unsigned int * __p)
{
  __gnu_cxx::new_allocator<short unsigned int>::destroy<short unsigned int> (__a, __p);
}


__gnu_cxx::new_allocator<short unsigned int>::destroy<short unsigned int> (struct new_allocator * const this, short unsigned int * __p)
{
  GIMPLE_NOP
}


std::_Destroy<short unsigned int*, short unsigned int> (short unsigned int * __first, short unsigned int * __last, struct allocator & D.107097)
{
  std::_Destroy<short unsigned int*> (__first, __last);
}


std::_Destroy<short unsigned int*> (short unsigned int * __first, short unsigned int * __last)
{
  typedef _Value_type _Value_type;

  std::_Destroy_aux<true>::__destroy<short unsigned int*> (__first, __last);
}


std::_Destroy_aux<true>::__destroy<short unsigned int*> (short unsigned int * D.108659, short unsigned int * D.108660)
{
  GIMPLE_NOP
}


std::back_insert_iterator<std::vector<short unsigned int, std::allocator<short unsigned int> > >::operator++ (struct back_insert_iterator * const this)
{
  struct back_insert_iterator & D.110776;

  D.110776 = this;
  return D.110776;
}


__gnu_cxx::__normal_iterator<const short unsigned int*, std::vector<short unsigned int, std::allocator<short unsigned int> > >::operator++ (struct __normal_iterator * const this)
{
  struct __normal_iterator & D.110778;

  try
    {
      _1 = this->_M_current;
      _2 = _1 + 2;
      this->_M_current = _2;
      D.110778 = this;
      return D.110778;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


std::vector<short unsigned int, std::allocator<short unsigned int> >::~vector (struct vector * const this)
{
  try
    {
      {
        try
          {
            try
              {
                _1 = &this->D.90158;
                _2 = std::_Vector_base<short unsigned int, std::allocator<short unsigned int> >::_M_get_Tp_allocator (_1);
                _3 = this->D.90158._M_impl._M_finish;
                _4 = this->D.90158._M_impl._M_start;
                std::_Destroy<short unsigned int*, short unsigned int> (_4, _3, _2);
              }
            finally
              {
                _5 = &this->D.90158;
                std::_Vector_base<short unsigned int, std::allocator<short unsigned int> >::~_Vector_base (_5);
              }
          }
        finally
          {
            MEM[(struct  &)this] = {CLOBBER};
          }
      }
      <D.107104>:
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


SelectionView<const SOA::Container<std::vector, s_decayvertex>&>::~SelectionView (struct SelectionView * const this)
{
  {
    try
      {
        try
          {

          }
        finally
          {
            _1 = &this->m_indices;
            std::vector<short unsigned int, std::allocator<short unsigned int> >::~vector (_1);
          }
      }
    finally
      {
        MEM[(struct  &)this] = {CLOBBER};
      }
  }
  <D.104292>:
}


main ()
{
  int D.110780;

  # DEBUG BEGIN_STMT
  D.110780 = 0;
  return D.110780;
  D.110780 = 0;
  return D.110780;
}


